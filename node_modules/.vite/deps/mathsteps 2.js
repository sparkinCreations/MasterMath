import {
  __commonJS
} from "./chunk-G3PMV62Z.js";

// node_modules/mathsteps/lib/ChangeTypes.js
var require_ChangeTypes = __commonJS({
  "node_modules/mathsteps/lib/ChangeTypes.js"(exports, module) {
    module.exports = {
      NO_CHANGE: "NO_CHANGE",
      // ARITHMETIC
      // e.g. 2 + 2 -> 4 or 2 * 2 -> 4
      SIMPLIFY_ARITHMETIC: "SIMPLIFY_ARITHMETIC",
      // BASICS
      // e.g. 2/-1 -> -2
      DIVISION_BY_NEGATIVE_ONE: "DIVISION_BY_NEGATIVE_ONE",
      // e.g. 2/1 -> 2
      DIVISION_BY_ONE: "DIVISION_BY_ONE",
      // e.g. x * 0 -> 0
      MULTIPLY_BY_ZERO: "MULTIPLY_BY_ZERO",
      // e.g. x * 2 -> 2x
      REARRANGE_COEFF: "REARRANGE_COEFF",
      // e.g. x ^ 0 -> 1
      REDUCE_EXPONENT_BY_ZERO: "REDUCE_EXPONENT_BY_ZERO",
      // e.g. 0/1 -> 0
      REDUCE_ZERO_NUMERATOR: "REDUCE_ZERO_NUMERATOR",
      // e.g. 2 + 0 -> 2
      REMOVE_ADDING_ZERO: "REMOVE_ADDING_ZERO",
      // e.g. x ^ 1 -> x
      REMOVE_EXPONENT_BY_ONE: "REMOVE_EXPONENT_BY_ONE",
      // e.g. 1 ^ x -> 1
      REMOVE_EXPONENT_BASE_ONE: "REMOVE_EXPONENT_BASE_ONE",
      // e.g. x * -1 -> -x
      REMOVE_MULTIPLYING_BY_NEGATIVE_ONE: "REMOVE_MULTIPLYING_BY_NEGATIVE_ONE",
      // e.g. x * 1 -> x
      REMOVE_MULTIPLYING_BY_ONE: "REMOVE_MULTIPLYING_BY_ONE",
      // e.g. 2 - - 3 -> 2 + 3
      RESOLVE_DOUBLE_MINUS: "RESOLVE_DOUBLE_MINUS",
      // COLLECT AND COMBINE AND BREAK UP
      // e.g. 2 + x + 3 + x -> 5 + 2x
      COLLECT_AND_COMBINE_LIKE_TERMS: "COLLECT_AND_COMBINE_LIKE_TERMS",
      // e.g. x + 2 + x^2 + x + 4 -> x^2 + (x + x) + (4 + 2)
      COLLECT_LIKE_TERMS: "COLLECT_LIKE_TERMS",
      // MULTIPLYING CONSTANT POWERS
      // e.g. 10^2 * 10^3 -> 10^(2+3)
      COLLECT_CONSTANT_EXPONENTS: "COLLECT_CONSTANT_EXPONENTS",
      // ADDING POLYNOMIALS
      // e.g. 2x + x -> 2x + 1x
      ADD_COEFFICIENT_OF_ONE: "ADD_COEFFICIENT_OF_ONE",
      // e.g. x^2 + x^2 -> 2x^2
      ADD_POLYNOMIAL_TERMS: "ADD_POLYNOMIAL_TERMS",
      // e.g. 2x^2 + 3x^2 + 5x^2 -> (2+3+5)x^2
      GROUP_COEFFICIENTS: "GROUP_COEFFICIENTS",
      // e.g. -x + 2x => -1*x + 2x
      UNARY_MINUS_TO_NEGATIVE_ONE: "UNARY_MINUS_TO_NEGATIVE_ONE",
      // MULTIPLYING POLYNOMIALS
      // e.g. x^2 * x -> x^2 * x^1
      ADD_EXPONENT_OF_ONE: "ADD_EXPONENT_OF_ONE",
      // e.g. x^2 * x^3 * x^1 -> x^(2 + 3 + 1)
      COLLECT_POLYNOMIAL_EXPONENTS: "COLLECT_POLYNOMIAL_EXPONENTS",
      // e.g. 2x * 3x -> (2 * 3)(x * x)
      MULTIPLY_COEFFICIENTS: "MULTIPLY_COEFFICIENTS",
      // e.g. 2x * x -> 2x ^ 2
      MULTIPLY_POLYNOMIAL_TERMS: "MULTIPLY_POLYNOMIAL_TERMS",
      // FRACTIONS
      // e.g. (x + 2)/2 -> x/2 + 2/2
      BREAK_UP_FRACTION: "BREAK_UP_FRACTION",
      // e.g. -2/-3 => 2/3
      CANCEL_MINUSES: "CANCEL_MINUSES",
      // e.g. 2x/2 -> x
      CANCEL_TERMS: "CANCEL_TERMS",
      // e.g. 2/6 -> 1/3
      SIMPLIFY_FRACTION: "SIMPLIFY_FRACTION",
      // e.g. 2/-3 -> -2/3
      SIMPLIFY_SIGNS: "SIMPLIFY_SIGNS",
      // e.g. 15/6 -> (5*3)/(2*3)
      FIND_GCD: "FIND_GCD",
      // e.g. (5*3)/(2*3) -> 5/2
      CANCEL_GCD: "CANCEL_GCD",
      // e.g. 1 2/3 -> 5/3
      CONVERT_MIXED_NUMBER_TO_IMPROPER_FRACTION: "CONVERT_MIXED_NUMBER_TO_IMPROPER_FRACTION",
      // e.g. 1 2/3 -> ((1 * 3) + 2) / 3
      IMPROPER_FRACTION_NUMERATOR: "IMPROPER_FRACTION_NUMERATOR",
      // ADDING FRACTIONS
      // e.g. 1/2 + 1/3 -> 5/6
      ADD_FRACTIONS: "ADD_FRACTIONS",
      // e.g. (1 + 2)/3 -> 3/3
      ADD_NUMERATORS: "ADD_NUMERATORS",
      // e.g. (2+1)/5
      COMBINE_NUMERATORS: "COMBINE_NUMERATORS",
      // e.g. 2/6 + 1/4 -> (2*2)/(6*2) + (1*3)/(4*3)
      COMMON_DENOMINATOR: "COMMON_DENOMINATOR",
      // e.g. 3 + 1/2 -> 6/2 + 1/2 (for addition)
      CONVERT_INTEGER_TO_FRACTION: "CONVERT_INTEGER_TO_FRACTION",
      // e.g. 1.2 + 1/2 -> 1.2 + 0.5
      DIVIDE_FRACTION_FOR_ADDITION: "DIVIDE_FRACTION_FOR_ADDITION",
      // e.g. (2*2)/(6*2) + (1*3)/(4*3) -> (2*2)/12 + (1*3)/12
      MULTIPLY_DENOMINATORS: "MULTIPLY_DENOMINATORS",
      // e.g. (2*2)/12 + (1*3)/12 -> 4/12 + 3/12
      MULTIPLY_NUMERATORS: "MULTIPLY_NUMERATORS",
      // MULTIPLYING FRACTIONS
      // e.g. 1/2 * 2/3 -> 2/6
      MULTIPLY_FRACTIONS: "MULTIPLY_FRACTIONS",
      // DIVISION
      // e.g. 2/3/4 -> 2/(3*4)
      SIMPLIFY_DIVISION: "SIMPLIFY_DIVISION",
      // e.g. x/(2/3) -> x * 3/2
      MULTIPLY_BY_INVERSE: "MULTIPLY_BY_INVERSE",
      // DISTRIBUTION
      // e.g. 2(x + y) -> 2x + 2y
      DISTRIBUTE: "DISTRIBUTE",
      // e.g. -(2 + x) -> -2 - x
      DISTRIBUTE_NEGATIVE_ONE: "DISTRIBUTE_NEGATIVE_ONE",
      // e.g. 2 * 4x + 2*5 --> 8x + 10 (as part of distribution)
      SIMPLIFY_TERMS: "SIMPLIFY_TERMS",
      // e.g. (nthRoot(x, 2))^2 -> nthRoot(x, 2) * nthRoot(x, 2)
      // e.g. (2x + 3)^2 -> (2x + 3) (2x + 3)
      EXPAND_EXPONENT: "EXPAND_EXPONENT",
      // ABSOLUTE
      // e.g. |-3| -> 3
      ABSOLUTE_VALUE: "ABSOLUTE_VALUE",
      // ROOTS
      // e.g. nthRoot(x ^ 2, 4) -> nthRoot(x, 2)
      CANCEL_EXPONENT: "CANCEL_EXPONENT",
      // e.g. nthRoot(x ^ 2, 2) -> x
      CANCEL_EXPONENT_AND_ROOT: "CANCEL_EXPONENT_AND_ROOT",
      // e.g. nthRoot(x ^ 4, 2) -> x ^ 2
      CANCEL_ROOT: "CANCEL_ROOT",
      // e.g. nthRoot(2, 2) * nthRoot(3, 2) -> nthRoot(2 * 3, 2)
      COMBINE_UNDER_ROOT: "COMBINE_UNDER_ROOT",
      // e.g. 2 * 2 * 2 -> 2 ^ 3
      CONVERT_MULTIPLICATION_TO_EXPONENT: "CONVERT_MULTIPLICATION_TO_EXPONENT",
      // e.g. nthRoot(2 * x) -> nthRoot(2) * nthRoot(x)
      DISTRIBUTE_NTH_ROOT: "DISTRIBUTE_NTH_ROOT",
      // e.g. nthRoot(4) * nthRoot(x^2) -> 2 * x
      EVALUATE_DISTRIBUTED_NTH_ROOT: "EVALUATE_DISTRIBUTED_NTH_ROOT",
      // e.g. 12 -> 2 * 2 * 3
      FACTOR_INTO_PRIMES: "FACTOR_INTO_PRIMES",
      // e.g. nthRoot(2 * 2 * 2, 2) -> nthRoot((2 * 2) * 2)
      GROUP_TERMS_BY_ROOT: "GROUP_TERMS_BY_ROOT",
      // e.g. nthRoot(4) -> 2
      NTH_ROOT_VALUE: "NTH_ROOT_VALUE",
      // e.g. nthRoot(4) + nthRoot(4) = 2*nthRoot(4)
      ADD_NTH_ROOTS: "ADD_NTH_ROOTS",
      // e.g. nthRoot(x, 2) * nthRoot(x, 2) -> nthRoot(x^2, 2)
      MULTIPLY_NTH_ROOTS: "MULTIPLY_NTH_ROOTS",
      // SOLVING FOR A VARIABLE
      // e.g. x - 3 = 2 -> x - 3 + 3 = 2 + 3
      ADD_TO_BOTH_SIDES: "ADD_TO_BOTH_SIDES",
      // e.g. 2x = 1 -> (2x)/2 = 1/2
      DIVIDE_FROM_BOTH_SIDES: "DIVIDE_FROM_BOTH_SIDES",
      // e.g. (2/3)x = 1 -> (2/3)x * (3/2) = 1 * (3/2)
      MULTIPLY_BOTH_SIDES_BY_INVERSE_FRACTION: "MULTIPLY_BOTH_SIDES_BY_INVERSE_FRACTION",
      // e.g. -x = 2 -> -1 * -x = -1 * 2
      MULTIPLY_BOTH_SIDES_BY_NEGATIVE_ONE: "MULTIPLY_BOTH_SIDES_BY_NEGATIVE_ONE",
      // e.g. x/2 = 1 -> (x/2) * 2 = 1 * 2
      MULTIPLY_TO_BOTH_SIDES: "MULTIPLY_TO_BOTH_SIDES",
      // e.g. x + 2 - 1 = 3 -> x + 1 = 3
      SIMPLIFY_LEFT_SIDE: "SIMPLIFY_LEFT_SIDE",
      // e.g. x = 3 - 1 -> x = 2
      SIMPLIFY_RIGHT_SIDE: "SIMPLIFY_RIGHT_SIDE",
      // e.g. x + 3 = 2 -> x + 3 - 3 = 2 - 3
      SUBTRACT_FROM_BOTH_SIDES: "SUBTRACT_FROM_BOTH_SIDES",
      // e.g. 2 = x -> x = 2
      SWAP_SIDES: "SWAP_SIDES",
      // e.g. (x - 2) (x + 2) = 0 => x = [-2, 2]
      FIND_ROOTS: "FIND_ROOTS",
      // CONSTANT EQUATION
      // e.g. 2 = 2
      STATEMENT_IS_TRUE: "STATEMENT_IS_TRUE",
      // e.g. 2 = 3
      STATEMENT_IS_FALSE: "STATEMENT_IS_FALSE",
      // FACTORING
      // e.g. x^2 - 4x -> x(x - 4)
      FACTOR_SYMBOL: "FACTOR_SYMBOL",
      // e.g. x^2 - 4 -> (x - 2)(x + 2)
      FACTOR_DIFFERENCE_OF_SQUARES: "FACTOR_DIFFERENCE_OF_SQUARES",
      // e.g. x^2 + 2x + 1 -> (x + 1)^2
      FACTOR_PERFECT_SQUARE: "FACTOR_PERFECT_SQUARE",
      // e.g. x^2 + 3x + 2 -> (x + 1)(x + 2)
      FACTOR_SUM_PRODUCT_RULE: "FACTOR_SUM_PRODUCT_RULE",
      // e.g. 2x^2 + 4x + 2 -> 2x^2 + 2x + 2x + 2
      BREAK_UP_TERM: "BREAK_UP_TERM"
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/utils/object.js
var require_object = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/utils/object.js"(exports) {
    "use strict";
    exports.clone = function clone(x) {
      var type = typeof x;
      if (type === "number" || type === "string" || type === "boolean" || x === null || x === void 0) {
        return x;
      }
      if (typeof x.clone === "function") {
        return x.clone();
      }
      if (Array.isArray(x)) {
        return x.map(function(value) {
          return clone(value);
        });
      }
      if (x instanceof Number) return new Number(x.valueOf());
      if (x instanceof String) return new String(x.valueOf());
      if (x instanceof Boolean) return new Boolean(x.valueOf());
      if (x instanceof Date) return new Date(x.valueOf());
      if (x && x.isBigNumber === true) return x;
      if (x instanceof RegExp) throw new TypeError("Cannot clone " + x);
      var m = {};
      for (var key in x) {
        if (x.hasOwnProperty(key)) {
          m[key] = clone(x[key]);
        }
      }
      return m;
    };
    exports.extend = function(a, b) {
      for (var prop in b) {
        if (b.hasOwnProperty(prop)) {
          a[prop] = b[prop];
        }
      }
      return a;
    };
    exports.deepExtend = function deepExtend(a, b) {
      if (Array.isArray(b)) {
        throw new TypeError("Arrays are not supported by deepExtend");
      }
      for (var prop in b) {
        if (b.hasOwnProperty(prop)) {
          if (b[prop] && b[prop].constructor === Object) {
            if (a[prop] === void 0) {
              a[prop] = {};
            }
            if (a[prop].constructor === Object) {
              deepExtend(a[prop], b[prop]);
            } else {
              a[prop] = b[prop];
            }
          } else if (Array.isArray(b[prop])) {
            throw new TypeError("Arrays are not supported by deepExtend");
          } else {
            a[prop] = b[prop];
          }
        }
      }
      return a;
    };
    exports.deepEqual = function deepEqual(a, b) {
      var prop, i, len;
      if (Array.isArray(a)) {
        if (!Array.isArray(b)) {
          return false;
        }
        if (a.length != b.length) {
          return false;
        }
        for (i = 0, len = a.length; i < len; i++) {
          if (!exports.deepEqual(a[i], b[i])) {
            return false;
          }
        }
        return true;
      } else if (a instanceof Object) {
        if (Array.isArray(b) || !(b instanceof Object)) {
          return false;
        }
        for (prop in a) {
          if (!exports.deepEqual(a[prop], b[prop])) {
            return false;
          }
        }
        for (prop in b) {
          if (!exports.deepEqual(a[prop], b[prop])) {
            return false;
          }
        }
        return true;
      } else {
        return typeof a === typeof b && a == b;
      }
    };
    exports.canDefineProperty = function() {
      try {
        if (Object.defineProperty) {
          Object.defineProperty({}, "x", { get: function() {
          } });
          return true;
        }
      } catch (e) {
      }
      return false;
    };
    exports.lazy = function(object, prop, fn) {
      if (exports.canDefineProperty()) {
        var _uninitialized = true;
        var _value;
        Object.defineProperty(object, prop, {
          get: function() {
            if (_uninitialized) {
              _value = fn();
              _uninitialized = false;
            }
            return _value;
          },
          set: function(value) {
            _value = value;
            _uninitialized = false;
          },
          configurable: true,
          enumerable: true
        });
      } else {
        object[prop] = fn();
      }
    };
    exports.traverse = function(object, path) {
      var obj = object;
      if (path) {
        var names = path.split(".");
        for (var i = 0; i < names.length; i++) {
          var name = names[i];
          if (!(name in obj)) {
            obj[name] = {};
          }
          obj = obj[name];
        }
      }
      return obj;
    };
    exports.isFactory = function(object) {
      return object && typeof object.factory === "function";
    };
  }
});

// node_modules/mathsteps/node_modules/typed-function/typed-function.js
var require_typed_function = __commonJS({
  "node_modules/mathsteps/node_modules/typed-function/typed-function.js"(exports, module) {
    "use strict";
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define([], factory);
      } else if (typeof exports === "object") {
        module.exports = factory();
      } else {
        root.typed = factory();
      }
    })(exports, function() {
      function create() {
        function getTypeTest(name) {
          var test;
          for (var i = 0; i < typed.types.length; i++) {
            var entry = typed.types[i];
            if (entry.name === name) {
              test = entry.test;
              break;
            }
          }
          if (!test) {
            var hint;
            for (i = 0; i < typed.types.length; i++) {
              entry = typed.types[i];
              if (entry.name.toLowerCase() == name.toLowerCase()) {
                hint = entry.name;
                break;
              }
            }
            throw new Error('Unknown type "' + name + '"' + (hint ? '. Did you mean "' + hint + '"?' : ""));
          }
          return test;
        }
        function getName(fns) {
          var name = "";
          for (var i = 0; i < fns.length; i++) {
            var fn = fns[i];
            if (fn.signatures && fn.name != "") {
              if (name == "") {
                name = fn.name;
              } else if (name != fn.name) {
                var err = new Error("Function names do not match (expected: " + name + ", actual: " + fn.name + ")");
                err.data = {
                  actual: fn.name,
                  expected: name
                };
                throw err;
              }
            }
          }
          return name;
        }
        function createError(fn, argCount, index, actual, expected) {
          var actualType = getTypeOf(actual);
          var _expected = expected ? expected.split(",") : null;
          var _fn = fn || "unnamed";
          var anyType = _expected && contains(_expected, "any");
          var message;
          var data = {
            fn,
            index,
            actual,
            expected: _expected
          };
          if (_expected) {
            if (argCount > index && !anyType) {
              message = "Unexpected type of argument in function " + _fn + " (expected: " + _expected.join(" or ") + ", actual: " + actualType + ", index: " + index + ")";
            } else {
              message = "Too few arguments in function " + _fn + " (expected: " + _expected.join(" or ") + ", index: " + index + ")";
            }
          } else {
            message = "Too many arguments in function " + _fn + " (expected: " + index + ", actual: " + argCount + ")";
          }
          var err = new TypeError(message);
          err.data = data;
          return err;
        }
        function Refs(name) {
          this.name = name || "refs";
          this.categories = {};
        }
        Refs.prototype.add = function(fn, category) {
          var cat = category || "fn";
          if (!this.categories[cat]) this.categories[cat] = [];
          var index = this.categories[cat].indexOf(fn);
          if (index == -1) {
            index = this.categories[cat].length;
            this.categories[cat].push(fn);
          }
          return cat + index;
        };
        Refs.prototype.toCode = function() {
          var code = [];
          var path = this.name + ".categories";
          var categories = this.categories;
          for (var cat in categories) {
            if (categories.hasOwnProperty(cat)) {
              var category = categories[cat];
              for (var i = 0; i < category.length; i++) {
                code.push("var " + cat + i + " = " + path + "['" + cat + "'][" + i + "];");
              }
            }
          }
          return code.join("\n");
        };
        function Param(types2, varArgs) {
          if (typeof types2 === "string") {
            var _types = types2.trim();
            var _varArgs = _types.substr(0, 3) === "...";
            if (_varArgs) {
              _types = _types.substr(3);
            }
            if (_types === "") {
              this.types = ["any"];
            } else {
              this.types = _types.split("|");
              for (var i = 0; i < this.types.length; i++) {
                this.types[i] = this.types[i].trim();
              }
            }
          } else if (Array.isArray(types2)) {
            this.types = types2;
          } else if (types2 instanceof Param) {
            return types2.clone();
          } else {
            throw new Error("String or Array expected");
          }
          this.conversions = [];
          this.varArgs = _varArgs || varArgs || false;
          this.anyType = this.types.indexOf("any") !== -1;
        }
        Param.compare = function(a, b) {
          if (a.anyType) return 1;
          if (b.anyType) return -1;
          if (contains(a.types, "Object")) return 1;
          if (contains(b.types, "Object")) return -1;
          if (a.hasConversions()) {
            if (b.hasConversions()) {
              var i, ac, bc;
              for (i = 0; i < a.conversions.length; i++) {
                if (a.conversions[i] !== void 0) {
                  ac = a.conversions[i];
                  break;
                }
              }
              for (i = 0; i < b.conversions.length; i++) {
                if (b.conversions[i] !== void 0) {
                  bc = b.conversions[i];
                  break;
                }
              }
              return typed.conversions.indexOf(ac) - typed.conversions.indexOf(bc);
            } else {
              return 1;
            }
          } else {
            if (b.hasConversions()) {
              return -1;
            } else {
              var ai, bi;
              for (i = 0; i < typed.types.length; i++) {
                if (typed.types[i].name === a.types[0]) {
                  ai = i;
                  break;
                }
              }
              for (i = 0; i < typed.types.length; i++) {
                if (typed.types[i].name === b.types[0]) {
                  bi = i;
                  break;
                }
              }
              return ai - bi;
            }
          }
        };
        Param.prototype.overlapping = function(other) {
          for (var i = 0; i < this.types.length; i++) {
            if (contains(other.types, this.types[i])) {
              return true;
            }
          }
          return false;
        };
        Param.prototype.matches = function(other) {
          return this.anyType || other.anyType || this.overlapping(other);
        };
        Param.prototype.clone = function() {
          var param = new Param(this.types.slice(), this.varArgs);
          param.conversions = this.conversions.slice();
          return param;
        };
        Param.prototype.hasConversions = function() {
          return this.conversions.length > 0;
        };
        Param.prototype.contains = function(types2) {
          for (var i = 0; i < this.types.length; i++) {
            if (types2[this.types[i]]) {
              return true;
            }
          }
          return false;
        };
        Param.prototype.toString = function(toConversion) {
          var types2 = [];
          var keys = {};
          for (var i = 0; i < this.types.length; i++) {
            var conversion = this.conversions[i];
            var type = toConversion && conversion ? conversion.to : this.types[i];
            if (!(type in keys)) {
              keys[type] = true;
              types2.push(type);
            }
          }
          return (this.varArgs ? "..." : "") + types2.join("|");
        };
        function Signature(params, fn) {
          var _params;
          if (typeof params === "string") {
            _params = params !== "" ? params.split(",") : [];
          } else if (Array.isArray(params)) {
            _params = params;
          } else {
            throw new Error("string or Array expected");
          }
          this.params = new Array(_params.length);
          this.anyType = false;
          this.varArgs = false;
          for (var i = 0; i < _params.length; i++) {
            var param = new Param(_params[i]);
            this.params[i] = param;
            if (param.anyType) {
              this.anyType = true;
            }
            if (i === _params.length - 1) {
              this.varArgs = param.varArgs;
            } else {
              if (param.varArgs) {
                throw new SyntaxError('Unexpected variable arguments operator "..."');
              }
            }
          }
          this.fn = fn;
        }
        Signature.prototype.clone = function() {
          return new Signature(this.params.slice(), this.fn);
        };
        Signature.prototype.expand = function() {
          var signatures = [];
          function recurse(signature, path) {
            if (path.length < signature.params.length) {
              var i, newParam, conversion;
              var param = signature.params[path.length];
              if (param.varArgs) {
                newParam = param.clone();
                for (i = 0; i < typed.conversions.length; i++) {
                  conversion = typed.conversions[i];
                  if (!contains(param.types, conversion.from) && contains(param.types, conversion.to)) {
                    var j = newParam.types.length;
                    newParam.types[j] = conversion.from;
                    newParam.conversions[j] = conversion;
                  }
                }
                recurse(signature, path.concat(newParam));
              } else {
                for (i = 0; i < param.types.length; i++) {
                  recurse(signature, path.concat(new Param(param.types[i])));
                }
                for (i = 0; i < typed.conversions.length; i++) {
                  conversion = typed.conversions[i];
                  if (!contains(param.types, conversion.from) && contains(param.types, conversion.to)) {
                    newParam = new Param(conversion.from);
                    newParam.conversions[0] = conversion;
                    recurse(signature, path.concat(newParam));
                  }
                }
              }
            } else {
              signatures.push(new Signature(path, signature.fn));
            }
          }
          recurse(this, []);
          return signatures;
        };
        Signature.compare = function(a, b) {
          if (a.params.length > b.params.length) return 1;
          if (a.params.length < b.params.length) return -1;
          var i;
          var len = a.params.length;
          var ac = 0;
          var bc = 0;
          for (i = 0; i < len; i++) {
            if (a.params[i].hasConversions()) ac++;
            if (b.params[i].hasConversions()) bc++;
          }
          if (ac > bc) return 1;
          if (ac < bc) return -1;
          for (i = 0; i < a.params.length; i++) {
            var cmp = Param.compare(a.params[i], b.params[i]);
            if (cmp !== 0) {
              return cmp;
            }
          }
          return 0;
        };
        Signature.prototype.hasConversions = function() {
          for (var i = 0; i < this.params.length; i++) {
            if (this.params[i].hasConversions()) {
              return true;
            }
          }
          return false;
        };
        Signature.prototype.ignore = function() {
          var types2 = {};
          for (var i = 0; i < typed.ignore.length; i++) {
            types2[typed.ignore[i]] = true;
          }
          for (i = 0; i < this.params.length; i++) {
            if (this.params[i].contains(types2)) {
              return true;
            }
          }
          return false;
        };
        Signature.prototype.paramsStartWith = function(params) {
          if (params.length === 0) {
            return true;
          }
          var aLast = last(this.params);
          var bLast = last(params);
          for (var i = 0; i < params.length; i++) {
            var a = this.params[i] || (aLast.varArgs ? aLast : null);
            var b = params[i] || (bLast.varArgs ? bLast : null);
            if (!a || !b || !a.matches(b)) {
              return false;
            }
          }
          return true;
        };
        Signature.prototype.toCode = function(refs, prefix) {
          var code = [];
          var args = new Array(this.params.length);
          for (var i = 0; i < this.params.length; i++) {
            var param = this.params[i];
            var conversion = param.conversions[0];
            if (param.varArgs) {
              args[i] = "varArgs";
            } else if (conversion) {
              args[i] = refs.add(conversion.convert, "convert") + "(arg" + i + ")";
            } else {
              args[i] = "arg" + i;
            }
          }
          var ref = this.fn ? refs.add(this.fn, "signature") : void 0;
          if (ref) {
            return prefix + "return " + ref + "(" + args.join(", ") + "); // signature: " + this.params.join(", ");
          }
          return code.join("\n");
        };
        Signature.prototype.toString = function() {
          return this.params.join(", ");
        };
        function Node(path, signature, childs, fallThrough) {
          this.path = path || [];
          this.param = path[path.length - 1] || null;
          this.signature = signature || null;
          this.childs = childs || [];
          this.fallThrough = fallThrough || false;
        }
        Node.prototype.toCode = function(refs, prefix) {
          var code = [];
          if (this.param) {
            var index = this.path.length - 1;
            var conversion = this.param.conversions[0];
            var comment = "// type: " + (conversion ? conversion.from + " (convert to " + conversion.to + ")" : this.param);
            if (this.param.varArgs) {
              if (this.param.anyType) {
                code.push(prefix + "if (arguments.length > " + index + ") {");
                code.push(prefix + "  var varArgs = [];");
                code.push(prefix + "  for (var i = " + index + "; i < arguments.length; i++) {");
                code.push(prefix + "    varArgs.push(arguments[i]);");
                code.push(prefix + "  }");
                code.push(this.signature.toCode(refs, prefix + "  "));
                code.push(prefix + "}");
              } else {
                var getTests = (function(types2, arg) {
                  var tests = [];
                  for (var i2 = 0; i2 < types2.length; i2++) {
                    tests[i2] = refs.add(getTypeTest(types2[i2]), "test") + "(" + arg + ")";
                  }
                  return tests.join(" || ");
                }).bind(this);
                var allTypes = this.param.types;
                var exactTypes = [];
                for (var i = 0; i < allTypes.length; i++) {
                  if (this.param.conversions[i] === void 0) {
                    exactTypes.push(allTypes[i]);
                  }
                }
                code.push(prefix + "if (" + getTests(allTypes, "arg" + index) + ") { " + comment);
                code.push(prefix + "  var varArgs = [arg" + index + "];");
                code.push(prefix + "  for (var i = " + (index + 1) + "; i < arguments.length; i++) {");
                code.push(prefix + "    if (" + getTests(exactTypes, "arguments[i]") + ") {");
                code.push(prefix + "      varArgs.push(arguments[i]);");
                for (var i = 0; i < allTypes.length; i++) {
                  var conversion_i = this.param.conversions[i];
                  if (conversion_i) {
                    var test = refs.add(getTypeTest(allTypes[i]), "test");
                    var convert2 = refs.add(conversion_i.convert, "convert");
                    code.push(prefix + "    }");
                    code.push(prefix + "    else if (" + test + "(arguments[i])) {");
                    code.push(prefix + "      varArgs.push(" + convert2 + "(arguments[i]));");
                  }
                }
                code.push(prefix + "    } else {");
                code.push(prefix + "      throw createError(name, arguments.length, i, arguments[i], '" + exactTypes.join(",") + "');");
                code.push(prefix + "    }");
                code.push(prefix + "  }");
                code.push(this.signature.toCode(refs, prefix + "  "));
                code.push(prefix + "}");
              }
            } else {
              if (this.param.anyType) {
                code.push(prefix + "// type: any");
                code.push(this._innerCode(refs, prefix));
              } else {
                var type = this.param.types[0];
                var test = type !== "any" ? refs.add(getTypeTest(type), "test") : null;
                code.push(prefix + "if (" + test + "(arg" + index + ")) { " + comment);
                code.push(this._innerCode(refs, prefix + "  "));
                code.push(prefix + "}");
              }
            }
          } else {
            code.push(this._innerCode(refs, prefix));
          }
          return code.join("\n");
        };
        Node.prototype._innerCode = function(refs, prefix) {
          var code = [];
          var i;
          if (this.signature) {
            code.push(prefix + "if (arguments.length === " + this.path.length + ") {");
            code.push(this.signature.toCode(refs, prefix + "  "));
            code.push(prefix + "}");
          }
          for (i = 0; i < this.childs.length; i++) {
            code.push(this.childs[i].toCode(refs, prefix));
          }
          if (!this.fallThrough || this.param && this.param.anyType) {
            var exceptions = this._exceptions(refs, prefix);
            if (exceptions) {
              code.push(exceptions);
            }
          }
          return code.join("\n");
        };
        Node.prototype._exceptions = function(refs, prefix) {
          var index = this.path.length;
          if (this.childs.length === 0) {
            return [
              prefix + "if (arguments.length > " + index + ") {",
              prefix + "  throw createError(name, arguments.length, " + index + ", arguments[" + index + "]);",
              prefix + "}"
            ].join("\n");
          } else {
            var keys = {};
            var types2 = [];
            for (var i = 0; i < this.childs.length; i++) {
              var node = this.childs[i];
              if (node.param) {
                for (var j = 0; j < node.param.types.length; j++) {
                  var type = node.param.types[j];
                  if (!(type in keys) && !node.param.conversions[j]) {
                    keys[type] = true;
                    types2.push(type);
                  }
                }
              }
            }
            return prefix + "throw createError(name, arguments.length, " + index + ", arguments[" + index + "], '" + types2.join(",") + "');";
          }
        };
        function parseSignatures(rawSignatures) {
          var signature;
          var keys = {};
          var signatures = [];
          var i;
          for (var types2 in rawSignatures) {
            if (rawSignatures.hasOwnProperty(types2)) {
              var fn = rawSignatures[types2];
              signature = new Signature(types2, fn);
              if (signature.ignore()) {
                continue;
              }
              var expanded = signature.expand();
              for (i = 0; i < expanded.length; i++) {
                var signature_i = expanded[i];
                var key = signature_i.toString();
                var existing = keys[key];
                if (!existing) {
                  keys[key] = signature_i;
                } else {
                  var cmp = Signature.compare(signature_i, existing);
                  if (cmp < 0) {
                    keys[key] = signature_i;
                  } else if (cmp === 0) {
                    throw new Error('Signature "' + key + '" is defined twice');
                  }
                }
              }
            }
          }
          for (key in keys) {
            if (keys.hasOwnProperty(key)) {
              signatures.push(keys[key]);
            }
          }
          signatures.sort(function(a, b) {
            return Signature.compare(a, b);
          });
          for (i = 0; i < signatures.length; i++) {
            signature = signatures[i];
            if (signature.varArgs) {
              var index = signature.params.length - 1;
              var param = signature.params[index];
              var t = 0;
              while (t < param.types.length) {
                if (param.conversions[t]) {
                  var type = param.types[t];
                  for (var j = 0; j < signatures.length; j++) {
                    var other = signatures[j];
                    var p = other.params[index];
                    if (other !== signature && p && contains(p.types, type) && !p.conversions[index]) {
                      param.types.splice(t, 1);
                      param.conversions.splice(t, 1);
                      t--;
                      break;
                    }
                  }
                }
                t++;
              }
            }
          }
          return signatures;
        }
        function filterAnyTypeSignatures(signatures) {
          var filtered = [];
          for (var i = 0; i < signatures.length; i++) {
            if (signatures[i].anyType) {
              filtered.push(signatures[i]);
            }
          }
          return filtered;
        }
        function mapSignatures(signatures) {
          var normalized = {};
          for (var i = 0; i < signatures.length; i++) {
            var signature = signatures[i];
            if (signature.fn && !signature.hasConversions()) {
              var params = signature.params.join(",");
              normalized[params] = signature.fn;
            }
          }
          return normalized;
        }
        function parseTree(signatures, path, anys) {
          var i, signature;
          var index = path.length;
          var nodeSignature;
          var filtered = [];
          for (i = 0; i < signatures.length; i++) {
            signature = signatures[i];
            if (signature.params.length === index && !nodeSignature) {
              nodeSignature = signature;
            }
            if (signature.params[index] != void 0) {
              filtered.push(signature);
            }
          }
          filtered.sort(function(a, b) {
            return Param.compare(a.params[index], b.params[index]);
          });
          var entries = [];
          for (i = 0; i < filtered.length; i++) {
            signature = filtered[i];
            var param = signature.params[index];
            var existing = entries.filter(function(entry2) {
              return entry2.param.overlapping(param);
            })[0];
            if (existing) {
              if (existing.param.varArgs) {
                throw new Error('Conflicting types "' + existing.param + '" and "' + param + '"');
              }
              existing.signatures.push(signature);
            } else {
              entries.push({
                param,
                signatures: [signature]
              });
            }
          }
          var matchingAnys = [];
          for (i = 0; i < anys.length; i++) {
            if (anys[i].paramsStartWith(path)) {
              matchingAnys.push(anys[i]);
            }
          }
          var fallThrough = false;
          for (i = 0; i < matchingAnys.length; i++) {
            if (!contains(signatures, matchingAnys[i])) {
              fallThrough = true;
              break;
            }
          }
          var childs = new Array(entries.length);
          for (i = 0; i < entries.length; i++) {
            var entry = entries[i];
            childs[i] = parseTree(entry.signatures, path.concat(entry.param), matchingAnys);
          }
          return new Node(path, nodeSignature, childs, fallThrough);
        }
        function getArgs(count) {
          var args = [];
          for (var i = 0; i < count; i++) {
            args[i] = "arg" + i;
          }
          return args;
        }
        function _typed(name, signatures) {
          var refs = new Refs();
          var _signatures = parseSignatures(signatures);
          if (_signatures.length == 0) {
            throw new Error("No signatures provided");
          }
          var anys = filterAnyTypeSignatures(_signatures);
          var node = parseTree(_signatures, [], anys);
          var code = [];
          var _name = name || "";
          var _args = getArgs(maxParams(_signatures));
          code.push("function " + _name + "(" + _args.join(", ") + ") {");
          code.push('  "use strict";');
          code.push("  var name = '" + _name + "';");
          code.push(node.toCode(refs, "  ", false));
          code.push("}");
          var body = [
            refs.toCode(),
            "return " + code.join("\n")
          ].join("\n");
          var factory = new Function(refs.name, "createError", body);
          var fn = factory(refs, createError);
          fn.signatures = mapSignatures(_signatures);
          return fn;
        }
        function maxParams(signatures) {
          var max = 0;
          for (var i = 0; i < signatures.length; i++) {
            var len = signatures[i].params.length;
            if (len > max) {
              max = len;
            }
          }
          return max;
        }
        function getTypeOf(x) {
          var obj;
          for (var i = 0; i < typed.types.length; i++) {
            var entry = typed.types[i];
            if (entry.name === "Object") {
              obj = entry;
            } else {
              if (entry.test(x)) return entry.name;
            }
          }
          if (obj && obj.test(x)) return obj.name;
          return "unknown";
        }
        function contains(array, item) {
          return array.indexOf(item) !== -1;
        }
        function last(array) {
          return array[array.length - 1];
        }
        var types = [
          { name: "number", test: function(x) {
            return typeof x === "number";
          } },
          { name: "string", test: function(x) {
            return typeof x === "string";
          } },
          { name: "boolean", test: function(x) {
            return typeof x === "boolean";
          } },
          { name: "Function", test: function(x) {
            return typeof x === "function";
          } },
          { name: "Array", test: Array.isArray },
          { name: "Date", test: function(x) {
            return x instanceof Date;
          } },
          { name: "RegExp", test: function(x) {
            return x instanceof RegExp;
          } },
          { name: "Object", test: function(x) {
            return typeof x === "object";
          } },
          { name: "null", test: function(x) {
            return x === null;
          } },
          { name: "undefined", test: function(x) {
            return x === void 0;
          } }
        ];
        var config = {};
        var conversions = [];
        var ignore = [];
        var typed = {
          config,
          types,
          conversions,
          ignore
        };
        typed = _typed("typed", {
          "Object": function(signatures) {
            var fns = [];
            for (var signature in signatures) {
              if (signatures.hasOwnProperty(signature)) {
                fns.push(signatures[signature]);
              }
            }
            var name = getName(fns);
            return _typed(name, signatures);
          },
          "string, Object": _typed,
          // TODO: add a signature 'Array.<function>'
          "...Function": function(fns) {
            var err;
            var name = getName(fns);
            var signatures = {};
            for (var i = 0; i < fns.length; i++) {
              var fn = fns[i];
              if (!(typeof fn.signatures === "object")) {
                err = new TypeError("Function is no typed-function (index: " + i + ")");
                err.data = { index: i };
                throw err;
              }
              for (var signature in fn.signatures) {
                if (fn.signatures.hasOwnProperty(signature)) {
                  if (signatures.hasOwnProperty(signature)) {
                    if (fn.signatures[signature] !== signatures[signature]) {
                      err = new Error('Signature "' + signature + '" is defined twice');
                      err.data = { signature };
                      throw err;
                    }
                  } else {
                    signatures[signature] = fn.signatures[signature];
                  }
                }
              }
            }
            return _typed(name, signatures);
          }
        });
        function find(fn, signature) {
          if (!fn.signatures) {
            throw new TypeError("Function is no typed-function");
          }
          var arr;
          if (typeof signature === "string") {
            arr = signature.split(",");
            for (var i = 0; i < arr.length; i++) {
              arr[i] = arr[i].trim();
            }
          } else if (Array.isArray(signature)) {
            arr = signature;
          } else {
            throw new TypeError("String array or a comma separated string expected");
          }
          var str = arr.join(",");
          var match = fn.signatures[str];
          if (match) {
            return match;
          }
          throw new TypeError("Signature not found (signature: " + (fn.name || "unnamed") + "(" + arr.join(", ") + "))");
        }
        function convert(value, type) {
          var from = getTypeOf(value);
          if (type === from) {
            return value;
          }
          for (var i = 0; i < typed.conversions.length; i++) {
            var conversion = typed.conversions[i];
            if (conversion.from === from && conversion.to === type) {
              return conversion.convert(value);
            }
          }
          throw new Error("Cannot convert from " + from + " to " + type);
        }
        typed.config = config;
        typed.types = types;
        typed.conversions = conversions;
        typed.ignore = ignore;
        typed.create = create;
        typed.find = find;
        typed.convert = convert;
        typed.addType = function(type) {
          if (!type || typeof type.name !== "string" || typeof type.test !== "function") {
            throw new TypeError("Object with properties {name: string, test: function} expected");
          }
          typed.types.push(type);
        };
        typed.addConversion = function(conversion) {
          if (!conversion || typeof conversion.from !== "string" || typeof conversion.to !== "string" || typeof conversion.convert !== "function") {
            throw new TypeError("Object with properties {from: string, to: string, convert: function} expected");
          }
          typed.conversions.push(conversion);
        };
        return typed;
      }
      return create();
    });
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/utils/number.js
var require_number = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/utils/number.js"(exports) {
    "use strict";
    exports.isNumber = function(value) {
      return typeof value === "number";
    };
    exports.isInteger = function(value) {
      return isFinite(value) ? value == Math.round(value) : false;
    };
    exports.sign = Math.sign || function(x) {
      if (x > 0) {
        return 1;
      } else if (x < 0) {
        return -1;
      } else {
        return 0;
      }
    };
    exports.format = function(value, options) {
      if (typeof options === "function") {
        return options(value);
      }
      if (value === Infinity) {
        return "Infinity";
      } else if (value === -Infinity) {
        return "-Infinity";
      } else if (isNaN(value)) {
        return "NaN";
      }
      var notation = "auto";
      var precision = void 0;
      if (options) {
        if (options.notation) {
          notation = options.notation;
        }
        if (exports.isNumber(options)) {
          precision = options;
        } else if (options.precision) {
          precision = options.precision;
        }
      }
      switch (notation) {
        case "fixed":
          return exports.toFixed(value, precision);
        case "exponential":
          return exports.toExponential(value, precision);
        case "engineering":
          return exports.toEngineering(value, precision);
        case "auto":
          return exports.toPrecision(value, precision, options && options.exponential).replace(/((\.\d*?)(0+))($|e)/, function() {
            var digits = arguments[2];
            var e = arguments[4];
            return digits !== "." ? digits + e : e;
          });
        default:
          throw new Error('Unknown notation "' + notation + '". Choose "auto", "exponential", or "fixed".');
      }
    };
    exports.splitNumber = function(value) {
      var match = String(value).toLowerCase().match(/^0*?(-?)(\d+\.?\d*)(e([+-]?\d+))?$/);
      if (!match) {
        throw new SyntaxError("Invalid number " + value);
      }
      var sign = match[1];
      var digits = match[2];
      var exponent = parseFloat(match[4] || "0");
      var dot = digits.indexOf(".");
      exponent += dot !== -1 ? dot - 1 : digits.length - 1;
      var coefficients = digits.replace(".", "").replace(/^0*/, function(zeros2) {
        exponent -= zeros2.length;
        return "";
      }).replace(/0*$/, "").split("").map(function(d) {
        return parseInt(d);
      });
      if (coefficients.length === 0) {
        coefficients.push(0);
        exponent++;
      }
      return {
        sign,
        coefficients,
        exponent
      };
    };
    exports.toEngineering = function(value, precision) {
      if (isNaN(value) || !isFinite(value)) {
        return String(value);
      }
      var rounded = exports.roundDigits(exports.splitNumber(value), precision);
      var e = rounded.exponent;
      var c = rounded.coefficients;
      var newExp = e % 3 === 0 ? e : e < 0 ? e - 3 - e % 3 : e - e % 3;
      var significandsDiff = e >= 0 ? e : Math.abs(newExp);
      if (c.length - 1 < significandsDiff) c = c.concat(zeros(significandsDiff - (c.length - 1)));
      var expDiff = Math.abs(e - newExp);
      var decimalIdx = 1;
      while (--expDiff >= 0) decimalIdx++;
      var decimals = c.slice(decimalIdx).join("");
      var decimalVal = decimals.match(/[1-9]/) ? "." + decimals : "";
      var str = c.slice(0, decimalIdx).join("") + decimalVal + "e" + (e >= 0 ? "+" : "") + newExp.toString();
      return rounded.sign + str;
    };
    exports.toFixed = function(value, precision) {
      if (isNaN(value) || !isFinite(value)) {
        return String(value);
      }
      var splitValue = exports.splitNumber(value);
      var rounded = exports.roundDigits(splitValue, splitValue.exponent + 1 + (precision || 0));
      var c = rounded.coefficients;
      var p = rounded.exponent + 1;
      var pp = p + (precision || 0);
      if (c.length < pp) {
        c = c.concat(zeros(pp - c.length));
      }
      if (p < 0) {
        c = zeros(-p + 1).concat(c);
        p = 1;
      }
      if (precision) {
        c.splice(p, 0, p === 0 ? "0." : ".");
      }
      return rounded.sign + c.join("");
    };
    exports.toExponential = function(value, precision) {
      if (isNaN(value) || !isFinite(value)) {
        return String(value);
      }
      var split = exports.splitNumber(value);
      var rounded = precision ? exports.roundDigits(split, precision) : split;
      var c = rounded.coefficients;
      var e = rounded.exponent;
      if (c.length < precision) {
        c = c.concat(zeros(precision - c.length));
      }
      var first = c.shift();
      return rounded.sign + first + (c.length > 0 ? "." + c.join("") : "") + "e" + (e >= 0 ? "+" : "") + e;
    };
    exports.toPrecision = function(value, precision, options) {
      if (isNaN(value) || !isFinite(value)) {
        return String(value);
      }
      var lower = options && options.lower !== void 0 ? options.lower : 1e-3;
      var upper = options && options.upper !== void 0 ? options.upper : 1e5;
      var split = exports.splitNumber(value);
      var abs = Math.abs(Math.pow(10, split.exponent));
      if (abs < lower || abs >= upper) {
        return exports.toExponential(value, precision);
      } else {
        var rounded = precision ? exports.roundDigits(split, precision) : split;
        var c = rounded.coefficients;
        var e = rounded.exponent;
        if (c.length < precision) {
          c = c.concat(zeros(precision - c.length));
        }
        c = c.concat(zeros(e - c.length + 1 + (c.length < precision ? precision - c.length : 0)));
        c = zeros(-e).concat(c);
        var dot = e > 0 ? e : 0;
        if (dot < c.length - 1) {
          c.splice(dot + 1, 0, ".");
        }
        return rounded.sign + c.join("");
      }
    };
    exports.roundDigits = function(split, precision) {
      var rounded = {
        sign: split.sign,
        coefficients: split.coefficients,
        exponent: split.exponent
      };
      var c = rounded.coefficients;
      while (precision <= 0) {
        c.unshift(0);
        rounded.exponent++;
        precision++;
      }
      if (c.length > precision) {
        var removed = c.splice(precision, c.length - precision);
        if (removed[0] >= 5) {
          var i = precision - 1;
          c[i]++;
          while (c[i] === 10) {
            c.pop();
            if (i === 0) {
              c.unshift(0);
              rounded.exponent++;
              i++;
            }
            i--;
            c[i]++;
          }
        }
      }
      return rounded;
    };
    function zeros(length) {
      var arr = [];
      for (var i = 0; i < length; i++) {
        arr.push(0);
      }
      return arr;
    }
    exports.digits = function(value) {
      return value.toExponential().replace(/e.*$/, "").replace(/^0\.?0*|\./, "").length;
    };
    exports.DBL_EPSILON = Number.EPSILON || 2220446049250313e-31;
    exports.nearlyEqual = function(x, y, epsilon) {
      if (epsilon == null) {
        return x == y;
      }
      if (x == y) {
        return true;
      }
      if (isNaN(x) || isNaN(y)) {
        return false;
      }
      if (isFinite(x) && isFinite(y)) {
        var diff = Math.abs(x - y);
        if (diff < exports.DBL_EPSILON) {
          return true;
        } else {
          return diff <= Math.max(Math.abs(x), Math.abs(y)) * epsilon;
        }
      }
      return false;
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/core/typed.js
var require_typed = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/core/typed.js"(exports) {
    var typedFunction = require_typed_function();
    var digits = require_number().digits;
    var createTyped = function() {
      createTyped = typedFunction.create;
      return typedFunction;
    };
    exports.create = function create(type) {
      var typed = createTyped();
      typed.types = [
        { name: "number", test: function(x) {
          return typeof x === "number";
        } },
        { name: "Complex", test: function(x) {
          return x && x.isComplex;
        } },
        { name: "BigNumber", test: function(x) {
          return x && x.isBigNumber;
        } },
        { name: "Fraction", test: function(x) {
          return x && x.isFraction;
        } },
        { name: "Unit", test: function(x) {
          return x && x.isUnit;
        } },
        { name: "string", test: function(x) {
          return typeof x === "string";
        } },
        { name: "Array", test: Array.isArray },
        { name: "Matrix", test: function(x) {
          return x && x.isMatrix;
        } },
        { name: "DenseMatrix", test: function(x) {
          return x && x.isDenseMatrix;
        } },
        { name: "SparseMatrix", test: function(x) {
          return x && x.isSparseMatrix;
        } },
        { name: "Range", test: function(x) {
          return x && x.isRange;
        } },
        { name: "Index", test: function(x) {
          return x && x.isIndex;
        } },
        { name: "boolean", test: function(x) {
          return typeof x === "boolean";
        } },
        { name: "ResultSet", test: function(x) {
          return x && x.isResultSet;
        } },
        { name: "Help", test: function(x) {
          return x && x.isHelp;
        } },
        { name: "function", test: function(x) {
          return typeof x === "function";
        } },
        { name: "Date", test: function(x) {
          return x instanceof Date;
        } },
        { name: "RegExp", test: function(x) {
          return x instanceof RegExp;
        } },
        { name: "Object", test: function(x) {
          return typeof x === "object";
        } },
        { name: "null", test: function(x) {
          return x === null;
        } },
        { name: "undefined", test: function(x) {
          return x === void 0;
        } },
        { name: "OperatorNode", test: function(x) {
          return x && x.isOperatorNode;
        } },
        { name: "ConstantNode", test: function(x) {
          return x && x.isConstantNode;
        } },
        { name: "SymbolNode", test: function(x) {
          return x && x.isSymbolNode;
        } },
        { name: "ParenthesisNode", test: function(x) {
          return x && x.isParenthesisNode;
        } },
        { name: "FunctionNode", test: function(x) {
          return x && x.isFunctionNode;
        } },
        { name: "FunctionAssignmentNode", test: function(x) {
          return x && x.isFunctionAssignmentNode;
        } },
        { name: "ArrayNode", test: function(x) {
          return x && x.isArrayNode;
        } },
        { name: "AssignmentNode", test: function(x) {
          return x && x.isAssignmentNode;
        } },
        { name: "BlockNode", test: function(x) {
          return x && x.isBlockNode;
        } },
        { name: "ConditionalNode", test: function(x) {
          return x && x.isConditionalNode;
        } },
        { name: "IndexNode", test: function(x) {
          return x && x.isIndexNode;
        } },
        { name: "RangeNode", test: function(x) {
          return x && x.isRangeNode;
        } },
        { name: "UpdateNode", test: function(x) {
          return x && x.isUpdateNode;
        } },
        { name: "Node", test: function(x) {
          return x && x.isNode;
        } }
      ];
      typed.conversions = [
        {
          from: "number",
          to: "BigNumber",
          convert: function(x) {
            if (digits(x) > 15) {
              throw new TypeError("Cannot implicitly convert a number with >15 significant digits to BigNumber (value: " + x + "). Use function bignumber(x) to convert to BigNumber.");
            }
            return new type.BigNumber(x);
          }
        },
        {
          from: "number",
          to: "Complex",
          convert: function(x) {
            return new type.Complex(x, 0);
          }
        },
        {
          from: "number",
          to: "string",
          convert: function(x) {
            return x + "";
          }
        },
        {
          from: "BigNumber",
          to: "Complex",
          convert: function(x) {
            return new type.Complex(x.toNumber(), 0);
          }
        },
        {
          from: "Fraction",
          to: "BigNumber",
          convert: function(x) {
            throw new TypeError("Cannot implicitly convert a Fraction to BigNumber or vice versa. Use function bignumber(x) to convert to BigNumber or fraction(x) to convert to Fraction.");
          }
        },
        {
          from: "Fraction",
          to: "Complex",
          convert: function(x) {
            return new type.Complex(x.valueOf(), 0);
          }
        },
        {
          from: "number",
          to: "Fraction",
          convert: function(x) {
            if (digits(x) > 15) {
              throw new TypeError("Cannot implicitly convert a number with >15 significant digits to Fraction (value: " + x + "). Use function fraction(x) to convert to Fraction.");
            }
            return new type.Fraction(x);
          }
        },
        {
          // FIXME: add conversion from Fraction to number, for example for `sqrt(fraction(1,3))`
          //  from: 'Fraction',
          //  to: 'number',
          //  convert: function (x) {
          //    return x.valueOf();
          //  }
          //}, {
          from: "string",
          to: "number",
          convert: function(x) {
            var n = Number(x);
            if (isNaN(n)) {
              throw new Error('Cannot convert "' + x + '" to a number');
            }
            return n;
          }
        },
        {
          from: "string",
          to: "BigNumber",
          convert: function(x) {
            try {
              return new type.BigNumber(x);
            } catch (err) {
              throw new Error('Cannot convert "' + x + '" to BigNumber');
            }
          }
        },
        {
          from: "string",
          to: "Fraction",
          convert: function(x) {
            try {
              return new type.Fraction(x);
            } catch (err) {
              throw new Error('Cannot convert "' + x + '" to Fraction');
            }
          }
        },
        {
          from: "string",
          to: "Complex",
          convert: function(x) {
            try {
              return new type.Complex(x);
            } catch (err) {
              throw new Error('Cannot convert "' + x + '" to Complex');
            }
          }
        },
        {
          from: "boolean",
          to: "number",
          convert: function(x) {
            return +x;
          }
        },
        {
          from: "boolean",
          to: "BigNumber",
          convert: function(x) {
            return new type.BigNumber(+x);
          }
        },
        {
          from: "boolean",
          to: "Fraction",
          convert: function(x) {
            return new type.Fraction(+x);
          }
        },
        {
          from: "boolean",
          to: "string",
          convert: function(x) {
            return +x;
          }
        },
        {
          from: "null",
          to: "number",
          convert: function() {
            return 0;
          }
        },
        {
          from: "null",
          to: "string",
          convert: function() {
            return "null";
          }
        },
        {
          from: "null",
          to: "BigNumber",
          convert: function() {
            return new type.BigNumber(0);
          }
        },
        {
          from: "null",
          to: "Fraction",
          convert: function() {
            return new type.Fraction(0);
          }
        },
        {
          from: "Array",
          to: "Matrix",
          convert: function(array) {
            return new type.DenseMatrix(array);
          }
        },
        {
          from: "Matrix",
          to: "Array",
          convert: function(matrix) {
            return matrix.valueOf();
          }
        }
      ];
      return typed;
    };
  }
});

// node_modules/mathsteps/node_modules/tiny-emitter/index.js
var require_tiny_emitter = __commonJS({
  "node_modules/mathsteps/node_modules/tiny-emitter/index.js"(exports, module) {
    function E() {
    }
    E.prototype = {
      on: function(name, callback, ctx) {
        var e = this.e || (this.e = {});
        (e[name] || (e[name] = [])).push({
          fn: callback,
          ctx
        });
        return this;
      },
      once: function(name, callback, ctx) {
        var self2 = this;
        function listener() {
          self2.off(name, listener);
          callback.apply(ctx, arguments);
        }
        ;
        listener._ = callback;
        return this.on(name, listener, ctx);
      },
      emit: function(name) {
        var data = [].slice.call(arguments, 1);
        var evtArr = ((this.e || (this.e = {}))[name] || []).slice();
        var i = 0;
        var len = evtArr.length;
        for (i; i < len; i++) {
          evtArr[i].fn.apply(evtArr[i].ctx, data);
        }
        return this;
      },
      off: function(name, callback) {
        var e = this.e || (this.e = {});
        var evts = e[name];
        var liveEvents = [];
        if (evts && callback) {
          for (var i = 0, len = evts.length; i < len; i++) {
            if (evts[i].fn !== callback && evts[i].fn._ !== callback)
              liveEvents.push(evts[i]);
          }
        }
        liveEvents.length ? e[name] = liveEvents : delete e[name];
        return this;
      }
    };
    module.exports = E;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/utils/emitter.js
var require_emitter = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/utils/emitter.js"(exports) {
    var Emitter = require_tiny_emitter();
    exports.mixin = function(obj) {
      var emitter = new Emitter();
      obj.on = emitter.on.bind(emitter);
      obj.off = emitter.off.bind(emitter);
      obj.once = emitter.once.bind(emitter);
      obj.emit = emitter.emit.bind(emitter);
      return obj;
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/error/ArgumentsError.js
var require_ArgumentsError = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/error/ArgumentsError.js"(exports, module) {
    "use strict";
    function ArgumentsError(fn, count, min, max) {
      if (!(this instanceof ArgumentsError)) {
        throw new SyntaxError("Constructor must be called with the new operator");
      }
      this.fn = fn;
      this.count = count;
      this.min = min;
      this.max = max;
      this.message = "Wrong number of arguments in function " + fn + " (" + count + " provided, " + min + (max != void 0 ? "-" + max : "") + " expected)";
      this.stack = new Error().stack;
    }
    ArgumentsError.prototype = new Error();
    ArgumentsError.prototype.constructor = Error;
    ArgumentsError.prototype.name = "ArgumentsError";
    ArgumentsError.prototype.isArgumentsError = true;
    module.exports = ArgumentsError;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/core/function/import.js
var require_import = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/core/function/import.js"(exports) {
    "use strict";
    var lazy = require_object().lazy;
    var isFactory = require_object().isFactory;
    var traverse = require_object().traverse;
    var extend = require_object().extend;
    var ArgumentsError = require_ArgumentsError();
    function factory(type, config, load, typed, math) {
      function math_import(object, options) {
        var num = arguments.length;
        if (num != 1 && num != 2) {
          throw new ArgumentsError("import", num, 1, 2);
        }
        if (!options) {
          options = {};
        }
        if (isFactory(object)) {
          _importFactory(object, options);
        } else if (Array.isArray(object)) {
          object.forEach(function(entry) {
            math_import(entry, options);
          });
        } else if (typeof object === "object") {
          for (var name in object) {
            if (object.hasOwnProperty(name)) {
              var value = object[name];
              if (isSupportedType(value)) {
                _import(name, value, options);
              } else if (isFactory(object)) {
                _importFactory(object, options);
              } else {
                math_import(value, options);
              }
            }
          }
        } else {
          if (!options.silent) {
            throw new TypeError("Factory, Object, or Array expected");
          }
        }
      }
      function _import(name, value, options) {
        if (options.wrap && typeof value === "function") {
          value = _wrap(value);
        }
        if (isTypedFunction(math[name]) && isTypedFunction(value)) {
          if (options.override) {
            value = typed(name, value.signatures);
          } else {
            value = typed(math[name], value);
          }
          math[name] = value;
          _importTransform(name, value);
          math.emit("import", name, function resolver() {
            return value;
          });
          return;
        }
        if (math[name] === void 0 || options.override) {
          math[name] = value;
          _importTransform(name, value);
          math.emit("import", name, function resolver() {
            return value;
          });
          return;
        }
        if (!options.silent) {
          throw new Error('Cannot import "' + name + '": already exists');
        }
      }
      function _importTransform(name, value) {
        if (value && typeof value.transform === "function") {
          math.expression.transform[name] = value.transform;
        } else {
          delete math.expression.transform[name];
        }
      }
      function _wrap(fn) {
        var wrapper = function wrapper2() {
          var args = [];
          for (var i = 0, len = arguments.length; i < len; i++) {
            var arg = arguments[i];
            args[i] = arg && arg.valueOf();
          }
          return fn.apply(math, args);
        };
        if (fn.transform) {
          wrapper.transform = fn.transform;
        }
        return wrapper;
      }
      function _importFactory(factory2, options) {
        if (typeof factory2.name === "string") {
          var name = factory2.name;
          var namespace = factory2.path ? traverse(math, factory2.path) : math;
          var existing = namespace.hasOwnProperty(name) ? namespace[name] : void 0;
          var resolver = function() {
            var instance = load(factory2);
            if (instance && typeof instance.transform === "function") {
              throw new Error('Transforms cannot be attached to factory functions. Please create a separate function for it with exports.path="expression.transform"');
            }
            if (isTypedFunction(existing) && isTypedFunction(instance)) {
              if (options.override) {
              } else {
                instance = typed(existing, instance);
              }
              return instance;
            }
            if (existing === void 0 || options.override) {
              return instance;
            }
            if (!options.silent) {
              throw new Error('Cannot import "' + name + '": already exists');
            }
          };
          if (factory2.lazy !== false) {
            lazy(namespace, name, resolver);
          } else {
            namespace[name] = resolver();
          }
          math.emit("import", name, resolver, factory2.path);
        } else {
          load(factory2);
        }
      }
      function isSupportedType(object) {
        return typeof object == "function" || typeof object === "number" || typeof object === "string" || typeof object === "boolean" || object === null || object && object.isUnit === true || object && object.isComplex === true || object && object.isBigNumber === true || object && object.isFraction === true || object && object.isMatrix === true || object && Array.isArray(object) === true;
      }
      function isTypedFunction(fn) {
        return typeof fn === "function" && typeof fn.signatures === "object";
      }
      return math_import;
    }
    exports.math = true;
    exports.name = "import";
    exports.factory = factory;
    exports.lazy = true;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/core/function/config.js
var require_config = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/core/function/config.js"(exports) {
    "use strict";
    var object = require_object();
    function factory(type, config, load, typed, math) {
      var MATRIX = ["Matrix", "Array"];
      var NUMBER = ["number", "BigNumber", "Fraction"];
      function _config(options) {
        if (options) {
          var prev = object.clone(config);
          validateOption(options, "matrix", MATRIX);
          validateOption(options, "number", NUMBER);
          object.deepExtend(config, options);
          var curr = object.clone(config);
          var changes = object.clone(options);
          math.emit("config", curr, prev, changes);
          return curr;
        } else {
          return object.clone(config);
        }
      }
      _config.MATRIX = MATRIX;
      _config.NUMBER = NUMBER;
      return _config;
    }
    function contains(array, item) {
      return array.indexOf(item) !== -1;
    }
    function findIndex(array, item) {
      return array.map(function(i) {
        return i.toLowerCase();
      }).indexOf(item.toLowerCase());
    }
    function validateOption(options, name, values) {
      if (options[name] !== void 0 && !contains(values, options[name])) {
        var index = findIndex(values, options[name]);
        if (index !== -1) {
          console.warn('Warning: Wrong casing for configuration option "' + name + '", should be "' + values[index] + '" instead of "' + options[name] + '".');
          options[name] = values[index];
        } else {
          console.warn('Warning: Unknown value "' + options[name] + '" for configuration option "' + name + '". Available options: ' + values.map(JSON.stringify).join(", ") + ".");
        }
      }
    }
    exports.name = "config";
    exports.math = true;
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/core/core.js
var require_core = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/core/core.js"(exports) {
    var isFactory = require_object().isFactory;
    var deepExtend = require_object().deepExtend;
    var typedFactory = require_typed();
    var emitter = require_emitter();
    var importFactory = require_import();
    var configFactory = require_config();
    exports.create = function create(options) {
      if (typeof Object.create !== "function") {
        throw new Error("ES5 not supported by this JavaScript engine. Please load the es5-shim and es5-sham library for compatibility.");
      }
      var factories = [];
      var instances = [];
      var math = emitter.mixin({});
      math.type = {};
      math.expression = {
        transform: Object.create(math)
      };
      math.algebra = {};
      math.typed = typedFactory.create(math.type);
      var _config = {
        // minimum relative difference between two compared values,
        // used by all comparison functions
        epsilon: 1e-12,
        // type of default matrix output. Choose 'matrix' (default) or 'array'
        matrix: "Matrix",
        // type of default number output. Choose 'number' (default) 'BigNumber', or 'Fraction
        number: "number",
        // number of significant digits in BigNumbers
        precision: 64,
        // predictable output type of functions. When true, output type depends only
        // on the input types. When false (default), output type can vary depending
        // on input values. For example `math.sqrt(-4)` returns `complex('2i')` when
        // predictable is false, and returns `NaN` when true.
        predictable: false,
        // random seed for seeded pseudo random number generation
        // null = randomly seed
        randomSeed: null
      };
      function load(factory) {
        if (!isFactory(factory)) {
          throw new Error("Factory object with properties `type`, `name`, and `factory` expected");
        }
        var index = factories.indexOf(factory);
        var instance;
        if (index === -1) {
          if (factory.math === true) {
            instance = factory.factory(math.type, _config, load, math.typed, math);
          } else {
            instance = factory.factory(math.type, _config, load, math.typed);
          }
          factories.push(factory);
          instances.push(instance);
        } else {
          instance = instances[index];
        }
        return instance;
      }
      math["import"] = load(importFactory);
      math["config"] = load(configFactory);
      if (options) {
        math.config(options);
      }
      return math;
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/core.js
var require_core2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/core.js"(exports, module) {
    module.exports = require_core();
  }
});

// node_modules/mathsteps/node_modules/decimal.js/decimal.js
var require_decimal = __commonJS({
  "node_modules/mathsteps/node_modules/decimal.js/decimal.js"(exports, module) {
    (function(globalScope) {
      "use strict";
      var EXP_LIMIT = 9e15, MAX_DIGITS = 1e9, NUMERALS = "0123456789abcdef", LN10 = "2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058", PI = "3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789", Decimal = {
        // These values must be integers within the stated ranges (inclusive).
        // Most of these values can be changed at run-time using the `Decimal.config` method.
        // The maximum number of significant digits of the result of a calculation or base conversion.
        // E.g. `Decimal.config({ precision: 20 });`
        precision: 20,
        // 1 to MAX_DIGITS
        // The rounding mode used when rounding to `precision`.
        //
        // ROUND_UP         0 Away from zero.
        // ROUND_DOWN       1 Towards zero.
        // ROUND_CEIL       2 Towards +Infinity.
        // ROUND_FLOOR      3 Towards -Infinity.
        // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.
        // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
        // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
        // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
        // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
        //
        // E.g.
        // `Decimal.rounding = 4;`
        // `Decimal.rounding = Decimal.ROUND_HALF_UP;`
        rounding: 4,
        // 0 to 8
        // The modulo mode used when calculating the modulus: a mod n.
        // The quotient (q = a / n) is calculated according to the corresponding rounding mode.
        // The remainder (r) is calculated as: r = a - n * q.
        //
        // UP         0 The remainder is positive if the dividend is negative, else is negative.
        // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).
        // FLOOR      3 The remainder has the same sign as the divisor (Python %).
        // HALF_EVEN  6 The IEEE 754 remainder function.
        // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.
        //
        // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian
        // division (9) are commonly used for the modulus operation. The other rounding modes can also
        // be used, but they may not give useful results.
        modulo: 1,
        // 0 to 9
        // The exponent value at and beneath which `toString` returns exponential notation.
        // JavaScript numbers: -7
        toExpNeg: -7,
        // 0 to -EXP_LIMIT
        // The exponent value at and above which `toString` returns exponential notation.
        // JavaScript numbers: 21
        toExpPos: 21,
        // 0 to EXP_LIMIT
        // The minimum exponent value, beneath which underflow to zero occurs.
        // JavaScript numbers: -324  (5e-324)
        minE: -EXP_LIMIT,
        // -1 to -EXP_LIMIT
        // The maximum exponent value, above which overflow to Infinity occurs.
        // JavaScript numbers: 308  (1.7976931348623157e+308)
        maxE: EXP_LIMIT,
        // 1 to EXP_LIMIT
        // Whether to use cryptographically-secure random number generation, if available.
        crypto: false
        // true/false
      }, inexact, noConflict, quadrant, external = true, decimalError = "[DecimalError] ", invalidArgument = decimalError + "Invalid argument: ", precisionLimitExceeded = decimalError + "Precision limit exceeded", cryptoUnavailable = decimalError + "crypto unavailable", mathfloor = Math.floor, mathpow = Math.pow, isBinary = /^0b([01]+(\.[01]*)?|\.[01]+)(p[+-]?\d+)?$/i, isHex = /^0x([0-9a-f]+(\.[0-9a-f]*)?|\.[0-9a-f]+)(p[+-]?\d+)?$/i, isOctal = /^0o([0-7]+(\.[0-7]*)?|\.[0-7]+)(p[+-]?\d+)?$/i, isDecimal = /^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i, BASE = 1e7, LOG_BASE = 7, MAX_SAFE_INTEGER = 9007199254740991, LN10_PRECISION = LN10.length - 1, PI_PRECISION = PI.length - 1, P = {};
      P.absoluteValue = P.abs = function() {
        var x = new this.constructor(this);
        if (x.s < 0) x.s = 1;
        return finalise(x);
      };
      P.ceil = function() {
        return finalise(new this.constructor(this), this.e + 1, 2);
      };
      P.comparedTo = P.cmp = function(y) {
        var i, j, xdL, ydL, x = this, xd = x.d, yd = (y = new x.constructor(y)).d, xs = x.s, ys = y.s;
        if (!xd || !yd) {
          return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;
        }
        if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0;
        if (xs !== ys) return xs;
        if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;
        xdL = xd.length;
        ydL = yd.length;
        for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {
          if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;
        }
        return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;
      };
      P.cosine = P.cos = function() {
        var pr, rm, x = this, Ctor = x.constructor;
        if (!x.d) return new Ctor(NaN);
        if (!x.d[0]) return new Ctor(1);
        pr = Ctor.precision;
        rm = Ctor.rounding;
        Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;
        Ctor.rounding = 1;
        x = cosine(Ctor, toLessThanHalfPi(Ctor, x));
        Ctor.precision = pr;
        Ctor.rounding = rm;
        return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);
      };
      P.cubeRoot = P.cbrt = function() {
        var e, m, n, r, rep, s, sd, t, t3, t3plusx, x = this, Ctor = x.constructor;
        if (!x.isFinite() || x.isZero()) return new Ctor(x);
        external = false;
        s = x.s * Math.pow(x.s * x, 1 / 3);
        if (!s || Math.abs(s) == 1 / 0) {
          n = digitsToString(x.d);
          e = x.e;
          if (s = (e - n.length + 1) % 3) n += s == 1 || s == -2 ? "0" : "00";
          s = Math.pow(n, 1 / 3);
          e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));
          if (s == 1 / 0) {
            n = "5e" + e;
          } else {
            n = s.toExponential();
            n = n.slice(0, n.indexOf("e") + 1) + e;
          }
          r = new Ctor(n);
          r.s = x.s;
        } else {
          r = new Ctor(s.toString());
        }
        sd = (e = Ctor.precision) + 3;
        for (; ; ) {
          t = r;
          t3 = t.times(t).times(t);
          t3plusx = t3.plus(x);
          r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);
          if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {
            n = n.slice(sd - 3, sd + 1);
            if (n == "9999" || !rep && n == "4999") {
              if (!rep) {
                finalise(t, e + 1, 0);
                if (t.times(t).times(t).eq(x)) {
                  r = t;
                  break;
                }
              }
              sd += 4;
              rep = 1;
            } else {
              if (!+n || !+n.slice(1) && n.charAt(0) == "5") {
                finalise(r, e + 1, 1);
                m = !r.times(r).times(r).eq(x);
              }
              break;
            }
          }
        }
        external = true;
        return finalise(r, e, Ctor.rounding, m);
      };
      P.decimalPlaces = P.dp = function() {
        var w, d = this.d, n = NaN;
        if (d) {
          w = d.length - 1;
          n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;
          w = d[w];
          if (w) for (; w % 10 == 0; w /= 10) n--;
          if (n < 0) n = 0;
        }
        return n;
      };
      P.dividedBy = P.div = function(y) {
        return divide(this, new this.constructor(y));
      };
      P.dividedToIntegerBy = P.divToInt = function(y) {
        var x = this, Ctor = x.constructor;
        return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);
      };
      P.equals = P.eq = function(y) {
        return this.cmp(y) === 0;
      };
      P.floor = function() {
        return finalise(new this.constructor(this), this.e + 1, 3);
      };
      P.greaterThan = P.gt = function(y) {
        return this.cmp(y) > 0;
      };
      P.greaterThanOrEqualTo = P.gte = function(y) {
        var k = this.cmp(y);
        return k == 1 || k === 0;
      };
      P.hyperbolicCosine = P.cosh = function() {
        var k, n, pr, rm, len, x = this, Ctor = x.constructor, one = new Ctor(1);
        if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);
        if (x.isZero()) return one;
        pr = Ctor.precision;
        rm = Ctor.rounding;
        Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;
        Ctor.rounding = 1;
        len = x.d.length;
        if (len < 32) {
          k = Math.ceil(len / 3);
          n = Math.pow(4, -k).toString();
        } else {
          k = 16;
          n = "2.3283064365386962890625e-10";
        }
        x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);
        var cosh2_x, i = k, d8 = new Ctor(8);
        for (; i--; ) {
          cosh2_x = x.times(x);
          x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));
        }
        return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);
      };
      P.hyperbolicSine = P.sinh = function() {
        var k, pr, rm, len, x = this, Ctor = x.constructor;
        if (!x.isFinite() || x.isZero()) return new Ctor(x);
        pr = Ctor.precision;
        rm = Ctor.rounding;
        Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;
        Ctor.rounding = 1;
        len = x.d.length;
        if (len < 3) {
          x = taylorSeries(Ctor, 2, x, x, true);
        } else {
          k = 1.4 * Math.sqrt(len);
          k = k > 16 ? 16 : k | 0;
          x = x.times(Math.pow(5, -k));
          x = taylorSeries(Ctor, 2, x, x, true);
          var sinh2_x, d5 = new Ctor(5), d16 = new Ctor(16), d20 = new Ctor(20);
          for (; k--; ) {
            sinh2_x = x.times(x);
            x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));
          }
        }
        Ctor.precision = pr;
        Ctor.rounding = rm;
        return finalise(x, pr, rm, true);
      };
      P.hyperbolicTangent = P.tanh = function() {
        var pr, rm, x = this, Ctor = x.constructor;
        if (!x.isFinite()) return new Ctor(x.s);
        if (x.isZero()) return new Ctor(x);
        pr = Ctor.precision;
        rm = Ctor.rounding;
        Ctor.precision = pr + 7;
        Ctor.rounding = 1;
        return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);
      };
      P.inverseCosine = P.acos = function() {
        var halfPi, x = this, Ctor = x.constructor, k = x.abs().cmp(1), pr = Ctor.precision, rm = Ctor.rounding;
        if (k !== -1) {
          return k === 0 ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0) : new Ctor(NaN);
        }
        if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5);
        Ctor.precision = pr + 6;
        Ctor.rounding = 1;
        x = x.asin();
        halfPi = getPi(Ctor, pr + 4, rm).times(0.5);
        Ctor.precision = pr;
        Ctor.rounding = rm;
        return halfPi.minus(x);
      };
      P.inverseHyperbolicCosine = P.acosh = function() {
        var pr, rm, x = this, Ctor = x.constructor;
        if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);
        if (!x.isFinite()) return new Ctor(x);
        pr = Ctor.precision;
        rm = Ctor.rounding;
        Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;
        Ctor.rounding = 1;
        external = false;
        x = x.times(x).minus(1).sqrt().plus(x);
        external = true;
        Ctor.precision = pr;
        Ctor.rounding = rm;
        return x.ln();
      };
      P.inverseHyperbolicSine = P.asinh = function() {
        var pr, rm, x = this, Ctor = x.constructor;
        if (!x.isFinite() || x.isZero()) return new Ctor(x);
        pr = Ctor.precision;
        rm = Ctor.rounding;
        Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;
        Ctor.rounding = 1;
        external = false;
        x = x.times(x).plus(1).sqrt().plus(x);
        external = true;
        Ctor.precision = pr;
        Ctor.rounding = rm;
        return x.ln();
      };
      P.inverseHyperbolicTangent = P.atanh = function() {
        var pr, rm, wpr, xsd, x = this, Ctor = x.constructor;
        if (!x.isFinite()) return new Ctor(NaN);
        if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);
        pr = Ctor.precision;
        rm = Ctor.rounding;
        xsd = x.sd();
        if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);
        Ctor.precision = wpr = xsd - x.e;
        x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);
        Ctor.precision = pr + 4;
        Ctor.rounding = 1;
        x = x.ln();
        Ctor.precision = pr;
        Ctor.rounding = rm;
        return x.times(0.5);
      };
      P.inverseSine = P.asin = function() {
        var halfPi, k, pr, rm, x = this, Ctor = x.constructor;
        if (x.isZero()) return new Ctor(x);
        k = x.abs().cmp(1);
        pr = Ctor.precision;
        rm = Ctor.rounding;
        if (k !== -1) {
          if (k === 0) {
            halfPi = getPi(Ctor, pr + 4, rm).times(0.5);
            halfPi.s = x.s;
            return halfPi;
          }
          return new Ctor(NaN);
        }
        Ctor.precision = pr + 6;
        Ctor.rounding = 1;
        x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();
        Ctor.precision = pr;
        Ctor.rounding = rm;
        return x.times(2);
      };
      P.inverseTangent = P.atan = function() {
        var i, j, k, n, px, t, r, wpr, x2, x = this, Ctor = x.constructor, pr = Ctor.precision, rm = Ctor.rounding;
        if (!x.isFinite()) {
          if (!x.s) return new Ctor(NaN);
          if (pr + 4 <= PI_PRECISION) {
            r = getPi(Ctor, pr + 4, rm).times(0.5);
            r.s = x.s;
            return r;
          }
        } else if (x.isZero()) {
          return new Ctor(x);
        } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {
          r = getPi(Ctor, pr + 4, rm).times(0.25);
          r.s = x.s;
          return r;
        }
        Ctor.precision = wpr = pr + 10;
        Ctor.rounding = 1;
        k = Math.min(28, wpr / LOG_BASE + 2 | 0);
        for (i = k; i; --i) x = x.div(x.times(x).plus(1).sqrt().plus(1));
        external = false;
        j = Math.ceil(wpr / LOG_BASE);
        n = 1;
        x2 = x.times(x);
        r = new Ctor(x);
        px = x;
        for (; i !== -1; ) {
          px = px.times(x2);
          t = r.minus(px.div(n += 2));
          px = px.times(x2);
          r = t.plus(px.div(n += 2));
          if (r.d[j] !== void 0) for (i = j; r.d[i] === t.d[i] && i--; ) ;
        }
        if (k) r = r.times(2 << k - 1);
        external = true;
        return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);
      };
      P.isFinite = function() {
        return !!this.d;
      };
      P.isInteger = P.isInt = function() {
        return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;
      };
      P.isNaN = function() {
        return !this.s;
      };
      P.isNegative = P.isNeg = function() {
        return this.s < 0;
      };
      P.isPositive = P.isPos = function() {
        return this.s > 0;
      };
      P.isZero = function() {
        return !!this.d && this.d[0] === 0;
      };
      P.lessThan = P.lt = function(y) {
        return this.cmp(y) < 0;
      };
      P.lessThanOrEqualTo = P.lte = function(y) {
        return this.cmp(y) < 1;
      };
      P.logarithm = P.log = function(base) {
        var isBase10, d, denominator, k, inf, num, sd, r, arg = this, Ctor = arg.constructor, pr = Ctor.precision, rm = Ctor.rounding, guard = 5;
        if (base == null) {
          base = new Ctor(10);
          isBase10 = true;
        } else {
          base = new Ctor(base);
          d = base.d;
          if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);
          isBase10 = base.eq(10);
        }
        d = arg.d;
        if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {
          return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);
        }
        if (isBase10) {
          if (d.length > 1) {
            inf = true;
          } else {
            for (k = d[0]; k % 10 === 0; ) k /= 10;
            inf = k !== 1;
          }
        }
        external = false;
        sd = pr + guard;
        num = naturalLogarithm(arg, sd);
        denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);
        r = divide(num, denominator, sd, 1);
        if (checkRoundingDigits(r.d, k = pr, rm)) {
          do {
            sd += 10;
            num = naturalLogarithm(arg, sd);
            denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);
            r = divide(num, denominator, sd, 1);
            if (!inf) {
              if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {
                r = finalise(r, pr + 1, 0);
              }
              break;
            }
          } while (checkRoundingDigits(r.d, k += 10, rm));
        }
        external = true;
        return finalise(r, pr, rm);
      };
      P.minus = P.sub = function(y) {
        var d, e, i, j, k, len, pr, rm, xd, xe, xLTy, yd, x = this, Ctor = x.constructor;
        y = new Ctor(y);
        if (!x.d || !y.d) {
          if (!x.s || !y.s) y = new Ctor(NaN);
          else if (x.d) y.s = -y.s;
          else y = new Ctor(y.d || x.s !== y.s ? x : NaN);
          return y;
        }
        if (x.s != y.s) {
          y.s = -y.s;
          return x.plus(y);
        }
        xd = x.d;
        yd = y.d;
        pr = Ctor.precision;
        rm = Ctor.rounding;
        if (!xd[0] || !yd[0]) {
          if (yd[0]) y.s = -y.s;
          else if (xd[0]) y = new Ctor(x);
          else return new Ctor(rm === 3 ? -0 : 0);
          return external ? finalise(y, pr, rm) : y;
        }
        e = mathfloor(y.e / LOG_BASE);
        xe = mathfloor(x.e / LOG_BASE);
        xd = xd.slice();
        k = xe - e;
        if (k) {
          xLTy = k < 0;
          if (xLTy) {
            d = xd;
            k = -k;
            len = yd.length;
          } else {
            d = yd;
            e = xe;
            len = xd.length;
          }
          i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;
          if (k > i) {
            k = i;
            d.length = 1;
          }
          d.reverse();
          for (i = k; i--; ) d.push(0);
          d.reverse();
        } else {
          i = xd.length;
          len = yd.length;
          xLTy = i < len;
          if (xLTy) len = i;
          for (i = 0; i < len; i++) {
            if (xd[i] != yd[i]) {
              xLTy = xd[i] < yd[i];
              break;
            }
          }
          k = 0;
        }
        if (xLTy) {
          d = xd;
          xd = yd;
          yd = d;
          y.s = -y.s;
        }
        len = xd.length;
        for (i = yd.length - len; i > 0; --i) xd[len++] = 0;
        for (i = yd.length; i > k; ) {
          if (xd[--i] < yd[i]) {
            for (j = i; j && xd[--j] === 0; ) xd[j] = BASE - 1;
            --xd[j];
            xd[i] += BASE;
          }
          xd[i] -= yd[i];
        }
        for (; xd[--len] === 0; ) xd.pop();
        for (; xd[0] === 0; xd.shift()) --e;
        if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);
        y.d = xd;
        y.e = getBase10Exponent(xd, e);
        return external ? finalise(y, pr, rm) : y;
      };
      P.modulo = P.mod = function(y) {
        var q, x = this, Ctor = x.constructor;
        y = new Ctor(y);
        if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN);
        if (!y.d || x.d && !x.d[0]) {
          return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);
        }
        external = false;
        if (Ctor.modulo == 9) {
          q = divide(x, y.abs(), 0, 3, 1);
          q.s *= y.s;
        } else {
          q = divide(x, y, 0, Ctor.modulo, 1);
        }
        q = q.times(y);
        external = true;
        return x.minus(q);
      };
      P.naturalExponential = P.exp = function() {
        return naturalExponential(this);
      };
      P.naturalLogarithm = P.ln = function() {
        return naturalLogarithm(this);
      };
      P.negated = P.neg = function() {
        var x = new this.constructor(this);
        x.s = -x.s;
        return finalise(x);
      };
      P.plus = P.add = function(y) {
        var carry, d, e, i, k, len, pr, rm, xd, yd, x = this, Ctor = x.constructor;
        y = new Ctor(y);
        if (!x.d || !y.d) {
          if (!x.s || !y.s) y = new Ctor(NaN);
          else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);
          return y;
        }
        if (x.s != y.s) {
          y.s = -y.s;
          return x.minus(y);
        }
        xd = x.d;
        yd = y.d;
        pr = Ctor.precision;
        rm = Ctor.rounding;
        if (!xd[0] || !yd[0]) {
          if (!yd[0]) y = new Ctor(x);
          return external ? finalise(y, pr, rm) : y;
        }
        k = mathfloor(x.e / LOG_BASE);
        e = mathfloor(y.e / LOG_BASE);
        xd = xd.slice();
        i = k - e;
        if (i) {
          if (i < 0) {
            d = xd;
            i = -i;
            len = yd.length;
          } else {
            d = yd;
            e = k;
            len = xd.length;
          }
          k = Math.ceil(pr / LOG_BASE);
          len = k > len ? k + 1 : len + 1;
          if (i > len) {
            i = len;
            d.length = 1;
          }
          d.reverse();
          for (; i--; ) d.push(0);
          d.reverse();
        }
        len = xd.length;
        i = yd.length;
        if (len - i < 0) {
          i = len;
          d = yd;
          yd = xd;
          xd = d;
        }
        for (carry = 0; i; ) {
          carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;
          xd[i] %= BASE;
        }
        if (carry) {
          xd.unshift(carry);
          ++e;
        }
        for (len = xd.length; xd[--len] == 0; ) xd.pop();
        y.d = xd;
        y.e = getBase10Exponent(xd, e);
        return external ? finalise(y, pr, rm) : y;
      };
      P.precision = P.sd = function(z) {
        var k, x = this;
        if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);
        if (x.d) {
          k = getPrecision(x.d);
          if (z && x.e + 1 > k) k = x.e + 1;
        } else {
          k = NaN;
        }
        return k;
      };
      P.round = function() {
        var x = this, Ctor = x.constructor;
        return finalise(new Ctor(x), x.e + 1, Ctor.rounding);
      };
      P.sine = P.sin = function() {
        var pr, rm, x = this, Ctor = x.constructor;
        if (!x.isFinite()) return new Ctor(NaN);
        if (x.isZero()) return new Ctor(x);
        pr = Ctor.precision;
        rm = Ctor.rounding;
        Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;
        Ctor.rounding = 1;
        x = sine(Ctor, toLessThanHalfPi(Ctor, x));
        Ctor.precision = pr;
        Ctor.rounding = rm;
        return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);
      };
      P.squareRoot = P.sqrt = function() {
        var m, n, sd, r, rep, t, x = this, d = x.d, e = x.e, s = x.s, Ctor = x.constructor;
        if (s !== 1 || !d || !d[0]) {
          return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);
        }
        external = false;
        s = Math.sqrt(+x);
        if (s == 0 || s == 1 / 0) {
          n = digitsToString(d);
          if ((n.length + e) % 2 == 0) n += "0";
          s = Math.sqrt(n);
          e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);
          if (s == 1 / 0) {
            n = "1e" + e;
          } else {
            n = s.toExponential();
            n = n.slice(0, n.indexOf("e") + 1) + e;
          }
          r = new Ctor(n);
        } else {
          r = new Ctor(s.toString());
        }
        sd = (e = Ctor.precision) + 3;
        for (; ; ) {
          t = r;
          r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);
          if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {
            n = n.slice(sd - 3, sd + 1);
            if (n == "9999" || !rep && n == "4999") {
              if (!rep) {
                finalise(t, e + 1, 0);
                if (t.times(t).eq(x)) {
                  r = t;
                  break;
                }
              }
              sd += 4;
              rep = 1;
            } else {
              if (!+n || !+n.slice(1) && n.charAt(0) == "5") {
                finalise(r, e + 1, 1);
                m = !r.times(r).eq(x);
              }
              break;
            }
          }
        }
        external = true;
        return finalise(r, e, Ctor.rounding, m);
      };
      P.tangent = P.tan = function() {
        var pr, rm, x = this, Ctor = x.constructor;
        if (!x.isFinite()) return new Ctor(NaN);
        if (x.isZero()) return new Ctor(x);
        pr = Ctor.precision;
        rm = Ctor.rounding;
        Ctor.precision = pr + 10;
        Ctor.rounding = 1;
        x = x.sin();
        x.s = 1;
        x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);
        Ctor.precision = pr;
        Ctor.rounding = rm;
        return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);
      };
      P.times = P.mul = function(y) {
        var carry, e, i, k, r, rL, t, xdL, ydL, x = this, Ctor = x.constructor, xd = x.d, yd = (y = new Ctor(y)).d;
        y.s *= x.s;
        if (!xd || !xd[0] || !yd || !yd[0]) {
          return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd ? NaN : !xd || !yd ? y.s / 0 : y.s * 0);
        }
        e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);
        xdL = xd.length;
        ydL = yd.length;
        if (xdL < ydL) {
          r = xd;
          xd = yd;
          yd = r;
          rL = xdL;
          xdL = ydL;
          ydL = rL;
        }
        r = [];
        rL = xdL + ydL;
        for (i = rL; i--; ) r.push(0);
        for (i = ydL; --i >= 0; ) {
          carry = 0;
          for (k = xdL + i; k > i; ) {
            t = r[k] + yd[i] * xd[k - i - 1] + carry;
            r[k--] = t % BASE | 0;
            carry = t / BASE | 0;
          }
          r[k] = (r[k] + carry) % BASE | 0;
        }
        for (; !r[--rL]; ) r.pop();
        if (carry) ++e;
        else r.shift();
        y.d = r;
        y.e = getBase10Exponent(r, e);
        return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;
      };
      P.toBinary = function(sd, rm) {
        return toStringBinary(this, 2, sd, rm);
      };
      P.toDecimalPlaces = P.toDP = function(dp, rm) {
        var x = this, Ctor = x.constructor;
        x = new Ctor(x);
        if (dp === void 0) return x;
        checkInt32(dp, 0, MAX_DIGITS);
        if (rm === void 0) rm = Ctor.rounding;
        else checkInt32(rm, 0, 8);
        return finalise(x, dp + x.e + 1, rm);
      };
      P.toExponential = function(dp, rm) {
        var str, x = this, Ctor = x.constructor;
        if (dp === void 0) {
          str = finiteToString(x, true);
        } else {
          checkInt32(dp, 0, MAX_DIGITS);
          if (rm === void 0) rm = Ctor.rounding;
          else checkInt32(rm, 0, 8);
          x = finalise(new Ctor(x), dp + 1, rm);
          str = finiteToString(x, true, dp + 1);
        }
        return x.isNeg() && !x.isZero() ? "-" + str : str;
      };
      P.toFixed = function(dp, rm) {
        var str, y, x = this, Ctor = x.constructor;
        if (dp === void 0) {
          str = finiteToString(x);
        } else {
          checkInt32(dp, 0, MAX_DIGITS);
          if (rm === void 0) rm = Ctor.rounding;
          else checkInt32(rm, 0, 8);
          y = finalise(new Ctor(x), dp + x.e + 1, rm);
          str = finiteToString(y, false, dp + y.e + 1);
        }
        return x.isNeg() && !x.isZero() ? "-" + str : str;
      };
      P.toFraction = function(maxD) {
        var d, d0, d1, d2, e, k, n, n0, n1, pr, q, r, x = this, xd = x.d, Ctor = x.constructor;
        if (!xd) return new Ctor(x);
        n1 = d0 = new Ctor(1);
        d1 = n0 = new Ctor(0);
        d = new Ctor(d1);
        e = d.e = getPrecision(xd) - x.e - 1;
        k = e % LOG_BASE;
        d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);
        if (maxD == null) {
          maxD = e > 0 ? d : n1;
        } else {
          n = new Ctor(maxD);
          if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);
          maxD = n.gt(d) ? e > 0 ? d : n1 : n;
        }
        external = false;
        n = new Ctor(digitsToString(xd));
        pr = Ctor.precision;
        Ctor.precision = e = xd.length * LOG_BASE * 2;
        for (; ; ) {
          q = divide(n, d, 0, 1, 1);
          d2 = d0.plus(q.times(d1));
          if (d2.cmp(maxD) == 1) break;
          d0 = d1;
          d1 = d2;
          d2 = n1;
          n1 = n0.plus(q.times(d2));
          n0 = d2;
          d2 = d;
          d = n.minus(q.times(d2));
          n = d2;
        }
        d2 = divide(maxD.minus(d0), d1, 0, 1, 1);
        n0 = n0.plus(d2.times(n1));
        d0 = d0.plus(d2.times(d1));
        n0.s = n1.s = x.s;
        r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];
        Ctor.precision = pr;
        external = true;
        return r;
      };
      P.toHexadecimal = P.toHex = function(sd, rm) {
        return toStringBinary(this, 16, sd, rm);
      };
      P.toNearest = function(y, rm) {
        var x = this, Ctor = x.constructor;
        x = new Ctor(x);
        if (y == null) {
          if (!x.d) return x;
          y = new Ctor(1);
          rm = Ctor.rounding;
        } else {
          y = new Ctor(y);
          if (rm !== void 0) checkInt32(rm, 0, 8);
          if (!x.d) return y.s ? x : y;
          if (!y.d) {
            if (y.s) y.s = x.s;
            return y;
          }
        }
        if (y.d[0]) {
          external = false;
          if (rm < 4) rm = [4, 5, 7, 8][rm];
          x = divide(x, y, 0, rm, 1).times(y);
          external = true;
          finalise(x);
        } else {
          y.s = x.s;
          x = y;
        }
        return x;
      };
      P.toNumber = function() {
        return +this;
      };
      P.toOctal = function(sd, rm) {
        return toStringBinary(this, 8, sd, rm);
      };
      P.toPower = P.pow = function(y) {
        var e, k, pr, r, rm, sign2, yIsInt, x = this, Ctor = x.constructor, yn = +(y = new Ctor(y));
        if (!x.d || !y.d || !x.d[0] || !y.d[0]) return new Ctor(mathpow(+x, yn));
        x = new Ctor(x);
        if (x.eq(1)) return x;
        pr = Ctor.precision;
        rm = Ctor.rounding;
        if (y.eq(1)) return finalise(x, pr, rm);
        e = mathfloor(y.e / LOG_BASE);
        k = y.d.length - 1;
        yIsInt = e >= k;
        sign2 = x.s;
        if (!yIsInt) {
          if (sign2 < 0) return new Ctor(NaN);
        } else if ((k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {
          r = intPow(Ctor, x, k, pr);
          return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);
        }
        sign2 = sign2 < 0 && y.d[Math.max(e, k)] & 1 ? -1 : 1;
        k = mathpow(+x, yn);
        e = k == 0 || !isFinite(k) ? mathfloor(yn * (Math.log("0." + digitsToString(x.d)) / Math.LN10 + x.e + 1)) : new Ctor(k + "").e;
        if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? sign2 / 0 : 0);
        external = false;
        Ctor.rounding = x.s = 1;
        k = Math.min(12, (e + "").length);
        r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);
        r = finalise(r, pr + 5, 1);
        if (checkRoundingDigits(r.d, pr, rm)) {
          e = pr + 10;
          r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);
          if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {
            r = finalise(r, pr + 1, 0);
          }
        }
        r.s = sign2;
        external = true;
        Ctor.rounding = rm;
        return finalise(r, pr, rm);
      };
      P.toPrecision = function(sd, rm) {
        var str, x = this, Ctor = x.constructor;
        if (sd === void 0) {
          str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);
        } else {
          checkInt32(sd, 1, MAX_DIGITS);
          if (rm === void 0) rm = Ctor.rounding;
          else checkInt32(rm, 0, 8);
          x = finalise(new Ctor(x), sd, rm);
          str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);
        }
        return x.isNeg() && !x.isZero() ? "-" + str : str;
      };
      P.toSignificantDigits = P.toSD = function(sd, rm) {
        var x = this, Ctor = x.constructor;
        if (sd === void 0) {
          sd = Ctor.precision;
          rm = Ctor.rounding;
        } else {
          checkInt32(sd, 1, MAX_DIGITS);
          if (rm === void 0) rm = Ctor.rounding;
          else checkInt32(rm, 0, 8);
        }
        return finalise(new Ctor(x), sd, rm);
      };
      P.toString = function() {
        var x = this, Ctor = x.constructor, str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);
        return x.isNeg() && !x.isZero() ? "-" + str : str;
      };
      P.truncated = P.trunc = function() {
        return finalise(new this.constructor(this), this.e + 1, 1);
      };
      P.valueOf = P.toJSON = function() {
        var x = this, Ctor = x.constructor, str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);
        return x.isNeg() ? "-" + str : str;
      };
      function digitsToString(d) {
        var i, k, ws, indexOfLastWord = d.length - 1, str = "", w = d[0];
        if (indexOfLastWord > 0) {
          str += w;
          for (i = 1; i < indexOfLastWord; i++) {
            ws = d[i] + "";
            k = LOG_BASE - ws.length;
            if (k) str += getZeroString(k);
            str += ws;
          }
          w = d[i];
          ws = w + "";
          k = LOG_BASE - ws.length;
          if (k) str += getZeroString(k);
        } else if (w === 0) {
          return "0";
        }
        for (; w % 10 === 0; ) w /= 10;
        return str + w;
      }
      function checkInt32(i, min2, max2) {
        if (i !== ~~i || i < min2 || i > max2) {
          throw Error(invalidArgument + i);
        }
      }
      function checkRoundingDigits(d, i, rm, repeating) {
        var di, k, r, rd;
        for (k = d[0]; k >= 10; k /= 10) --i;
        if (--i < 0) {
          i += LOG_BASE;
          di = 0;
        } else {
          di = Math.ceil((i + 1) / LOG_BASE);
          i %= LOG_BASE;
        }
        k = mathpow(10, LOG_BASE - i);
        rd = d[di] % k | 0;
        if (repeating == null) {
          if (i < 3) {
            if (i == 0) rd = rd / 100 | 0;
            else if (i == 1) rd = rd / 10 | 0;
            r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 5e4 || rd == 0;
          } else {
            r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) && (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 || (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;
          }
        } else {
          if (i < 4) {
            if (i == 0) rd = rd / 1e3 | 0;
            else if (i == 1) rd = rd / 100 | 0;
            else if (i == 2) rd = rd / 10 | 0;
            r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;
          } else {
            r = ((repeating || rm < 4) && rd + 1 == k || !repeating && rm > 3 && rd + 1 == k / 2) && (d[di + 1] / k / 1e3 | 0) == mathpow(10, i - 3) - 1;
          }
        }
        return r;
      }
      function convertBase(str, baseIn, baseOut) {
        var j, arr = [0], arrL, i = 0, strL = str.length;
        for (; i < strL; ) {
          for (arrL = arr.length; arrL--; ) arr[arrL] *= baseIn;
          arr[0] += NUMERALS.indexOf(str.charAt(i++));
          for (j = 0; j < arr.length; j++) {
            if (arr[j] > baseOut - 1) {
              if (arr[j + 1] === void 0) arr[j + 1] = 0;
              arr[j + 1] += arr[j] / baseOut | 0;
              arr[j] %= baseOut;
            }
          }
        }
        return arr.reverse();
      }
      function cosine(Ctor, x) {
        var k, y, len = x.d.length;
        if (len < 32) {
          k = Math.ceil(len / 3);
          y = Math.pow(4, -k).toString();
        } else {
          k = 16;
          y = "2.3283064365386962890625e-10";
        }
        Ctor.precision += k;
        x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));
        for (var i = k; i--; ) {
          var cos2x = x.times(x);
          x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);
        }
        Ctor.precision -= k;
        return x;
      }
      var divide = /* @__PURE__ */ function() {
        function multiplyInteger(x, k, base) {
          var temp, carry = 0, i = x.length;
          for (x = x.slice(); i--; ) {
            temp = x[i] * k + carry;
            x[i] = temp % base | 0;
            carry = temp / base | 0;
          }
          if (carry) x.unshift(carry);
          return x;
        }
        function compare(a, b, aL, bL) {
          var i, r;
          if (aL != bL) {
            r = aL > bL ? 1 : -1;
          } else {
            for (i = r = 0; i < aL; i++) {
              if (a[i] != b[i]) {
                r = a[i] > b[i] ? 1 : -1;
                break;
              }
            }
          }
          return r;
        }
        function subtract(a, b, aL, base) {
          var i = 0;
          for (; aL--; ) {
            a[aL] -= i;
            i = a[aL] < b[aL] ? 1 : 0;
            a[aL] = i * base + a[aL] - b[aL];
          }
          for (; !a[0] && a.length > 1; ) a.shift();
        }
        return function(x, y, pr, rm, dp, base) {
          var cmp, e, i, k, logBase, more, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0, yL, yz, Ctor = x.constructor, sign2 = x.s == y.s ? 1 : -1, xd = x.d, yd = y.d;
          if (!xd || !xd[0] || !yd || !yd[0]) {
            return new Ctor(
              // Return NaN if either NaN, or both Infinity or 0.
              !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN : (
                // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.
                xd && xd[0] == 0 || !yd ? sign2 * 0 : sign2 / 0
              )
            );
          }
          if (base) {
            logBase = 1;
            e = x.e - y.e;
          } else {
            base = BASE;
            logBase = LOG_BASE;
            e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);
          }
          yL = yd.length;
          xL = xd.length;
          q = new Ctor(sign2);
          qd = q.d = [];
          for (i = 0; yd[i] == (xd[i] || 0); i++) ;
          if (yd[i] > (xd[i] || 0)) e--;
          if (pr == null) {
            sd = pr = Ctor.precision;
            rm = Ctor.rounding;
          } else if (dp) {
            sd = pr + (x.e - y.e) + 1;
          } else {
            sd = pr;
          }
          if (sd < 0) {
            qd.push(1);
            more = true;
          } else {
            sd = sd / logBase + 2 | 0;
            i = 0;
            if (yL == 1) {
              k = 0;
              yd = yd[0];
              sd++;
              for (; (i < xL || k) && sd--; i++) {
                t = k * base + (xd[i] || 0);
                qd[i] = t / yd | 0;
                k = t % yd | 0;
              }
              more = k || i < xL;
            } else {
              k = base / (yd[0] + 1) | 0;
              if (k > 1) {
                yd = multiplyInteger(yd, k, base);
                xd = multiplyInteger(xd, k, base);
                yL = yd.length;
                xL = xd.length;
              }
              xi = yL;
              rem = xd.slice(0, yL);
              remL = rem.length;
              for (; remL < yL; ) rem[remL++] = 0;
              yz = yd.slice();
              yz.unshift(0);
              yd0 = yd[0];
              if (yd[1] >= base / 2) ++yd0;
              do {
                k = 0;
                cmp = compare(yd, rem, yL, remL);
                if (cmp < 0) {
                  rem0 = rem[0];
                  if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);
                  k = rem0 / yd0 | 0;
                  if (k > 1) {
                    if (k >= base) k = base - 1;
                    prod = multiplyInteger(yd, k, base);
                    prodL = prod.length;
                    remL = rem.length;
                    cmp = compare(prod, rem, prodL, remL);
                    if (cmp == 1) {
                      k--;
                      subtract(prod, yL < prodL ? yz : yd, prodL, base);
                    }
                  } else {
                    if (k == 0) cmp = k = 1;
                    prod = yd.slice();
                  }
                  prodL = prod.length;
                  if (prodL < remL) prod.unshift(0);
                  subtract(rem, prod, remL, base);
                  if (cmp == -1) {
                    remL = rem.length;
                    cmp = compare(yd, rem, yL, remL);
                    if (cmp < 1) {
                      k++;
                      subtract(rem, yL < remL ? yz : yd, remL, base);
                    }
                  }
                  remL = rem.length;
                } else if (cmp === 0) {
                  k++;
                  rem = [0];
                }
                qd[i++] = k;
                if (cmp && rem[0]) {
                  rem[remL++] = xd[xi] || 0;
                } else {
                  rem = [xd[xi]];
                  remL = 1;
                }
              } while ((xi++ < xL || rem[0] !== void 0) && sd--);
              more = rem[0] !== void 0;
            }
            if (!qd[0]) qd.shift();
          }
          if (logBase == 1) {
            q.e = e;
            inexact = more;
          } else {
            for (i = 1, k = qd[0]; k >= 10; k /= 10) i++;
            q.e = i + e * logBase - 1;
            finalise(q, dp ? pr + q.e + 1 : pr, rm, more);
          }
          return q;
        };
      }();
      function finalise(x, sd, rm, isTruncated) {
        var digits, i, j, k, rd, roundUp, w, xd, xdi, Ctor = x.constructor;
        out: if (sd != null) {
          xd = x.d;
          if (!xd) return x;
          for (digits = 1, k = xd[0]; k >= 10; k /= 10) digits++;
          i = sd - digits;
          if (i < 0) {
            i += LOG_BASE;
            j = sd;
            w = xd[xdi = 0];
            rd = w / mathpow(10, digits - j - 1) % 10 | 0;
          } else {
            xdi = Math.ceil((i + 1) / LOG_BASE);
            k = xd.length;
            if (xdi >= k) {
              if (isTruncated) {
                for (; k++ <= xdi; ) xd.push(0);
                w = rd = 0;
                digits = 1;
                i %= LOG_BASE;
                j = i - LOG_BASE + 1;
              } else {
                break out;
              }
            } else {
              w = k = xd[xdi];
              for (digits = 1; k >= 10; k /= 10) digits++;
              i %= LOG_BASE;
              j = i - LOG_BASE + digits;
              rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;
            }
          }
          isTruncated = isTruncated || sd < 0 || xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));
          roundUp = rm < 4 ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 && // Check whether the digit to the left of the rounding digit is odd.
          (i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));
          if (sd < 1 || !xd[0]) {
            xd.length = 0;
            if (roundUp) {
              sd -= x.e + 1;
              xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);
              x.e = -sd || 0;
            } else {
              xd[0] = x.e = 0;
            }
            return x;
          }
          if (i == 0) {
            xd.length = xdi;
            k = 1;
            xdi--;
          } else {
            xd.length = xdi + 1;
            k = mathpow(10, LOG_BASE - i);
            xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;
          }
          if (roundUp) {
            for (; ; ) {
              if (xdi == 0) {
                for (i = 1, j = xd[0]; j >= 10; j /= 10) i++;
                j = xd[0] += k;
                for (k = 1; j >= 10; j /= 10) k++;
                if (i != k) {
                  x.e++;
                  if (xd[0] == BASE) xd[0] = 1;
                }
                break;
              } else {
                xd[xdi] += k;
                if (xd[xdi] != BASE) break;
                xd[xdi--] = 0;
                k = 1;
              }
            }
          }
          for (i = xd.length; xd[--i] === 0; ) xd.pop();
        }
        if (external) {
          if (x.e > Ctor.maxE) {
            x.d = null;
            x.e = NaN;
          } else if (x.e < Ctor.minE) {
            x.e = 0;
            x.d = [0];
          }
        }
        return x;
      }
      function finiteToString(x, isExp, sd) {
        if (!x.isFinite()) return nonFiniteToString(x);
        var k, e = x.e, str = digitsToString(x.d), len = str.length;
        if (isExp) {
          if (sd && (k = sd - len) > 0) {
            str = str.charAt(0) + "." + str.slice(1) + getZeroString(k);
          } else if (len > 1) {
            str = str.charAt(0) + "." + str.slice(1);
          }
          str = str + (x.e < 0 ? "e" : "e+") + x.e;
        } else if (e < 0) {
          str = "0." + getZeroString(-e - 1) + str;
          if (sd && (k = sd - len) > 0) str += getZeroString(k);
        } else if (e >= len) {
          str += getZeroString(e + 1 - len);
          if (sd && (k = sd - e - 1) > 0) str = str + "." + getZeroString(k);
        } else {
          if ((k = e + 1) < len) str = str.slice(0, k) + "." + str.slice(k);
          if (sd && (k = sd - len) > 0) {
            if (e + 1 === len) str += ".";
            str += getZeroString(k);
          }
        }
        return str;
      }
      function getBase10Exponent(digits, e) {
        var w = digits[0];
        for (e *= LOG_BASE; w >= 10; w /= 10) e++;
        return e;
      }
      function getLn10(Ctor, sd, pr) {
        if (sd > LN10_PRECISION) {
          external = true;
          if (pr) Ctor.precision = pr;
          throw Error(precisionLimitExceeded);
        }
        return finalise(new Ctor(LN10), sd, 1, true);
      }
      function getPi(Ctor, sd, rm) {
        if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);
        return finalise(new Ctor(PI), sd, rm, true);
      }
      function getPrecision(digits) {
        var w = digits.length - 1, len = w * LOG_BASE + 1;
        w = digits[w];
        if (w) {
          for (; w % 10 == 0; w /= 10) len--;
          for (w = digits[0]; w >= 10; w /= 10) len++;
        }
        return len;
      }
      function getZeroString(k) {
        var zs = "";
        for (; k--; ) zs += "0";
        return zs;
      }
      function intPow(Ctor, x, n, pr) {
        var isTruncated, r = new Ctor(1), k = Math.ceil(pr / LOG_BASE + 4);
        external = false;
        for (; ; ) {
          if (n % 2) {
            r = r.times(x);
            if (truncate(r.d, k)) isTruncated = true;
          }
          n = mathfloor(n / 2);
          if (n === 0) {
            n = r.d.length - 1;
            if (isTruncated && r.d[n] === 0) ++r.d[n];
            break;
          }
          x = x.times(x);
          truncate(x.d, k);
        }
        external = true;
        return r;
      }
      function isOdd(n) {
        return n.d[n.d.length - 1] & 1;
      }
      function maxOrMin(Ctor, args, ltgt) {
        var y, x = new Ctor(args[0]), i = 0;
        for (; ++i < args.length; ) {
          y = new Ctor(args[i]);
          if (!y.s) {
            x = y;
            break;
          } else if (x[ltgt](y)) {
            x = y;
          }
        }
        return x;
      }
      function naturalExponential(x, sd) {
        var denominator, guard, j, pow2, sum, t, wpr, rep = 0, i = 0, k = 0, Ctor = x.constructor, rm = Ctor.rounding, pr = Ctor.precision;
        if (!x.d || !x.d[0] || x.e > 17) {
          return new Ctor(x.d ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0 : x.s ? x.s < 0 ? 0 : x : 0 / 0);
        }
        if (sd == null) {
          external = false;
          wpr = pr;
        } else {
          wpr = sd;
        }
        t = new Ctor(0.03125);
        while (x.e > -2) {
          x = x.times(t);
          k += 5;
        }
        guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;
        wpr += guard;
        denominator = pow2 = sum = new Ctor(1);
        Ctor.precision = wpr;
        for (; ; ) {
          pow2 = finalise(pow2.times(x), wpr, 1);
          denominator = denominator.times(++i);
          t = sum.plus(divide(pow2, denominator, wpr, 1));
          if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
            j = k;
            while (j--) sum = finalise(sum.times(sum), wpr, 1);
            if (sd == null) {
              if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {
                Ctor.precision = wpr += 10;
                denominator = pow2 = t = new Ctor(1);
                i = 0;
                rep++;
              } else {
                return finalise(sum, Ctor.precision = pr, rm, external = true);
              }
            } else {
              Ctor.precision = pr;
              return sum;
            }
          }
          sum = t;
        }
      }
      function naturalLogarithm(y, sd) {
        var c, c0, denominator, e, numerator, rep, sum, t, wpr, x1, x2, n = 1, guard = 10, x = y, xd = x.d, Ctor = x.constructor, rm = Ctor.rounding, pr = Ctor.precision;
        if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {
          return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);
        }
        if (sd == null) {
          external = false;
          wpr = pr;
        } else {
          wpr = sd;
        }
        Ctor.precision = wpr += guard;
        c = digitsToString(xd);
        c0 = c.charAt(0);
        if (Math.abs(e = x.e) < 15e14) {
          while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {
            x = x.times(y);
            c = digitsToString(x.d);
            c0 = c.charAt(0);
            n++;
          }
          e = x.e;
          if (c0 > 1) {
            x = new Ctor("0." + c);
            e++;
          } else {
            x = new Ctor(c0 + "." + c.slice(1));
          }
        } else {
          t = getLn10(Ctor, wpr + 2, pr).times(e + "");
          x = naturalLogarithm(new Ctor(c0 + "." + c.slice(1)), wpr - guard).plus(t);
          Ctor.precision = pr;
          return sd == null ? finalise(x, pr, rm, external = true) : x;
        }
        x1 = x;
        sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);
        x2 = finalise(x.times(x), wpr, 1);
        denominator = 3;
        for (; ; ) {
          numerator = finalise(numerator.times(x2), wpr, 1);
          t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));
          if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
            sum = sum.times(2);
            if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ""));
            sum = divide(sum, new Ctor(n), wpr, 1);
            if (sd == null) {
              if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {
                Ctor.precision = wpr += guard;
                t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);
                x2 = finalise(x.times(x), wpr, 1);
                denominator = rep = 1;
              } else {
                return finalise(sum, Ctor.precision = pr, rm, external = true);
              }
            } else {
              Ctor.precision = pr;
              return sum;
            }
          }
          sum = t;
          denominator += 2;
        }
      }
      function nonFiniteToString(x) {
        return String(x.s * x.s / 0);
      }
      function parseDecimal(x, str) {
        var e, i, len;
        if ((e = str.indexOf(".")) > -1) str = str.replace(".", "");
        if ((i = str.search(/e/i)) > 0) {
          if (e < 0) e = i;
          e += +str.slice(i + 1);
          str = str.substring(0, i);
        } else if (e < 0) {
          e = str.length;
        }
        for (i = 0; str.charCodeAt(i) === 48; i++) ;
        for (len = str.length; str.charCodeAt(len - 1) === 48; --len) ;
        str = str.slice(i, len);
        if (str) {
          len -= i;
          x.e = e = e - i - 1;
          x.d = [];
          i = (e + 1) % LOG_BASE;
          if (e < 0) i += LOG_BASE;
          if (i < len) {
            if (i) x.d.push(+str.slice(0, i));
            for (len -= LOG_BASE; i < len; ) x.d.push(+str.slice(i, i += LOG_BASE));
            str = str.slice(i);
            i = LOG_BASE - str.length;
          } else {
            i -= len;
          }
          for (; i--; ) str += "0";
          x.d.push(+str);
          if (external) {
            if (x.e > x.constructor.maxE) {
              x.d = null;
              x.e = NaN;
            } else if (x.e < x.constructor.minE) {
              x.e = 0;
              x.d = [0];
            }
          }
        } else {
          x.e = 0;
          x.d = [0];
        }
        return x;
      }
      function parseOther(x, str) {
        var base, Ctor, divisor, i, isFloat, len, p, xd, xe;
        if (str === "Infinity" || str === "NaN") {
          if (!+str) x.s = NaN;
          x.e = NaN;
          x.d = null;
          return x;
        }
        if (isHex.test(str)) {
          base = 16;
          str = str.toLowerCase();
        } else if (isBinary.test(str)) {
          base = 2;
        } else if (isOctal.test(str)) {
          base = 8;
        } else {
          throw Error(invalidArgument + str);
        }
        i = str.search(/p/i);
        if (i > 0) {
          p = +str.slice(i + 1);
          str = str.substring(2, i);
        } else {
          str = str.slice(2);
        }
        i = str.indexOf(".");
        isFloat = i >= 0;
        Ctor = x.constructor;
        if (isFloat) {
          str = str.replace(".", "");
          len = str.length;
          i = len - i;
          divisor = intPow(Ctor, new Ctor(base), i, i * 2);
        }
        xd = convertBase(str, base, BASE);
        xe = xd.length - 1;
        for (i = xe; xd[i] === 0; --i) xd.pop();
        if (i < 0) return new Ctor(x.s * 0);
        x.e = getBase10Exponent(xd, xe);
        x.d = xd;
        external = false;
        if (isFloat) x = divide(x, divisor, len * 4);
        if (p) x = x.times(Math.abs(p) < 54 ? Math.pow(2, p) : Decimal.pow(2, p));
        external = true;
        return x;
      }
      function sine(Ctor, x) {
        var k, len = x.d.length;
        if (len < 3) return taylorSeries(Ctor, 2, x, x);
        k = 1.4 * Math.sqrt(len);
        k = k > 16 ? 16 : k | 0;
        x = x.times(Math.pow(5, -k));
        x = taylorSeries(Ctor, 2, x, x);
        var sin2_x, d5 = new Ctor(5), d16 = new Ctor(16), d20 = new Ctor(20);
        for (; k--; ) {
          sin2_x = x.times(x);
          x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));
        }
        return x;
      }
      function taylorSeries(Ctor, n, x, y, isHyperbolic) {
        var j, t, u, x2, i = 1, pr = Ctor.precision, k = Math.ceil(pr / LOG_BASE);
        external = false;
        x2 = x.times(x);
        u = new Ctor(y);
        for (; ; ) {
          t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);
          u = isHyperbolic ? y.plus(t) : y.minus(t);
          y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);
          t = u.plus(y);
          if (t.d[k] !== void 0) {
            for (j = k; t.d[j] === u.d[j] && j--; ) ;
            if (j == -1) break;
          }
          j = u;
          u = y;
          y = t;
          t = j;
          i++;
        }
        external = true;
        t.d.length = k + 1;
        return t;
      }
      function toLessThanHalfPi(Ctor, x) {
        var t, isNeg = x.s < 0, pi2 = getPi(Ctor, Ctor.precision, 1), halfPi = pi2.times(0.5);
        x = x.abs();
        if (x.lte(halfPi)) {
          quadrant = isNeg ? 4 : 1;
          return x;
        }
        t = x.divToInt(pi2);
        if (t.isZero()) {
          quadrant = isNeg ? 3 : 2;
        } else {
          x = x.minus(t.times(pi2));
          if (x.lte(halfPi)) {
            quadrant = isOdd(t) ? isNeg ? 2 : 3 : isNeg ? 4 : 1;
            return x;
          }
          quadrant = isOdd(t) ? isNeg ? 1 : 4 : isNeg ? 3 : 2;
        }
        return x.minus(pi2).abs();
      }
      function toStringBinary(x, baseOut, sd, rm) {
        var base, e, i, k, len, roundUp, str, xd, y, Ctor = x.constructor, isExp = sd !== void 0;
        if (isExp) {
          checkInt32(sd, 1, MAX_DIGITS);
          if (rm === void 0) rm = Ctor.rounding;
          else checkInt32(rm, 0, 8);
        } else {
          sd = Ctor.precision;
          rm = Ctor.rounding;
        }
        if (!x.isFinite()) {
          str = nonFiniteToString(x);
        } else {
          str = finiteToString(x);
          i = str.indexOf(".");
          if (isExp) {
            base = 2;
            if (baseOut == 16) {
              sd = sd * 4 - 3;
            } else if (baseOut == 8) {
              sd = sd * 3 - 2;
            }
          } else {
            base = baseOut;
          }
          if (i >= 0) {
            str = str.replace(".", "");
            y = new Ctor(1);
            y.e = str.length - i;
            y.d = convertBase(finiteToString(y), 10, base);
            y.e = y.d.length;
          }
          xd = convertBase(str, 10, base);
          e = len = xd.length;
          for (; xd[--len] == 0; ) xd.pop();
          if (!xd[0]) {
            str = isExp ? "0p+0" : "0";
          } else {
            if (i < 0) {
              e--;
            } else {
              x = new Ctor(x);
              x.d = xd;
              x.e = e;
              x = divide(x, y, sd, rm, 0, base);
              xd = x.d;
              e = x.e;
              roundUp = inexact;
            }
            i = xd[sd];
            k = base / 2;
            roundUp = roundUp || xd[sd + 1] !== void 0;
            roundUp = rm < 4 ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2)) : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 || rm === (x.s < 0 ? 8 : 7));
            xd.length = sd;
            if (roundUp) {
              for (; ++xd[--sd] > base - 1; ) {
                xd[sd] = 0;
                if (!sd) {
                  ++e;
                  xd.unshift(1);
                }
              }
            }
            for (len = xd.length; !xd[len - 1]; --len) ;
            for (i = 0, str = ""; i < len; i++) str += NUMERALS.charAt(xd[i]);
            if (isExp) {
              if (len > 1) {
                if (baseOut == 16 || baseOut == 8) {
                  i = baseOut == 16 ? 4 : 3;
                  for (--len; len % i; len++) str += "0";
                  xd = convertBase(str, base, baseOut);
                  for (len = xd.length; !xd[len - 1]; --len) ;
                  for (i = 1, str = "1."; i < len; i++) str += NUMERALS.charAt(xd[i]);
                } else {
                  str = str.charAt(0) + "." + str.slice(1);
                }
              }
              str = str + (e < 0 ? "p" : "p+") + e;
            } else if (e < 0) {
              for (; ++e; ) str = "0" + str;
              str = "0." + str;
            } else {
              if (++e > len) for (e -= len; e--; ) str += "0";
              else if (e < len) str = str.slice(0, e) + "." + str.slice(e);
            }
          }
          str = (baseOut == 16 ? "0x" : baseOut == 2 ? "0b" : baseOut == 8 ? "0o" : "") + str;
        }
        return x.s < 0 ? "-" + str : str;
      }
      function truncate(arr, len) {
        if (arr.length > len) {
          arr.length = len;
          return true;
        }
      }
      function abs(x) {
        return new this(x).abs();
      }
      function acos(x) {
        return new this(x).acos();
      }
      function acosh(x) {
        return new this(x).acosh();
      }
      function add(x, y) {
        return new this(x).plus(y);
      }
      function asin(x) {
        return new this(x).asin();
      }
      function asinh(x) {
        return new this(x).asinh();
      }
      function atan(x) {
        return new this(x).atan();
      }
      function atanh(x) {
        return new this(x).atanh();
      }
      function atan2(y, x) {
        y = new this(y);
        x = new this(x);
        var r, pr = this.precision, rm = this.rounding, wpr = pr + 4;
        if (!y.s || !x.s) {
          r = new this(NaN);
        } else if (!y.d && !x.d) {
          r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);
          r.s = y.s;
        } else if (!x.d || y.isZero()) {
          r = x.s < 0 ? getPi(this, pr, rm) : new this(0);
          r.s = y.s;
        } else if (!y.d || x.isZero()) {
          r = getPi(this, wpr, 1).times(0.5);
          r.s = y.s;
        } else if (x.s < 0) {
          this.precision = wpr;
          this.rounding = 1;
          r = this.atan(divide(y, x, wpr, 1));
          x = getPi(this, wpr, 1);
          this.precision = pr;
          this.rounding = rm;
          r = y.s < 0 ? r.minus(x) : r.plus(x);
        } else {
          r = this.atan(divide(y, x, wpr, 1));
        }
        return r;
      }
      function cbrt(x) {
        return new this(x).cbrt();
      }
      function ceil(x) {
        return finalise(x = new this(x), x.e + 1, 2);
      }
      function config(obj) {
        if (!obj || typeof obj !== "object") throw Error(decimalError + "Object expected");
        var i, p, v, ps = [
          "precision",
          1,
          MAX_DIGITS,
          "rounding",
          0,
          8,
          "toExpNeg",
          -EXP_LIMIT,
          0,
          "toExpPos",
          0,
          EXP_LIMIT,
          "maxE",
          0,
          EXP_LIMIT,
          "minE",
          -EXP_LIMIT,
          0,
          "modulo",
          0,
          9
        ];
        for (i = 0; i < ps.length; i += 3) {
          if ((v = obj[p = ps[i]]) !== void 0) {
            if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;
            else throw Error(invalidArgument + p + ": " + v);
          }
        }
        if ((v = obj[p = "crypto"]) !== void 0) {
          if (v === true || v === false || v === 0 || v === 1) {
            if (v) {
              if (typeof crypto != "undefined" && crypto && (crypto.getRandomValues || crypto.randomBytes)) {
                this[p] = true;
              } else {
                throw Error(cryptoUnavailable);
              }
            } else {
              this[p] = false;
            }
          } else {
            throw Error(invalidArgument + p + ": " + v);
          }
        }
        return this;
      }
      function cos(x) {
        return new this(x).cos();
      }
      function cosh(x) {
        return new this(x).cosh();
      }
      function clone(obj) {
        var i, p, ps;
        function Decimal2(v) {
          var e, i2, t, x = this;
          if (!(x instanceof Decimal2)) return new Decimal2(v);
          x.constructor = Decimal2;
          if (v instanceof Decimal2) {
            x.s = v.s;
            x.e = v.e;
            x.d = (v = v.d) ? v.slice() : v;
            return;
          }
          t = typeof v;
          if (t === "number") {
            if (v === 0) {
              x.s = 1 / v < 0 ? -1 : 1;
              x.e = 0;
              x.d = [0];
              return;
            }
            if (v < 0) {
              v = -v;
              x.s = -1;
            } else {
              x.s = 1;
            }
            if (v === ~~v && v < 1e7) {
              for (e = 0, i2 = v; i2 >= 10; i2 /= 10) e++;
              x.e = e;
              x.d = [v];
              return;
            } else if (v * 0 !== 0) {
              if (!v) x.s = NaN;
              x.e = NaN;
              x.d = null;
              return;
            }
            return parseDecimal(x, v.toString());
          } else if (t !== "string") {
            throw Error(invalidArgument + v);
          }
          if (v.charCodeAt(0) === 45) {
            v = v.slice(1);
            x.s = -1;
          } else {
            x.s = 1;
          }
          return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);
        }
        Decimal2.prototype = P;
        Decimal2.ROUND_UP = 0;
        Decimal2.ROUND_DOWN = 1;
        Decimal2.ROUND_CEIL = 2;
        Decimal2.ROUND_FLOOR = 3;
        Decimal2.ROUND_HALF_UP = 4;
        Decimal2.ROUND_HALF_DOWN = 5;
        Decimal2.ROUND_HALF_EVEN = 6;
        Decimal2.ROUND_HALF_CEIL = 7;
        Decimal2.ROUND_HALF_FLOOR = 8;
        Decimal2.EUCLID = 9;
        Decimal2.config = Decimal2.set = config;
        Decimal2.clone = clone;
        Decimal2.abs = abs;
        Decimal2.acos = acos;
        Decimal2.acosh = acosh;
        Decimal2.add = add;
        Decimal2.asin = asin;
        Decimal2.asinh = asinh;
        Decimal2.atan = atan;
        Decimal2.atanh = atanh;
        Decimal2.atan2 = atan2;
        Decimal2.cbrt = cbrt;
        Decimal2.ceil = ceil;
        Decimal2.cos = cos;
        Decimal2.cosh = cosh;
        Decimal2.div = div;
        Decimal2.exp = exp;
        Decimal2.floor = floor;
        Decimal2.hypot = hypot;
        Decimal2.ln = ln;
        Decimal2.log = log;
        Decimal2.log10 = log10;
        Decimal2.log2 = log2;
        Decimal2.max = max;
        Decimal2.min = min;
        Decimal2.mod = mod;
        Decimal2.mul = mul;
        Decimal2.pow = pow;
        Decimal2.random = random;
        Decimal2.round = round;
        Decimal2.sign = sign;
        Decimal2.sin = sin;
        Decimal2.sinh = sinh;
        Decimal2.sqrt = sqrt;
        Decimal2.sub = sub;
        Decimal2.tan = tan;
        Decimal2.tanh = tanh;
        Decimal2.trunc = trunc;
        if (obj === void 0) obj = {};
        if (obj) {
          ps = ["precision", "rounding", "toExpNeg", "toExpPos", "maxE", "minE", "modulo", "crypto"];
          for (i = 0; i < ps.length; ) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];
        }
        Decimal2.config(obj);
        return Decimal2;
      }
      function div(x, y) {
        return new this(x).div(y);
      }
      function exp(x) {
        return new this(x).exp();
      }
      function floor(x) {
        return finalise(x = new this(x), x.e + 1, 3);
      }
      function hypot() {
        var i, n, t = new this(0);
        external = false;
        for (i = 0; i < arguments.length; ) {
          n = new this(arguments[i++]);
          if (!n.d) {
            if (n.s) {
              external = true;
              return new this(1 / 0);
            }
            t = n;
          } else if (t.d) {
            t = t.plus(n.times(n));
          }
        }
        external = true;
        return t.sqrt();
      }
      function ln(x) {
        return new this(x).ln();
      }
      function log(x, y) {
        return new this(x).log(y);
      }
      function log2(x) {
        return new this(x).log(2);
      }
      function log10(x) {
        return new this(x).log(10);
      }
      function max() {
        return maxOrMin(this, arguments, "lt");
      }
      function min() {
        return maxOrMin(this, arguments, "gt");
      }
      function mod(x, y) {
        return new this(x).mod(y);
      }
      function mul(x, y) {
        return new this(x).mul(y);
      }
      function pow(x, y) {
        return new this(x).pow(y);
      }
      function random(sd) {
        var d, e, k, n, i = 0, r = new this(1), rd = [];
        if (sd === void 0) sd = this.precision;
        else checkInt32(sd, 1, MAX_DIGITS);
        k = Math.ceil(sd / LOG_BASE);
        if (!this.crypto) {
          for (; i < k; ) rd[i++] = Math.random() * 1e7 | 0;
        } else if (crypto.getRandomValues) {
          d = crypto.getRandomValues(new Uint32Array(k));
          for (; i < k; ) {
            n = d[i];
            if (n >= 429e7) {
              d[i] = crypto.getRandomValues(new Uint32Array(1))[0];
            } else {
              rd[i++] = n % 1e7;
            }
          }
        } else if (crypto.randomBytes) {
          d = crypto.randomBytes(k *= 4);
          for (; i < k; ) {
            n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 127) << 24);
            if (n >= 214e7) {
              crypto.randomBytes(4).copy(d, i);
            } else {
              rd.push(n % 1e7);
              i += 4;
            }
          }
          i = k / 4;
        } else {
          throw Error(cryptoUnavailable);
        }
        k = rd[--i];
        sd %= LOG_BASE;
        if (k && sd) {
          n = mathpow(10, LOG_BASE - sd);
          rd[i] = (k / n | 0) * n;
        }
        for (; rd[i] === 0; i--) rd.pop();
        if (i < 0) {
          e = 0;
          rd = [0];
        } else {
          e = -1;
          for (; rd[0] === 0; e -= LOG_BASE) rd.shift();
          for (k = 1, n = rd[0]; n >= 10; n /= 10) k++;
          if (k < LOG_BASE) e -= LOG_BASE - k;
        }
        r.e = e;
        r.d = rd;
        return r;
      }
      function round(x) {
        return finalise(x = new this(x), x.e + 1, this.rounding);
      }
      function sign(x) {
        x = new this(x);
        return x.d ? x.d[0] ? x.s : 0 * x.s : x.s || NaN;
      }
      function sin(x) {
        return new this(x).sin();
      }
      function sinh(x) {
        return new this(x).sinh();
      }
      function sqrt(x) {
        return new this(x).sqrt();
      }
      function sub(x, y) {
        return new this(x).sub(y);
      }
      function tan(x) {
        return new this(x).tan();
      }
      function tanh(x) {
        return new this(x).tanh();
      }
      function trunc(x) {
        return finalise(x = new this(x), x.e + 1, 1);
      }
      Decimal = clone(Decimal);
      LN10 = new Decimal(LN10);
      PI = new Decimal(PI);
      if (typeof define == "function" && define.amd) {
        define(function() {
          return Decimal;
        });
      } else if (typeof module != "undefined" && module.exports) {
        module.exports = Decimal.default = Decimal.Decimal = Decimal;
      } else {
        if (!globalScope) {
          globalScope = typeof self != "undefined" && self && self.self == self ? self : Function("return this")();
        }
        noConflict = globalScope.Decimal;
        Decimal.noConflict = function() {
          globalScope.Decimal = noConflict;
          return Decimal;
        };
        globalScope.Decimal = Decimal;
      }
    })(exports);
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/type/bignumber/BigNumber.js
var require_BigNumber = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/type/bignumber/BigNumber.js"(exports) {
    var Decimal = require_decimal();
    function factory(type, config, load, typed, math) {
      var BigNumber = Decimal.clone({ precision: config.precision });
      BigNumber.prototype.type = "BigNumber";
      BigNumber.prototype.isBigNumber = true;
      BigNumber.prototype.toJSON = function() {
        return {
          mathjs: "BigNumber",
          value: this.toString()
        };
      };
      BigNumber.fromJSON = function(json) {
        return new BigNumber(json.value);
      };
      math.on("config", function(curr, prev) {
        if (curr.precision !== prev.precision) {
          BigNumber.config({ precision: curr.precision });
        }
      });
      return BigNumber;
    }
    exports.name = "BigNumber";
    exports.path = "type";
    exports.factory = factory;
    exports.math = true;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/utils/collection/deepMap.js
var require_deepMap = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/utils/collection/deepMap.js"(exports, module) {
    "use strict";
    module.exports = function deepMap(array, callback, skipZeros) {
      if (array && typeof array.map === "function") {
        return array.map(function(x) {
          return deepMap(x, callback, skipZeros);
        });
      } else {
        return callback(array);
      }
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/type/bignumber/function/bignumber.js
var require_bignumber = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/type/bignumber/function/bignumber.js"(exports) {
    "use strict";
    var deepMap = require_deepMap();
    function factory(type, config, load, typed) {
      var bignumber = typed("bignumber", {
        "": function() {
          return new type.BigNumber(0);
        },
        "number": function(x) {
          return new type.BigNumber(x + "");
        },
        "string": function(x) {
          return new type.BigNumber(x);
        },
        "BigNumber": function(x) {
          return x;
        },
        "Fraction": function(x) {
          return new type.BigNumber(x.n).div(x.d);
        },
        "Array | Matrix": function(x) {
          return deepMap(x, bignumber);
        }
      });
      bignumber.toTex = {
        0: "0",
        1: "\\left(${args[0]}\\right)"
      };
      return bignumber;
    }
    exports.name = "bignumber";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/type/bignumber/index.js
var require_bignumber2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/type/bignumber/index.js"(exports, module) {
    module.exports = [
      // type
      require_BigNumber(),
      // construction function
      require_bignumber()
    ];
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/type/boolean.js
var require_boolean = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/type/boolean.js"(exports) {
    "use strict";
    var deepMap = require_deepMap();
    function factory(type, config, load, typed) {
      var bool = typed("bool", {
        "": function() {
          return false;
        },
        "boolean": function(x) {
          return x;
        },
        "number": function(x) {
          return !!x;
        },
        "BigNumber": function(x) {
          return !x.isZero();
        },
        "string": function(x) {
          var lcase = x.toLowerCase();
          if (lcase === "true") {
            return true;
          } else if (lcase === "false") {
            return false;
          }
          var num = Number(x);
          if (x != "" && !isNaN(num)) {
            return !!num;
          }
          throw new Error('Cannot convert "' + x + '" to a boolean');
        },
        "Array | Matrix": function(x) {
          return deepMap(x, bool);
        }
      });
      return bool;
    }
    exports.name = "boolean";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/utils/bignumber/formatter.js
var require_formatter = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/utils/bignumber/formatter.js"(exports) {
    exports.format = function(value, options) {
      if (typeof options === "function") {
        return options(value);
      }
      if (!value.isFinite()) {
        return value.isNaN() ? "NaN" : value.gt(0) ? "Infinity" : "-Infinity";
      }
      var notation = "auto";
      var precision = void 0;
      if (options !== void 0) {
        if (options.notation) {
          notation = options.notation;
        }
        if (typeof options === "number") {
          precision = options;
        } else if (options.precision) {
          precision = options.precision;
        }
      }
      switch (notation) {
        case "fixed":
          return exports.toFixed(value, precision);
        case "exponential":
          return exports.toExponential(value, precision);
        case "auto":
          var lower = 1e-3;
          var upper = 1e5;
          if (options && options.exponential) {
            if (options.exponential.lower !== void 0) {
              lower = options.exponential.lower;
            }
            if (options.exponential.upper !== void 0) {
              upper = options.exponential.upper;
            }
          }
          var oldConfig = {
            toExpNeg: value.constructor.toExpNeg,
            toExpPos: value.constructor.toExpPos
          };
          value.constructor.config({
            toExpNeg: Math.round(Math.log(lower) / Math.LN10),
            toExpPos: Math.round(Math.log(upper) / Math.LN10)
          });
          if (value.isZero()) return "0";
          var str;
          var abs = value.abs();
          if (abs.gte(lower) && abs.lt(upper)) {
            str = value.toSignificantDigits(precision).toFixed();
          } else {
            str = exports.toExponential(value, precision);
          }
          return str.replace(/((\.\d*?)(0+))($|e)/, function() {
            var digits = arguments[2];
            var e = arguments[4];
            return digits !== "." ? digits + e : e;
          });
        default:
          throw new Error('Unknown notation "' + notation + '". Choose "auto", "exponential", or "fixed".');
      }
    };
    exports.toExponential = function(value, precision) {
      if (precision !== void 0) {
        return value.toExponential(precision - 1);
      } else {
        return value.toExponential();
      }
    };
    exports.toFixed = function(value, precision) {
      return value.toFixed(precision || 0);
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/utils/string.js
var require_string = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/utils/string.js"(exports) {
    "use strict";
    var formatNumber = require_number().format;
    var formatBigNumber = require_formatter().format;
    exports.isString = function(value) {
      return typeof value === "string";
    };
    exports.endsWith = function(text, search) {
      var start = text.length - search.length;
      var end = text.length;
      return text.substring(start, end) === search;
    };
    exports.format = function(value, options) {
      if (typeof value === "number") {
        return formatNumber(value, options);
      }
      if (value && value.isBigNumber === true) {
        return formatBigNumber(value, options);
      }
      if (value && value.isFraction === true) {
        if (!options || options.fraction !== "decimal") {
          return value.s * value.n + "/" + value.d;
        } else {
          return value.toString();
        }
      }
      if (Array.isArray(value)) {
        return formatArray(value, options);
      }
      if (exports.isString(value)) {
        return '"' + value + '"';
      }
      if (typeof value === "function") {
        return value.syntax ? String(value.syntax) : "function";
      }
      if (value && typeof value === "object") {
        if (typeof value.format === "function") {
          return value.format(options);
        } else if (value && value.toString() !== {}.toString()) {
          return value.toString();
        } else {
          var entries = [];
          for (var key in value) {
            if (value.hasOwnProperty(key)) {
              entries.push('"' + key + '": ' + exports.format(value[key], options));
            }
          }
          return "{" + entries.join(", ") + "}";
        }
      }
      return String(value);
    };
    function formatArray(array, options) {
      if (Array.isArray(array)) {
        var str = "[";
        var len = array.length;
        for (var i = 0; i < len; i++) {
          if (i != 0) {
            str += ", ";
          }
          str += formatArray(array[i], options);
        }
        str += "]";
        return str;
      } else {
        return exports.format(array, options);
      }
    }
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/type/chain/Chain.js
var require_Chain = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/type/chain/Chain.js"(exports) {
    "use strict";
    var format = require_string().format;
    var lazy = require_object().lazy;
    function factory(type, config, load, typed, math) {
      function Chain(value) {
        if (!(this instanceof Chain)) {
          throw new SyntaxError("Constructor must be called with the new operator");
        }
        if (value && value.isChain) {
          this.value = value.value;
        } else {
          this.value = value;
        }
      }
      Chain.prototype.type = "Chain";
      Chain.prototype.isChain = true;
      Chain.prototype.done = function() {
        return this.value;
      };
      Chain.prototype.valueOf = function() {
        return this.value;
      };
      Chain.prototype.toString = function() {
        return format(this.value);
      };
      function createProxy(name, fn) {
        if (typeof fn === "function") {
          Chain.prototype[name] = chainify(fn);
        }
      }
      function createLazyProxy(name, resolver) {
        lazy(Chain.prototype, name, function outerResolver() {
          var fn = resolver();
          if (typeof fn === "function") {
            return chainify(fn);
          }
          return void 0;
        });
      }
      function chainify(fn) {
        return function() {
          var args = [this.value];
          for (var i = 0; i < arguments.length; i++) {
            args[i + 1] = arguments[i];
          }
          return new Chain(fn.apply(fn, args));
        };
      }
      Chain.createProxy = function(arg0, arg1) {
        if (typeof arg0 === "string") {
          createProxy(arg0, arg1);
        } else {
          for (var prop in arg0) {
            if (arg0.hasOwnProperty(prop)) {
              createProxy(prop, arg0[prop]);
            }
          }
        }
      };
      Chain.createProxy(math);
      math.on("import", function(name, resolver, path) {
        if (path === void 0) {
          createLazyProxy(name, resolver);
        }
      });
      return Chain;
    }
    exports.name = "Chain";
    exports.path = "type";
    exports.factory = factory;
    exports.math = true;
    exports.lazy = false;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/type/chain/function/chain.js
var require_chain = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/type/chain/function/chain.js"(exports) {
    "use strict";
    function factory(type, config, load, typed) {
      return typed("chain", {
        "": function() {
          return new type.Chain();
        },
        "any": function(value) {
          return new type.Chain(value);
        }
      });
    }
    exports.name = "chain";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/type/chain/index.js
var require_chain2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/type/chain/index.js"(exports, module) {
    module.exports = [
      // type
      require_Chain(),
      // construction function
      require_chain()
    ];
  }
});

// node_modules/mathsteps/node_modules/complex.js/complex.js
var require_complex = __commonJS({
  "node_modules/mathsteps/node_modules/complex.js/complex.js"(exports, module) {
    (function(root) {
      "use strict";
      var P = { "re": 0, "im": 0 };
      Math.cosh = Math.cosh || function(x) {
        return (Math.exp(x) + Math.exp(-x)) * 0.5;
      };
      Math.sinh = Math.sinh || function(x) {
        return (Math.exp(x) - Math.exp(-x)) * 0.5;
      };
      var parser_exit = function() {
        throw SyntaxError("Invalid Param");
      };
      function logHypot(a, b) {
        var _a = Math.abs(a);
        var _b = Math.abs(b);
        if (a === 0) {
          return Math.log(_b);
        }
        if (b === 0) {
          return Math.log(_a);
        }
        if (_a < 3e3 && _b < 3e3) {
          return Math.log(a * a + b * b) * 0.5;
        }
        return Math.log(a / Math.cos(Math.atan2(b, a)));
      }
      var parse = function(a, b) {
        if (a === void 0 || a === null) {
          P["re"] = P["im"] = 0;
        } else if (b !== void 0) {
          P["re"] = a;
          P["im"] = b;
        } else switch (typeof a) {
          case "object":
            if ("im" in a && "re" in a) {
              P["re"] = a["re"];
              P["im"] = a["im"];
            } else if ("abs" in a && "arg" in a) {
              P["re"] = a["abs"] * Math.cos(a["arg"]);
              P["im"] = a["abs"] * Math.sin(a["arg"]);
            } else if ("r" in a && "phi" in a) {
              P["re"] = a["r"] * Math.cos(a["phi"]);
              P["im"] = a["r"] * Math.sin(a["phi"]);
            } else {
              parser_exit();
            }
            break;
          case "string":
            P["im"] = /* void */
            P["re"] = 0;
            var tokens = a.match(/\d+\.?\d*e[+-]?\d+|\d+\.?\d*|\.\d+|./g);
            var plus = 1;
            var minus = 0;
            if (tokens === null) {
              parser_exit();
            }
            for (var i = 0; i < tokens.length; i++) {
              var c = tokens[i];
              if (c === " " || c === "	" || c === "\n") {
              } else if (c === "+") {
                plus++;
              } else if (c === "-") {
                minus++;
              } else if (c === "i" || c === "I") {
                if (plus + minus === 0) {
                  parser_exit();
                }
                if (tokens[i + 1] !== " " && !isNaN(tokens[i + 1])) {
                  P["im"] += parseFloat((minus % 2 ? "-" : "") + tokens[i + 1]);
                  i++;
                } else {
                  P["im"] += parseFloat((minus % 2 ? "-" : "") + "1");
                }
                plus = minus = 0;
              } else {
                if (plus + minus === 0 || isNaN(c)) {
                  parser_exit();
                }
                if (tokens[i + 1] === "i" || tokens[i + 1] === "I") {
                  P["im"] += parseFloat((minus % 2 ? "-" : "") + c);
                  i++;
                } else {
                  P["re"] += parseFloat((minus % 2 ? "-" : "") + c);
                }
                plus = minus = 0;
              }
            }
            if (plus + minus > 0) {
              parser_exit();
            }
            break;
          case "number":
            P["im"] = 0;
            P["re"] = a;
            break;
          default:
            parser_exit();
        }
        if (isNaN(P["re"]) || isNaN(P["im"])) {
        }
      };
      function Complex(a, b) {
        if (!(this instanceof Complex)) {
          return new Complex(a, b);
        }
        parse(a, b);
        this["re"] = P["re"];
        this["im"] = P["im"];
      }
      Complex.prototype = {
        "re": 0,
        "im": 0,
        /**
         * Calculates the sign of a complex number
         *
         * @returns {Complex}
         */
        "sign": function() {
          var abs = this["abs"]();
          return new Complex(
            this["re"] / abs,
            this["im"] / abs
          );
        },
        /**
         * Adds two complex numbers
         *
         * @returns {Complex}
         */
        "add": function(a, b) {
          parse(a, b);
          return new Complex(
            this["re"] + P["re"],
            this["im"] + P["im"]
          );
        },
        /**
         * Subtracts two complex numbers
         *
         * @returns {Complex}
         */
        "sub": function(a, b) {
          parse(a, b);
          return new Complex(
            this["re"] - P["re"],
            this["im"] - P["im"]
          );
        },
        /**
         * Multiplies two complex numbers
         *
         * @returns {Complex}
         */
        "mul": function(a, b) {
          parse(a, b);
          if (P["im"] === 0 && this["im"] === 0) {
            return new Complex(this["re"] * P["re"], 0);
          }
          return new Complex(
            this["re"] * P["re"] - this["im"] * P["im"],
            this["re"] * P["im"] + this["im"] * P["re"]
          );
        },
        /**
         * Divides two complex numbers
         *
         * @returns {Complex}
         */
        "div": function(a, b) {
          parse(a, b);
          a = this["re"];
          b = this["im"];
          var c = P["re"];
          var d = P["im"];
          var t, x;
          if (0 === c && 0 === d) {
            return new Complex(
              a !== 0 ? a / 0 : 0,
              b !== 0 ? b / 0 : 0
            );
          }
          if (0 === d) {
            return new Complex(a / c, b / c);
          }
          if (Math.abs(c) < Math.abs(d)) {
            x = c / d;
            t = c * x + d;
            return new Complex(
              (a * x + b) / t,
              (b * x - a) / t
            );
          } else {
            x = d / c;
            t = d * x + c;
            return new Complex(
              (a + b * x) / t,
              (b - a * x) / t
            );
          }
        },
        /**
         * Calculate the power of two complex numbers
         *
         * @returns {Complex}
         */
        "pow": function(a, b) {
          parse(a, b);
          a = this["re"];
          b = this["im"];
          if (a === 0 && b === 0) {
            return new Complex(0, 0);
          }
          var arg = Math.atan2(b, a);
          var loh = logHypot(a, b);
          if (P["im"] === 0) {
            if (b === 0 && a >= 0) {
              return new Complex(Math.pow(a, P["re"]), 0);
            } else if (a === 0) {
              switch (P["re"] % 4) {
                case 0:
                  return new Complex(Math.pow(b, P["re"]), 0);
                case 1:
                  return new Complex(0, Math.pow(b, P["re"]));
                case 2:
                  return new Complex(-Math.pow(b, P["re"]), 0);
                case 3:
                  return new Complex(0, -Math.pow(b, P["re"]));
              }
            }
          }
          a = Math.exp(P["re"] * loh - P["im"] * arg);
          b = P["im"] * loh + P["re"] * arg;
          return new Complex(
            a * Math.cos(b),
            a * Math.sin(b)
          );
        },
        /**
         * Calculate the complex square root
         *
         * @returns {Complex}
         */
        "sqrt": function() {
          var a = this["re"];
          var b = this["im"];
          var r = this["abs"]();
          var re, im;
          if (a >= 0 && b === 0) {
            return new Complex(Math.sqrt(a), 0);
          }
          if (a >= 0) {
            re = 0.5 * Math.sqrt(2 * (r + a));
          } else {
            re = Math.abs(b) / Math.sqrt(2 * (r - a));
          }
          if (a <= 0) {
            im = 0.5 * Math.sqrt(2 * (r - a));
          } else {
            im = Math.abs(b) / Math.sqrt(2 * (r + a));
          }
          return new Complex(re, b >= 0 ? im : -im);
        },
        /**
         * Calculate the complex exponent
         *
         * @returns {Complex}
         */
        "exp": function() {
          var tmp = Math.exp(this["re"]);
          if (this["im"] === 0) {
          }
          return new Complex(
            tmp * Math.cos(this["im"]),
            tmp * Math.sin(this["im"])
          );
        },
        /**
         * Calculate the natural log
         *
         * @returns {Complex}
         */
        "log": function() {
          var a = this["re"];
          var b = this["im"];
          if (b === 0 && a > 0) {
          }
          return new Complex(
            logHypot(a, b),
            Math.atan2(b, a)
          );
        },
        /**
         * Calculate the magniture of the complex number
         *
         * @returns {number}
         */
        "abs": function() {
          var a = Math.abs(this["re"]);
          var b = Math.abs(this["im"]);
          if (a < 3e3 && b < 3e3) {
            return Math.sqrt(a * a + b * b);
          }
          if (a < b) {
            a = b;
            b = this["re"] / this["im"];
          } else {
            b = this["im"] / this["re"];
          }
          return a * Math.sqrt(1 + b * b);
        },
        /**
         * Calculate the angle of the complex number
         *
         * @returns {number}
         */
        "arg": function() {
          return Math.atan2(this["im"], this["re"]);
        },
        /**
         * Calculate the sine of the complex number
         *
         * @returns {Complex}
         */
        "sin": function() {
          var a = this["re"];
          var b = this["im"];
          return new Complex(
            Math.sin(a) * Math.cosh(b),
            Math.cos(a) * Math.sinh(b)
          );
        },
        /**
         * Calculate the cosine
         *
         * @returns {Complex}
         */
        "cos": function() {
          var a = this["re"];
          var b = this["im"];
          return new Complex(
            Math.cos(a) * Math.cosh(b),
            -Math.sin(a) * Math.sinh(b)
          );
        },
        /**
         * Calculate the tangent
         *
         * @returns {Complex}
         */
        "tan": function() {
          var a = 2 * this["re"];
          var b = 2 * this["im"];
          var d = Math.cos(a) + Math.cosh(b);
          return new Complex(
            Math.sin(a) / d,
            Math.sinh(b) / d
          );
        },
        /**
         * Calculate the cotangent
         *
         * @returns {Complex}
         */
        "cot": function() {
          var a = 2 * this["re"];
          var b = 2 * this["im"];
          var d = Math.cos(a) - Math.cosh(b);
          return new Complex(
            -Math.sin(a) / d,
            Math.sinh(b) / d
          );
        },
        /**
         * Calculate the secant
         *
         * @returns {Complex}
         */
        "sec": function() {
          var a = this["re"];
          var b = this["im"];
          var d = 0.5 * Math.cosh(2 * b) + 0.5 * Math.cos(2 * a);
          return new Complex(
            Math.cos(a) * Math.cosh(b) / d,
            Math.sin(a) * Math.sinh(b) / d
          );
        },
        /**
         * Calculate the cosecans
         *
         * @returns {Complex}
         */
        "csc": function() {
          var a = this["re"];
          var b = this["im"];
          var d = 0.5 * Math.cosh(2 * b) - 0.5 * Math.cos(2 * a);
          return new Complex(
            Math.sin(a) * Math.cosh(b) / d,
            -Math.cos(a) * Math.sinh(b) / d
          );
        },
        /**
         * Calculate the complex arcus sinus
         *
         * @returns {Complex}
         */
        "asin": function() {
          var a = this["re"];
          var b = this["im"];
          var t1 = new Complex(
            b * b - a * a + 1,
            -2 * a * b
          )["sqrt"]();
          var t2 = new Complex(
            t1["re"] - b,
            t1["im"] + a
          )["log"]();
          return new Complex(t2["im"], -t2["re"]);
        },
        /**
         * Calculate the complex arcus cosinus
         *
         * @returns {Complex}
         */
        "acos": function() {
          var a = this["re"];
          var b = this["im"];
          var t1 = new Complex(
            b * b - a * a + 1,
            -2 * a * b
          )["sqrt"]();
          var t2 = new Complex(
            t1["re"] - b,
            t1["im"] + a
          )["log"]();
          return new Complex(Math.PI / 2 - t2["im"], t2["re"]);
        },
        /**
         * Calculate the complex arcus tangent
         *
         * @returns {Complex}
         */
        "atan": function() {
          var a = this["re"];
          var b = this["im"];
          if (a === 0) {
            if (b === 1) {
              return new Complex(0, Infinity);
            }
            if (b === -1) {
              return new Complex(0, -Infinity);
            }
          }
          var d = a * a + (1 - b) * (1 - b);
          var t1 = new Complex(
            (1 - b * b - a * a) / d,
            -2 * a / d
          ).log();
          return new Complex(-0.5 * t1["im"], 0.5 * t1["re"]);
        },
        /**
         * Calculate the complex arcus cotangent
         *
         * @returns {Complex}
         */
        "acot": function() {
          var a = this["re"];
          var b = this["im"];
          if (b === 0) {
            return new Complex(Math.atan2(1, a), 0);
          }
          var d = a * a + b * b;
          return d !== 0 ? new Complex(
            a / d,
            -b / d
          ).atan() : new Complex(
            a !== 0 ? a / 0 : 0,
            b !== 0 ? -b / 0 : 0
          ).atan();
        },
        /**
         * Calculate the complex arcus secant
         *
         * @returns {Complex}
         */
        "asec": function() {
          var a = this["re"];
          var b = this["im"];
          if (a === 0 && b === 0) {
            return new Complex(0, Infinity);
          }
          var d = a * a + b * b;
          return d !== 0 ? new Complex(
            a / d,
            -b / d
          ).acos() : new Complex(
            a !== 0 ? a / 0 : 0,
            b !== 0 ? -b / 0 : 0
          ).acos();
        },
        /**
         * Calculate the complex arcus cosecans
         *
         * @returns {Complex}
         */
        "acsc": function() {
          var a = this["re"];
          var b = this["im"];
          if (a === 0 && b === 0) {
            return new Complex(Math.PI / 2, Infinity);
          }
          var d = a * a + b * b;
          return d !== 0 ? new Complex(
            a / d,
            -b / d
          ).asin() : new Complex(
            a !== 0 ? a / 0 : 0,
            b !== 0 ? -b / 0 : 0
          ).asin();
        },
        /**
         * Calculate the complex sinh
         *
         * @returns {Complex}
         */
        "sinh": function() {
          var a = this["re"];
          var b = this["im"];
          return new Complex(
            Math.sinh(a) * Math.cos(b),
            Math.cosh(a) * Math.sin(b)
          );
        },
        /**
         * Calculate the complex cosh
         *
         * @returns {Complex}
         */
        "cosh": function() {
          var a = this["re"];
          var b = this["im"];
          return new Complex(
            Math.cosh(a) * Math.cos(b),
            Math.sinh(a) * Math.sin(b)
          );
        },
        /**
         * Calculate the complex tanh
         *
         * @returns {Complex}
         */
        "tanh": function() {
          var a = 2 * this["re"];
          var b = 2 * this["im"];
          var d = Math.cosh(a) + Math.cos(b);
          return new Complex(
            Math.sinh(a) / d,
            Math.sin(b) / d
          );
        },
        /**
         * Calculate the complex coth
         *
         * @returns {Complex}
         */
        "coth": function() {
          var a = 2 * this["re"];
          var b = 2 * this["im"];
          var d = Math.cosh(a) - Math.cos(b);
          return new Complex(
            Math.sinh(a) / d,
            -Math.sin(b) / d
          );
        },
        /**
         * Calculate the complex coth
         *
         * @returns {Complex}
         */
        "csch": function() {
          var a = this["re"];
          var b = this["im"];
          var d = Math.cos(2 * b) - Math.cosh(2 * a);
          return new Complex(
            -2 * Math.sinh(a) * Math.cos(b) / d,
            2 * Math.cosh(a) * Math.sin(b) / d
          );
        },
        /**
         * Calculate the complex sech
         *
         * @returns {Complex}
         */
        "sech": function() {
          var a = this["re"];
          var b = this["im"];
          var d = Math.cos(2 * b) + Math.cosh(2 * a);
          return new Complex(
            2 * Math.cosh(a) * Math.cos(b) / d,
            -2 * Math.sinh(a) * Math.sin(b) / d
          );
        },
        /**
         * Calculate the complex asinh
         *
         * @returns {Complex}
         */
        "asinh": function() {
          var tmp = this["im"];
          this["im"] = -this["re"];
          this["re"] = tmp;
          var res = this["asin"]();
          this["re"] = -this["im"];
          this["im"] = tmp;
          tmp = res["re"];
          res["re"] = -res["im"];
          res["im"] = tmp;
          return res;
        },
        /**
         * Calculate the complex asinh
         *
         * @returns {Complex}
         */
        "acosh": function() {
          var tmp;
          var res = this["acos"]();
          if (res["im"] <= 0) {
            tmp = res["re"];
            res["re"] = -res["im"];
            res["im"] = tmp;
          } else {
            tmp = res["im"];
            res["im"] = -res["re"];
            res["re"] = tmp;
          }
          return res;
        },
        /**
         * Calculate the complex atanh
         *
         * @returns {Complex}
         */
        "atanh": function() {
          var a = this["re"];
          var b = this["im"];
          var noIM = a > 1 && b === 0;
          var oneMinus = 1 - a;
          var onePlus = 1 + a;
          var d = oneMinus * oneMinus + b * b;
          var x = d !== 0 ? new Complex(
            (onePlus * oneMinus - b * b) / d,
            (b * oneMinus + onePlus * b) / d
          ) : new Complex(
            a !== -1 ? a / 0 : 0,
            b !== 0 ? b / 0 : 0
          );
          var temp = x["re"];
          x["re"] = logHypot(x["re"], x["im"]) / 2;
          x["im"] = Math.atan2(x["im"], temp) / 2;
          if (noIM) {
            x["im"] = -x["im"];
          }
          return x;
        },
        /**
         * Calculate the complex acoth
         *
         * @returns {Complex}
         */
        "acoth": function() {
          var a = this["re"];
          var b = this["im"];
          if (a === 0 && b === 0) {
            return new Complex(0, Math.PI / 2);
          }
          var d = a * a + b * b;
          return d !== 0 ? new Complex(
            a / d,
            -b / d
          ).atanh() : new Complex(
            a !== 0 ? a / 0 : 0,
            b !== 0 ? -b / 0 : 0
          ).atanh();
        },
        /**
         * Calculate the complex acsch
         *
         * @returns {Complex}
         */
        "acsch": function() {
          var a = this["re"];
          var b = this["im"];
          if (b === 0) {
            return new Complex(
              a !== 0 ? Math.log(a + Math.sqrt(a * a + 1)) : Infinity,
              0
            );
          }
          var d = a * a + b * b;
          return d !== 0 ? new Complex(
            a / d,
            -b / d
          ).asinh() : new Complex(
            a !== 0 ? a / 0 : 0,
            b !== 0 ? -b / 0 : 0
          ).asinh();
        },
        /**
         * Calculate the complex asech
         *
         * @returns {Complex}
         */
        "asech": function() {
          var a = this["re"];
          var b = this["im"];
          if (a === 0 && b === 0) {
            return new Complex(Infinity, 0);
          }
          var d = a * a + b * b;
          return d !== 0 ? new Complex(
            a / d,
            -b / d
          ).acosh() : new Complex(
            a !== 0 ? a / 0 : 0,
            b !== 0 ? -b / 0 : 0
          ).acosh();
        },
        /**
         * Calculate the complex inverse 1/z
         *
         * @returns {Complex}
         */
        "inverse": function() {
          var a = this["re"];
          var b = this["im"];
          var d = a * a + b * b;
          return new Complex(
            a !== 0 ? a / d : 0,
            b !== 0 ? -b / d : 0
          );
        },
        /**
         * Returns the complex conjugate
         *
         * @returns {Complex}
         */
        "conjugate": function() {
          return new Complex(this["re"], -this["im"]);
        },
        /**
         * Gets the negated complex number
         *
         * @returns {Complex}
         */
        "neg": function() {
          return new Complex(-this["re"], -this["im"]);
        },
        /**
         * Ceils the actual complex number
         *
         * @returns {Complex}
         */
        "ceil": function(places) {
          places = Math.pow(10, places || 0);
          return new Complex(
            Math.ceil(this["re"] * places) / places,
            Math.ceil(this["im"] * places) / places
          );
        },
        /**
         * Floors the actual complex number
         *
         * @returns {Complex}
         */
        "floor": function(places) {
          places = Math.pow(10, places || 0);
          return new Complex(
            Math.floor(this["re"] * places) / places,
            Math.floor(this["im"] * places) / places
          );
        },
        /**
         * Ceils the actual complex number
         *
         * @returns {Complex}
         */
        "round": function(places) {
          places = Math.pow(10, places || 0);
          return new Complex(
            Math.round(this["re"] * places) / places,
            Math.round(this["im"] * places) / places
          );
        },
        /**
         * Compares two complex numbers
         *
         * @returns {boolean}
         */
        "equals": function(a, b) {
          parse(a, b);
          return Math.abs(P["re"] - this["re"]) <= Complex["EPSILON"] && Math.abs(P["im"] - this["im"]) <= Complex["EPSILON"];
        },
        /**
         * Clones the actual object
         *
         * @returns {Complex}
         */
        "clone": function() {
          return new Complex(this["re"], this["im"]);
        },
        /**
         * Gets a string of the actual complex number
         *
         * @returns {string}
         */
        "toString": function() {
          var a = this["re"];
          var b = this["im"];
          var ret = "";
          if (isNaN(a) || isNaN(b)) {
            return "NaN";
          }
          if (a !== 0) {
            ret += a;
          }
          if (b !== 0) {
            if (a !== 0) {
              ret += b < 0 ? " - " : " + ";
            } else if (b < 0) {
              ret += "-";
            }
            b = Math.abs(b);
            if (1 !== b) {
              ret += b;
            }
            ret += "i";
          }
          if (!ret)
            return "0";
          return ret;
        },
        /**
         * Returns the actual number as a vector
         *
         * @returns {Array}
         */
        "toVector": function() {
          return [this["re"], this["im"]];
        },
        /**
         * Returns the actual real value of the current object
         *
         * @returns {number|null}
         */
        "valueOf": function() {
          if (this["im"] === 0) {
            return this["re"];
          }
          return null;
        },
        /**
         * Checks if the given complex number is not a number
         *
         * @returns {boolean}
         */
        isNaN: function() {
          return isNaN(this["re"]) || isNaN(this["im"]);
        }
      };
      Complex["ZERO"] = new Complex(0, 0);
      Complex["ONE"] = new Complex(1, 0);
      Complex["I"] = new Complex(0, 1);
      Complex["PI"] = new Complex(Math.PI, 0);
      Complex["E"] = new Complex(Math.E, 0);
      Complex["EPSILON"] = 1e-16;
      if (typeof define === "function" && define["amd"]) {
        define([], function() {
          return Complex;
        });
      } else if (typeof exports === "object") {
        module["exports"] = Complex;
      } else {
        root["Complex"] = Complex;
      }
    })(exports);
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/type/complex/Complex.js
var require_Complex = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/type/complex/Complex.js"(exports) {
    var Complex = require_complex();
    var format = require_number().format;
    var isNumber = require_number().isNumber;
    function factory(type, config, load, typed, math) {
      Complex.prototype.type = "Complex";
      Complex.prototype.isComplex = true;
      Complex.prototype.toJSON = function() {
        return {
          mathjs: "Complex",
          re: this.re,
          im: this.im
        };
      };
      Complex.prototype.toPolar = function() {
        return {
          r: this.abs(),
          phi: this.arg()
        };
      };
      Complex.prototype.format = function(options) {
        var str = "";
        var im = this.im;
        var re = this.re;
        var strRe = format(this.re, options);
        var strIm = format(this.im, options);
        var precision = isNumber(options) ? options : options ? options.precision : null;
        if (precision !== null) {
          var epsilon = Math.pow(10, -precision);
          if (Math.abs(re / im) < epsilon) {
            re = 0;
          }
          if (Math.abs(im / re) < epsilon) {
            im = 0;
          }
        }
        if (im == 0) {
          str = strRe;
        } else if (re == 0) {
          if (im == 1) {
            str = "i";
          } else if (im == -1) {
            str = "-i";
          } else {
            str = strIm + "i";
          }
        } else {
          if (im > 0) {
            if (im == 1) {
              str = strRe + " + i";
            } else {
              str = strRe + " + " + strIm + "i";
            }
          } else {
            if (im == -1) {
              str = strRe + " - i";
            } else {
              str = strRe + " - " + strIm.substring(1) + "i";
            }
          }
        }
        return str;
      };
      Complex.fromPolar = function(args) {
        switch (arguments.length) {
          case 1:
            var arg = arguments[0];
            if (typeof arg === "object") {
              return Complex(arg);
            }
            throw new TypeError("Input has to be an object with r and phi keys.");
          case 2:
            var r = arguments[0], phi = arguments[1];
            if (isNumber(r)) {
              if (phi && phi.isUnit && phi.hasBase("ANGLE")) {
                phi = phi.toNumber("rad");
              }
              if (isNumber(phi)) {
                return new Complex({ r, phi });
              }
              throw new TypeError("Phi is not a number nor an angle unit.");
            } else {
              throw new TypeError("Radius r is not a number.");
            }
          default:
            throw new SyntaxError("Wrong number of arguments in function fromPolar");
        }
      };
      Complex.prototype.valueOf = Complex.prototype.toString;
      Complex.fromJSON = function(json) {
        return new Complex(json);
      };
      Complex.EPSILON = config.epsilon;
      math.on("config", function(curr, prev) {
        if (curr.epsilon !== prev.epsilon) {
          Complex.EPSILON = curr.epsilon;
        }
      });
      return Complex;
    }
    exports.name = "Complex";
    exports.path = "type";
    exports.factory = factory;
    exports.math = true;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/utils/latex.js
var require_latex = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/utils/latex.js"(exports) {
    "use strict";
    exports.symbols = {
      // GREEK LETTERS
      Alpha: "A",
      alpha: "\\alpha",
      Beta: "B",
      beta: "\\beta",
      Gamma: "\\Gamma",
      gamma: "\\gamma",
      Delta: "\\Delta",
      delta: "\\delta",
      Epsilon: "E",
      epsilon: "\\epsilon",
      varepsilon: "\\varepsilon",
      Zeta: "Z",
      zeta: "\\zeta",
      Eta: "H",
      eta: "\\eta",
      Theta: "\\Theta",
      theta: "\\theta",
      vartheta: "\\vartheta",
      Iota: "I",
      iota: "\\iota",
      Kappa: "K",
      kappa: "\\kappa",
      varkappa: "\\varkappa",
      Lambda: "\\Lambda",
      lambda: "\\lambda",
      Mu: "M",
      mu: "\\mu",
      Nu: "N",
      nu: "\\nu",
      Xi: "\\Xi",
      xi: "\\xi",
      Omicron: "O",
      omicron: "o",
      Pi: "\\Pi",
      pi: "\\pi",
      varpi: "\\varpi",
      Rho: "P",
      rho: "\\rho",
      varrho: "\\varrho",
      Sigma: "\\Sigma",
      sigma: "\\sigma",
      varsigma: "\\varsigma",
      Tau: "T",
      tau: "\\tau",
      Upsilon: "\\Upsilon",
      upsilon: "\\upsilon",
      Phi: "\\Phi",
      phi: "\\phi",
      varphi: "\\varphi",
      Chi: "X",
      chi: "\\chi",
      Psi: "\\Psi",
      psi: "\\psi",
      Omega: "\\Omega",
      omega: "\\omega",
      //logic
      "true": "\\mathrm{True}",
      "false": "\\mathrm{False}",
      //other
      i: "i",
      //TODO use \i ??
      inf: "\\infty",
      Inf: "\\infty",
      infinity: "\\infty",
      Infinity: "\\infty",
      oo: "\\infty",
      lim: "\\lim",
      "undefined": "\\mathbf{?}"
    };
    exports.operators = {
      "transpose": "^\\top",
      "factorial": "!",
      "pow": "^",
      "dotPow": ".^\\wedge",
      //TODO find ideal solution
      "unaryPlus": "+",
      "unaryMinus": "-",
      "bitNot": "~",
      //TODO find ideal solution
      "not": "\\neg",
      "multiply": "\\cdot",
      "divide": "\\frac",
      //TODO how to handle that properly?
      "dotMultiply": ".\\cdot",
      //TODO find ideal solution
      "dotDivide": ".:",
      //TODO find ideal solution
      "mod": "\\mod",
      "add": "+",
      "subtract": "-",
      "to": "\\rightarrow",
      "leftShift": "<<",
      "rightArithShift": ">>",
      "rightLogShift": ">>>",
      "equal": "=",
      "unequal": "\\neq",
      "smaller": "<",
      "larger": ">",
      "smallerEq": "\\leq",
      "largerEq": "\\geq",
      "bitAnd": "\\&",
      "bitXor": "\\underline{|}",
      "bitOr": "|",
      "and": "\\wedge",
      "xor": "\\veebar",
      "or": "\\vee"
    };
    exports.defaultTemplate = "\\mathrm{${name}}\\left(${args}\\right)";
    var units = {
      deg: "^\\circ"
    };
    exports.toSymbol = function(name, isUnit) {
      isUnit = typeof isUnit === "undefined" ? false : isUnit;
      if (isUnit) {
        if (units.hasOwnProperty(name)) {
          return units[name];
        }
        return "\\mathrm{" + name + "}";
      }
      if (exports.symbols.hasOwnProperty(name)) {
        return exports.symbols[name];
      } else if (name.indexOf("_") !== -1) {
        var index = name.indexOf("_");
        return exports.toSymbol(name.substring(0, index)) + "_{" + exports.toSymbol(name.substring(index + 1)) + "}";
      }
      return name;
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/type/complex/function/complex.js
var require_complex2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/type/complex/function/complex.js"(exports) {
    "use strict";
    var deepMap = require_deepMap();
    function factory(type, config, load, typed) {
      var latex = require_latex();
      var complex = typed("complex", {
        "": function() {
          return type.Complex.ZERO;
        },
        "number": function(x) {
          return new type.Complex(x, 0);
        },
        "number, number": function(re, im) {
          return new type.Complex(re, im);
        },
        // TODO: this signature should be redundant
        "BigNumber, BigNumber": function(re, im) {
          return new type.Complex(re.toNumber(), im.toNumber());
        },
        "Complex": function(x) {
          return x.clone();
        },
        "string": function(x) {
          return type.Complex(x);
        },
        "Object": function(x) {
          if ("re" in x && "im" in x) {
            return new type.Complex(x.re, x.im);
          }
          if ("r" in x && "phi" in x) {
            return new type.Complex(x);
          }
          throw new Error("Expected object with either properties re and im, or properties r and phi.");
        },
        "Array | Matrix": function(x) {
          return deepMap(x, complex);
        }
      });
      complex.toTex = {
        0: "0",
        1: "\\left(${args[0]}\\right)",
        2: "\\left(\\left(${args[0]}\\right)+" + latex.symbols["i"] + "\\cdot\\left(${args[1]}\\right)\\right)"
      };
      return complex;
    }
    exports.name = "complex";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/type/complex/index.js
var require_complex3 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/type/complex/index.js"(exports, module) {
    module.exports = [
      // type
      require_Complex(),
      // construction function
      require_complex2()
    ];
  }
});

// node_modules/mathsteps/node_modules/fraction.js/fraction.js
var require_fraction = __commonJS({
  "node_modules/mathsteps/node_modules/fraction.js/fraction.js"(exports, module) {
    (function(root) {
      "use strict";
      var MAX_CYCLE_LEN = 2e3;
      var P = {
        "s": 1,
        "n": 0,
        "d": 1
      };
      function createError(name) {
        var errorConstructor = function() {
          var temp = Error.apply(this, arguments);
          temp.name = this.name = name;
          this.stack = temp.stack;
          this.message = temp.message;
        };
        var IntermediateInheritor = function() {
        };
        IntermediateInheritor.prototype = Error.prototype;
        errorConstructor.prototype = new IntermediateInheritor();
        return errorConstructor;
      }
      var DivisionByZero = Fraction["DivisionByZero"] = createError("DivisionByZero");
      var InvalidParameter = Fraction["InvalidParameter"] = createError("InvalidParameter");
      function assign(n, s) {
        if (isNaN(n = parseInt(n, 10))) {
          throwInvalidParam();
        }
        return n * s;
      }
      function throwInvalidParam() {
        throw new InvalidParameter();
      }
      var parse = function(p1, p2) {
        var n = 0, d = 1, s = 1;
        var v = 0, w = 0, x = 0, y = 1, z = 1;
        var A = 0, B = 1;
        var C = 1, D = 1;
        var N = 1e7;
        var M;
        if (p1 === void 0 || p1 === null) {
        } else if (p2 !== void 0) {
          n = p1;
          d = p2;
          s = n * d;
        } else
          switch (typeof p1) {
            case "object": {
              if ("d" in p1 && "n" in p1) {
                n = p1["n"];
                d = p1["d"];
                if ("s" in p1)
                  n *= p1["s"];
              } else if (0 in p1) {
                n = p1[0];
                if (1 in p1)
                  d = p1[1];
              } else {
                throwInvalidParam();
              }
              s = n * d;
              break;
            }
            case "number": {
              if (p1 < 0) {
                s = p1;
                p1 = -p1;
              }
              if (p1 % 1 === 0) {
                n = p1;
              } else if (p1 > 0) {
                if (p1 >= 1) {
                  z = Math.pow(10, Math.floor(1 + Math.log(p1) / Math.LN10));
                  p1 /= z;
                }
                while (B <= N && D <= N) {
                  M = (A + C) / (B + D);
                  if (p1 === M) {
                    if (B + D <= N) {
                      n = A + C;
                      d = B + D;
                    } else if (D > B) {
                      n = C;
                      d = D;
                    } else {
                      n = A;
                      d = B;
                    }
                    break;
                  } else {
                    if (p1 > M) {
                      A += C;
                      B += D;
                    } else {
                      C += A;
                      D += B;
                    }
                    if (B > N) {
                      n = C;
                      d = D;
                    } else {
                      n = A;
                      d = B;
                    }
                  }
                }
                n *= z;
              } else if (isNaN(p1) || isNaN(p2)) {
                d = n = NaN;
              }
              break;
            }
            case "string": {
              B = p1.match(/\d+|./g);
              if (B[A] === "-") {
                s = -1;
                A++;
              } else if (B[A] === "+") {
                A++;
              }
              if (B.length === A + 1) {
                w = assign(B[A++], s);
              } else if (B[A + 1] === "." || B[A] === ".") {
                if (B[A] !== ".") {
                  v = assign(B[A++], s);
                }
                A++;
                if (A + 1 === B.length || B[A + 1] === "(" && B[A + 3] === ")" || B[A + 1] === "'" && B[A + 3] === "'") {
                  w = assign(B[A], s);
                  y = Math.pow(10, B[A].length);
                  A++;
                }
                if (B[A] === "(" && B[A + 2] === ")" || B[A] === "'" && B[A + 2] === "'") {
                  x = assign(B[A + 1], s);
                  z = Math.pow(10, B[A + 1].length) - 1;
                  A += 3;
                }
              } else if (B[A + 1] === "/" || B[A + 1] === ":") {
                w = assign(B[A], s);
                y = assign(B[A + 2], 1);
                A += 3;
              } else if (B[A + 3] === "/" && B[A + 1] === " ") {
                v = assign(B[A], s);
                w = assign(B[A + 2], s);
                y = assign(B[A + 4], 1);
                A += 5;
              }
              if (B.length <= A) {
                d = y * z;
                s = /* void */
                n = x + d * v + z * w;
                break;
              }
            }
            default:
              throwInvalidParam();
          }
        if (d === 0) {
          throw new DivisionByZero();
        }
        P["s"] = s < 0 ? -1 : 1;
        P["n"] = Math.abs(n);
        P["d"] = Math.abs(d);
      };
      var modpow = function(b, e, m) {
        for (var r = 1; e > 0; b = b * b % m, e >>= 1) {
          if (e & 1) {
            r = r * b % m;
          }
        }
        return r;
      };
      var cycleLen = function(n, d) {
        for (; d % 2 === 0; d /= 2) {
        }
        for (; d % 5 === 0; d /= 5) {
        }
        if (d === 1)
          return 0;
        var rem = 10 % d;
        for (var t = 1; rem !== 1; t++) {
          rem = rem * 10 % d;
          if (t > MAX_CYCLE_LEN)
            return 0;
        }
        return t;
      };
      var cycleStart = function(n, d, len) {
        var rem1 = 1;
        var rem2 = modpow(10, len, d);
        for (var t = 0; t < 300; t++) {
          if (rem1 === rem2)
            return t;
          rem1 = rem1 * 10 % d;
          rem2 = rem2 * 10 % d;
        }
        return 0;
      };
      var gcd = function(a, b) {
        if (!a) return b;
        if (!b) return a;
        while (1) {
          a %= b;
          if (!a) return b;
          b %= a;
          if (!b) return a;
        }
      };
      function Fraction(a, b) {
        if (!(this instanceof Fraction)) {
          return new Fraction(a, b);
        }
        parse(a, b);
        if (Fraction["REDUCE"]) {
          a = gcd(P["d"], P["n"]);
        } else {
          a = 1;
        }
        this["s"] = P["s"];
        this["n"] = P["n"] / a;
        this["d"] = P["d"] / a;
      }
      Fraction["REDUCE"] = 1;
      Fraction.prototype = {
        "s": 1,
        "n": 0,
        "d": 1,
        /**
         * Calculates the absolute value
         *
         * Ex: new Fraction(-4).abs() => 4
         **/
        "abs": function() {
          return new Fraction(this["n"], this["d"]);
        },
        /**
         * Inverts the sign of the current fraction
         *
         * Ex: new Fraction(-4).neg() => 4
         **/
        "neg": function() {
          return new Fraction(-this["s"] * this["n"], this["d"]);
        },
        /**
         * Adds two rational numbers
         *
         * Ex: new Fraction({n: 2, d: 3}).add("14.9") => 467 / 30
         **/
        "add": function(a, b) {
          parse(a, b);
          return new Fraction(
            this["s"] * this["n"] * P["d"] + P["s"] * this["d"] * P["n"],
            this["d"] * P["d"]
          );
        },
        /**
         * Subtracts two rational numbers
         *
         * Ex: new Fraction({n: 2, d: 3}).add("14.9") => -427 / 30
         **/
        "sub": function(a, b) {
          parse(a, b);
          return new Fraction(
            this["s"] * this["n"] * P["d"] - P["s"] * this["d"] * P["n"],
            this["d"] * P["d"]
          );
        },
        /**
         * Multiplies two rational numbers
         *
         * Ex: new Fraction("-17.(345)").mul(3) => 5776 / 111
         **/
        "mul": function(a, b) {
          parse(a, b);
          return new Fraction(
            this["s"] * P["s"] * this["n"] * P["n"],
            this["d"] * P["d"]
          );
        },
        /**
         * Divides two rational numbers
         *
         * Ex: new Fraction("-17.(345)").inverse().div(3)
         **/
        "div": function(a, b) {
          parse(a, b);
          return new Fraction(
            this["s"] * P["s"] * this["n"] * P["d"],
            this["d"] * P["n"]
          );
        },
        /**
         * Clones the actual object
         *
         * Ex: new Fraction("-17.(345)").clone()
         **/
        "clone": function() {
          return new Fraction(this);
        },
        /**
         * Calculates the modulo of two rational numbers - a more precise fmod
         *
         * Ex: new Fraction('4.(3)').mod([7, 8]) => (13/3) % (7/8) = (5/6)
         **/
        "mod": function(a, b) {
          if (isNaN(this["n"]) || isNaN(this["d"])) {
            return new Fraction(NaN);
          }
          if (a === void 0) {
            return new Fraction(this["s"] * this["n"] % this["d"], 1);
          }
          parse(a, b);
          if (0 === P["n"] && 0 === this["d"]) {
            Fraction(0, 0);
          }
          return new Fraction(
            this["s"] * P["d"] * this["n"] % (P["n"] * this["d"]),
            P["d"] * this["d"]
          );
        },
        /**
         * Calculates the fractional gcd of two rational numbers
         *
         * Ex: new Fraction(5,8).gcd(3,7) => 1/56
         */
        "gcd": function(a, b) {
          parse(a, b);
          return new Fraction(gcd(P["n"], this["n"]), P["d"] * this["d"] / gcd(P["d"], this["d"]));
        },
        /**
         * Calculates the fractional lcm of two rational numbers
         *
         * Ex: new Fraction(5,8).lcm(3,7) => 15
         */
        "lcm": function(a, b) {
          parse(a, b);
          if (P["n"] === 0 && this["n"] === 0) {
            return new Fraction();
          }
          return new Fraction(P["n"] * this["n"] / gcd(P["n"], this["n"]), gcd(P["d"], this["d"]));
        },
        /**
         * Calculates the ceil of a rational number
         *
         * Ex: new Fraction('4.(3)').ceil() => (5 / 1)
         **/
        "ceil": function(places) {
          places = Math.pow(10, places || 0);
          if (isNaN(this["n"]) || isNaN(this["d"])) {
            return new Fraction(NaN);
          }
          return new Fraction(Math.ceil(places * this["s"] * this["n"] / this["d"]), places);
        },
        /**
         * Calculates the floor of a rational number
         *
         * Ex: new Fraction('4.(3)').floor() => (4 / 1)
         **/
        "floor": function(places) {
          places = Math.pow(10, places || 0);
          if (isNaN(this["n"]) || isNaN(this["d"])) {
            return new Fraction(NaN);
          }
          return new Fraction(Math.floor(places * this["s"] * this["n"] / this["d"]), places);
        },
        /**
         * Rounds a rational numbers
         *
         * Ex: new Fraction('4.(3)').round() => (4 / 1)
         **/
        "round": function(places) {
          places = Math.pow(10, places || 0);
          if (isNaN(this["n"]) || isNaN(this["d"])) {
            return new Fraction(NaN);
          }
          return new Fraction(Math.round(places * this["s"] * this["n"] / this["d"]), places);
        },
        /**
         * Gets the inverse of the fraction, means numerator and denumerator are exchanged
         *
         * Ex: new Fraction([-3, 4]).inverse() => -4 / 3
         **/
        "inverse": function() {
          return new Fraction(this["s"] * this["d"], this["n"]);
        },
        /**
         * Calculates the fraction to some integer exponent
         *
         * Ex: new Fraction(-1,2).pow(-3) => -8
         */
        "pow": function(m) {
          if (m < 0) {
            return new Fraction(Math.pow(this["s"] * this["d"], -m), Math.pow(this["n"], -m));
          } else {
            return new Fraction(Math.pow(this["s"] * this["n"], m), Math.pow(this["d"], m));
          }
        },
        /**
         * Check if two rational numbers are the same
         *
         * Ex: new Fraction(19.6).equals([98, 5]);
         **/
        "equals": function(a, b) {
          parse(a, b);
          return this["s"] * this["n"] * P["d"] === P["s"] * P["n"] * this["d"];
        },
        /**
         * Check if two rational numbers are the same
         *
         * Ex: new Fraction(19.6).equals([98, 5]);
         **/
        "compare": function(a, b) {
          parse(a, b);
          var t = this["s"] * this["n"] * P["d"] - P["s"] * P["n"] * this["d"];
          return (0 < t) - (t < 0);
        },
        /**
         * Check if two rational numbers are divisible
         *
         * Ex: new Fraction(19.6).divisible(1.5);
         */
        "divisible": function(a, b) {
          parse(a, b);
          return !(!(P["n"] * this["d"]) || this["n"] * P["d"] % (P["n"] * this["d"]));
        },
        /**
         * Returns a decimal representation of the fraction
         *
         * Ex: new Fraction("100.'91823'").valueOf() => 100.91823918239183
         **/
        "valueOf": function() {
          return this["s"] * this["n"] / this["d"];
        },
        /**
         * Returns a string-fraction representation of a Fraction object
         *
         * Ex: new Fraction("1.'3'").toFraction() => "4 1/3"
         **/
        "toFraction": function(excludeWhole) {
          var whole, str = "";
          var n = this["n"];
          var d = this["d"];
          if (this["s"] < 0) {
            str += "-";
          }
          if (d === 1) {
            str += n;
          } else {
            if (excludeWhole && (whole = Math.floor(n / d)) > 0) {
              str += whole;
              str += " ";
              n %= d;
            }
            str += n;
            str += "/";
            str += d;
          }
          return str;
        },
        /**
         * Returns a latex representation of a Fraction object
         *
         * Ex: new Fraction("1.'3'").toLatex() => "\frac{4}{3}"
         **/
        "toLatex": function(excludeWhole) {
          var whole, str = "";
          var n = this["n"];
          var d = this["d"];
          if (this["s"] < 0) {
            str += "-";
          }
          if (d === 1) {
            str += n;
          } else {
            if (excludeWhole && (whole = Math.floor(n / d)) > 0) {
              str += whole;
              n %= d;
            }
            str += "\\frac{";
            str += n;
            str += "}{";
            str += d;
            str += "}";
          }
          return str;
        },
        /**
         * Returns an array of continued fraction elements
         *
         * Ex: new Fraction("7/8").toContinued() => [0,1,7]
         */
        "toContinued": function() {
          var t;
          var a = this["n"];
          var b = this["d"];
          var res = [];
          do {
            res.push(Math.floor(a / b));
            t = a % b;
            a = b;
            b = t;
          } while (a !== 1);
          return res;
        },
        /**
         * Creates a string representation of a fraction with all digits
         *
         * Ex: new Fraction("100.'91823'").toString() => "100.(91823)"
         **/
        "toString": function() {
          var g;
          var N = this["n"];
          var D = this["d"];
          if (isNaN(N) || isNaN(D)) {
            return "NaN";
          }
          if (!Fraction["REDUCE"]) {
            g = gcd(N, D);
            N /= g;
            D /= g;
          }
          var p = String(N).split("");
          var t = 0;
          var ret = [~this["s"] ? "" : "-", "", ""];
          var zeros = "";
          var cycLen = cycleLen(N, D);
          var cycOff = cycleStart(N, D, cycLen);
          var j = -1;
          var n = 1;
          var length = 15 + cycLen + cycOff + p.length;
          for (var i = 0; i < length; i++, t *= 10) {
            if (i < p.length) {
              t += Number(p[i]);
            } else {
              n = 2;
              j++;
            }
            if (cycLen > 0) {
              if (j === cycOff) {
                ret[n] += zeros + "(";
                zeros = "";
              } else if (j === cycLen + cycOff) {
                ret[n] += zeros + ")";
                break;
              }
            }
            if (t >= D) {
              ret[n] += zeros + (t / D | 0);
              zeros = "";
              t = t % D;
            } else if (n > 1) {
              zeros += "0";
            } else if (ret[n]) {
              ret[n] += "0";
            }
          }
          ret[0] += ret[1] || "0";
          if (ret[2]) {
            return ret[0] + "." + ret[2];
          }
          return ret[0];
        }
      };
      if (typeof define === "function" && define["amd"]) {
        define([], function() {
          return Fraction;
        });
      } else if (typeof exports === "object") {
        module["exports"] = Fraction;
      } else {
        root["Fraction"] = Fraction;
      }
    })(exports);
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/type/fraction/Fraction.js
var require_Fraction = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/type/fraction/Fraction.js"(exports) {
    var Fraction = require_fraction();
    Fraction.prototype.type = "Fraction";
    Fraction.prototype.isFraction = true;
    Fraction.prototype.toJSON = function() {
      return {
        mathjs: "Fraction",
        n: this.s * this.n,
        d: this.d
      };
    };
    Fraction.fromJSON = function(json) {
      return new Fraction(json);
    };
    function factory(type, config, load, typed) {
      return Fraction;
    }
    exports.name = "Fraction";
    exports.path = "type";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/type/fraction/function/fraction.js
var require_fraction2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/type/fraction/function/fraction.js"(exports) {
    "use strict";
    var deepMap = require_deepMap();
    function factory(type, config, load, typed) {
      var fraction = typed("fraction", {
        "number": function(x) {
          if (!isFinite(x) || isNaN(x)) {
            throw new Error(x + " cannot be represented as a fraction");
          }
          return new type.Fraction(x);
        },
        "string": function(x) {
          return new type.Fraction(x);
        },
        "number, number": function(numerator, denominator) {
          return new type.Fraction(numerator, denominator);
        },
        "BigNumber": function(x) {
          return new type.Fraction(x.toString());
        },
        "Fraction": function(x) {
          return x;
        },
        "Object": function(x) {
          return new type.Fraction(x);
        },
        "Array | Matrix": function(x) {
          return deepMap(x, fraction);
        }
      });
      return fraction;
    }
    exports.name = "fraction";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/type/fraction/index.js
var require_fraction3 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/type/fraction/index.js"(exports, module) {
    module.exports = [
      // type
      require_Fraction(),
      // construction function
      require_fraction2()
    ];
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/utils/types.js
var require_types = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/utils/types.js"(exports) {
    "use strict";
    exports.type = function(x) {
      var type = typeof x;
      if (type === "object") {
        if (x === null) return "null";
        if (x instanceof Boolean) return "boolean";
        if (x instanceof Number) return "number";
        if (x instanceof String) return "string";
        if (Array.isArray(x)) return "Array";
        if (x instanceof Date) return "Date";
        if (x instanceof RegExp) return "RegExp";
        return "Object";
      }
      if (type === "function") return "Function";
      return type;
    };
    exports.isScalar = function(x) {
      return !(x && x.isMatrix || Array.isArray(x));
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/error/DimensionError.js
var require_DimensionError = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/error/DimensionError.js"(exports, module) {
    "use strict";
    function DimensionError(actual, expected, relation) {
      if (!(this instanceof DimensionError)) {
        throw new SyntaxError("Constructor must be called with the new operator");
      }
      this.actual = actual;
      this.expected = expected;
      this.relation = relation;
      this.message = "Dimension mismatch (" + (Array.isArray(actual) ? "[" + actual.join(", ") + "]" : actual) + " " + (this.relation || "!=") + " " + (Array.isArray(expected) ? "[" + expected.join(", ") + "]" : expected) + ")";
      this.stack = new Error().stack;
    }
    DimensionError.prototype = new RangeError();
    DimensionError.prototype.constructor = RangeError;
    DimensionError.prototype.name = "DimensionError";
    DimensionError.prototype.isDimensionError = true;
    module.exports = DimensionError;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/error/IndexError.js
var require_IndexError = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/error/IndexError.js"(exports, module) {
    "use strict";
    function IndexError(index, min, max) {
      if (!(this instanceof IndexError)) {
        throw new SyntaxError("Constructor must be called with the new operator");
      }
      this.index = index;
      if (arguments.length < 3) {
        this.min = 0;
        this.max = min;
      } else {
        this.min = min;
        this.max = max;
      }
      if (this.min !== void 0 && this.index < this.min) {
        this.message = "Index out of range (" + this.index + " < " + this.min + ")";
      } else if (this.max !== void 0 && this.index >= this.max) {
        this.message = "Index out of range (" + this.index + " > " + (this.max - 1) + ")";
      } else {
        this.message = "Index out of range (" + this.index + ")";
      }
      this.stack = new Error().stack;
    }
    IndexError.prototype = new RangeError();
    IndexError.prototype.constructor = RangeError;
    IndexError.prototype.name = "IndexError";
    IndexError.prototype.isIndexError = true;
    module.exports = IndexError;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/utils/array.js
var require_array = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/utils/array.js"(exports) {
    "use strict";
    var number = require_number();
    var string = require_string();
    var object = require_object();
    var types = require_types();
    var DimensionError = require_DimensionError();
    var IndexError = require_IndexError();
    exports.size = function(x) {
      var s = [];
      while (Array.isArray(x)) {
        s.push(x.length);
        x = x[0];
      }
      return s;
    };
    function _validate(array, size, dim) {
      var i;
      var len = array.length;
      if (len != size[dim]) {
        throw new DimensionError(len, size[dim]);
      }
      if (dim < size.length - 1) {
        var dimNext = dim + 1;
        for (i = 0; i < len; i++) {
          var child = array[i];
          if (!Array.isArray(child)) {
            throw new DimensionError(size.length - 1, size.length, "<");
          }
          _validate(array[i], size, dimNext);
        }
      } else {
        for (i = 0; i < len; i++) {
          if (Array.isArray(array[i])) {
            throw new DimensionError(size.length + 1, size.length, ">");
          }
        }
      }
    }
    exports.validate = function(array, size) {
      var isScalar = size.length == 0;
      if (isScalar) {
        if (Array.isArray(array)) {
          throw new DimensionError(array.length, 0);
        }
      } else {
        _validate(array, size, 0);
      }
    };
    exports.validateIndex = function(index, length) {
      if (!number.isNumber(index) || !number.isInteger(index)) {
        throw new TypeError("Index must be an integer (value: " + index + ")");
      }
      if (index < 0 || typeof length === "number" && index >= length) {
        throw new IndexError(index, length);
      }
    };
    exports.UNINITIALIZED = {};
    exports.resize = function(array, size, defaultValue) {
      if (!Array.isArray(array) || !Array.isArray(size)) {
        throw new TypeError("Array expected");
      }
      if (size.length === 0) {
        throw new Error("Resizing to scalar is not supported");
      }
      size.forEach(function(value) {
        if (!number.isNumber(value) || !number.isInteger(value) || value < 0) {
          throw new TypeError("Invalid size, must contain positive integers (size: " + string.format(size) + ")");
        }
      });
      var _defaultValue = defaultValue !== void 0 ? defaultValue : 0;
      _resize(array, size, 0, _defaultValue);
      return array;
    };
    function _resize(array, size, dim, defaultValue) {
      var i;
      var elem;
      var oldLen = array.length;
      var newLen = size[dim];
      var minLen = Math.min(oldLen, newLen);
      array.length = newLen;
      if (dim < size.length - 1) {
        var dimNext = dim + 1;
        for (i = 0; i < minLen; i++) {
          elem = array[i];
          if (!Array.isArray(elem)) {
            elem = [elem];
            array[i] = elem;
          }
          _resize(elem, size, dimNext, defaultValue);
        }
        for (i = minLen; i < newLen; i++) {
          elem = [];
          array[i] = elem;
          _resize(elem, size, dimNext, defaultValue);
        }
      } else {
        for (i = 0; i < minLen; i++) {
          while (Array.isArray(array[i])) {
            array[i] = array[i][0];
          }
        }
        if (defaultValue !== exports.UNINITIALIZED) {
          for (i = minLen; i < newLen; i++) {
            array[i] = defaultValue;
          }
        }
      }
    }
    exports.reshape = function(array, sizes) {
      var flatArray = exports.flatten(array);
      var newArray;
      var product = function(arr) {
        return arr.reduce(function(prev, curr) {
          return prev * curr;
        });
      };
      if (!Array.isArray(array) || !Array.isArray(sizes)) {
        throw new TypeError("Array expected");
      }
      if (sizes.length === 0) {
        throw new DimensionError(0, product(exports.size(array)), "!=");
      }
      try {
        newArray = _reshape(flatArray, sizes);
      } catch (e) {
        if (e instanceof DimensionError) {
          throw new DimensionError(
            product(sizes),
            product(exports.size(array)),
            "!="
          );
        }
        throw e;
      }
      if (flatArray.length > 0) {
        throw new DimensionError(
          product(sizes),
          product(exports.size(array)),
          "!="
        );
      }
      return newArray;
    };
    function _reshape(array, sizes) {
      var accumulator = [];
      var i;
      if (sizes.length === 0) {
        if (array.length === 0) {
          throw new DimensionError(null, null, "!=");
        }
        return array.shift();
      }
      for (i = 0; i < sizes[0]; i += 1) {
        accumulator.push(_reshape(array, sizes.slice(1)));
      }
      return accumulator;
    }
    exports.squeeze = function(array, size) {
      var s = size || exports.size(array);
      while (Array.isArray(array) && array.length === 1) {
        array = array[0];
        s.shift();
      }
      var dims = s.length;
      while (s[dims - 1] === 1) {
        dims--;
      }
      if (dims < s.length) {
        array = _squeeze(array, dims, 0);
        s.length = dims;
      }
      return array;
    };
    function _squeeze(array, dims, dim) {
      var i, ii;
      if (dim < dims) {
        var next = dim + 1;
        for (i = 0, ii = array.length; i < ii; i++) {
          array[i] = _squeeze(array[i], dims, next);
        }
      } else {
        while (Array.isArray(array)) {
          array = array[0];
        }
      }
      return array;
    }
    exports.unsqueeze = function(array, dims, outer, size) {
      var s = size || exports.size(array);
      if (outer) {
        for (var i = 0; i < outer; i++) {
          array = [array];
          s.unshift(1);
        }
      }
      array = _unsqueeze(array, dims, 0);
      while (s.length < dims) {
        s.push(1);
      }
      return array;
    };
    function _unsqueeze(array, dims, dim) {
      var i, ii;
      if (Array.isArray(array)) {
        var next = dim + 1;
        for (i = 0, ii = array.length; i < ii; i++) {
          array[i] = _unsqueeze(array[i], dims, next);
        }
      } else {
        for (var d = dim; d < dims; d++) {
          array = [array];
        }
      }
      return array;
    }
    exports.flatten = function(array) {
      if (!Array.isArray(array)) {
        return array;
      }
      var flat = [];
      array.forEach(function callback(value) {
        if (Array.isArray(value)) {
          value.forEach(callback);
        } else {
          flat.push(value);
        }
      });
      return flat;
    };
    exports.isArray = Array.isArray;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/utils/boolean.js
var require_boolean2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/utils/boolean.js"(exports) {
    "use strict";
    exports.isBoolean = function(value) {
      return typeof value == "boolean";
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/utils/function.js
var require_function = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/utils/function.js"(exports) {
    exports.memoize = function(fn, hasher) {
      return function memoize() {
        if (typeof memoize.cache !== "object") {
          memoize.cache = {};
        }
        var args = [];
        for (var i = 0; i < arguments.length; i++) {
          args[i] = arguments[i];
        }
        var hash = hasher ? hasher(args) : JSON.stringify(args);
        if (!(hash in memoize.cache)) {
          return memoize.cache[hash] = fn.apply(fn, args);
        }
        return memoize.cache[hash];
      };
    };
    exports.maxArgumentCount = function(fn) {
      return Object.keys(fn.signatures || {}).reduce(function(args, signature) {
        var count = (signature.match(/,/g) || []).length + 1;
        return Math.max(args, count);
      }, -1);
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/utils/index.js
var require_utils = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/utils/index.js"(exports) {
    "use strict";
    exports.array = require_array();
    exports["boolean"] = require_boolean2();
    exports["function"] = require_function();
    exports.number = require_number();
    exports.object = require_object();
    exports.string = require_string();
    exports.types = require_types();
    exports.emitter = require_emitter();
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/type/matrix/Matrix.js
var require_Matrix = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/type/matrix/Matrix.js"(exports) {
    "use strict";
    var util = require_utils();
    var string = util.string;
    var isString = string.isString;
    function factory(type, config, load, typed) {
      function Matrix() {
        if (!(this instanceof Matrix)) {
          throw new SyntaxError("Constructor must be called with the new operator");
        }
      }
      Matrix.prototype.type = "Matrix";
      Matrix.prototype.isMatrix = true;
      Matrix.storage = function(format) {
        if (!isString(format)) {
          throw new TypeError("format must be a string value");
        }
        var constructor = Matrix._storage[format];
        if (!constructor) {
          throw new SyntaxError("Unsupported matrix storage format: " + format);
        }
        return constructor;
      };
      Matrix._storage = {};
      Matrix.prototype.storage = function() {
        throw new Error("Cannot invoke storage on a Matrix interface");
      };
      Matrix.prototype.datatype = function() {
        throw new Error("Cannot invoke datatype on a Matrix interface");
      };
      Matrix.prototype.create = function(data, datatype) {
        throw new Error("Cannot invoke create on a Matrix interface");
      };
      Matrix.prototype.subset = function(index, replacement, defaultValue) {
        throw new Error("Cannot invoke subset on a Matrix interface");
      };
      Matrix.prototype.get = function(index) {
        throw new Error("Cannot invoke get on a Matrix interface");
      };
      Matrix.prototype.set = function(index, value, defaultValue) {
        throw new Error("Cannot invoke set on a Matrix interface");
      };
      Matrix.prototype.resize = function(size, defaultValue) {
        throw new Error("Cannot invoke resize on a Matrix interface");
      };
      Matrix.prototype.reshape = function(size, defaultValue) {
        throw new Error("Cannot invoke reshape on a Matrix interface");
      };
      Matrix.prototype.clone = function() {
        throw new Error("Cannot invoke clone on a Matrix interface");
      };
      Matrix.prototype.size = function() {
        throw new Error("Cannot invoke size on a Matrix interface");
      };
      Matrix.prototype.map = function(callback, skipZeros) {
        throw new Error("Cannot invoke map on a Matrix interface");
      };
      Matrix.prototype.forEach = function(callback) {
        throw new Error("Cannot invoke forEach on a Matrix interface");
      };
      Matrix.prototype.toArray = function() {
        throw new Error("Cannot invoke toArray on a Matrix interface");
      };
      Matrix.prototype.valueOf = function() {
        throw new Error("Cannot invoke valueOf on a Matrix interface");
      };
      Matrix.prototype.format = function(options) {
        throw new Error("Cannot invoke format on a Matrix interface");
      };
      Matrix.prototype.toString = function() {
        throw new Error("Cannot invoke toString on a Matrix interface");
      };
      return Matrix;
    }
    exports.name = "Matrix";
    exports.path = "type";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/type/matrix/DenseMatrix.js
var require_DenseMatrix = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/type/matrix/DenseMatrix.js"(exports) {
    "use strict";
    var util = require_utils();
    var DimensionError = require_DimensionError();
    var string = util.string;
    var array = util.array;
    var object = util.object;
    var number = util.number;
    var isArray = Array.isArray;
    var isNumber = number.isNumber;
    var isInteger = number.isInteger;
    var isString = string.isString;
    var validateIndex = array.validateIndex;
    function factory(type, config, load, typed) {
      var Matrix = load(require_Matrix());
      function DenseMatrix(data, datatype) {
        if (!(this instanceof DenseMatrix))
          throw new SyntaxError("Constructor must be called with the new operator");
        if (datatype && !isString(datatype))
          throw new Error("Invalid datatype: " + datatype);
        if (data && data.isMatrix === true) {
          if (data.type === "DenseMatrix") {
            this._data = object.clone(data._data);
            this._size = object.clone(data._size);
            this._datatype = datatype || data._datatype;
          } else {
            this._data = data.toArray();
            this._size = data.size();
            this._datatype = datatype || data._datatype;
          }
        } else if (data && isArray(data.data) && isArray(data.size)) {
          this._data = data.data;
          this._size = data.size;
          this._datatype = datatype || data.datatype;
        } else if (isArray(data)) {
          this._data = preprocess(data);
          this._size = array.size(this._data);
          array.validate(this._data, this._size);
          this._datatype = datatype;
        } else if (data) {
          throw new TypeError("Unsupported type of data (" + util.types.type(data) + ")");
        } else {
          this._data = [];
          this._size = [0];
          this._datatype = datatype;
        }
      }
      DenseMatrix.prototype = new Matrix();
      DenseMatrix.prototype.type = "DenseMatrix";
      DenseMatrix.prototype.isDenseMatrix = true;
      DenseMatrix.prototype.storage = function() {
        return "dense";
      };
      DenseMatrix.prototype.datatype = function() {
        return this._datatype;
      };
      DenseMatrix.prototype.create = function(data, datatype) {
        return new DenseMatrix(data, datatype);
      };
      DenseMatrix.prototype.subset = function(index, replacement, defaultValue) {
        switch (arguments.length) {
          case 1:
            return _get(this, index);
          case 2:
          case 3:
            return _set(this, index, replacement, defaultValue);
          default:
            throw new SyntaxError("Wrong number of arguments");
        }
      };
      DenseMatrix.prototype.get = function(index) {
        if (!isArray(index))
          throw new TypeError("Array expected");
        if (index.length != this._size.length)
          throw new DimensionError(index.length, this._size.length);
        for (var x = 0; x < index.length; x++)
          validateIndex(index[x], this._size[x]);
        var data = this._data;
        for (var i = 0, ii = index.length; i < ii; i++) {
          var index_i = index[i];
          validateIndex(index_i, data.length);
          data = data[index_i];
        }
        return data;
      };
      DenseMatrix.prototype.set = function(index, value, defaultValue) {
        if (!isArray(index))
          throw new TypeError("Array expected");
        if (index.length < this._size.length)
          throw new DimensionError(index.length, this._size.length, "<");
        var i, ii, index_i;
        var size = index.map(function(i2) {
          return i2 + 1;
        });
        _fit(this, size, defaultValue);
        var data = this._data;
        for (i = 0, ii = index.length - 1; i < ii; i++) {
          index_i = index[i];
          validateIndex(index_i, data.length);
          data = data[index_i];
        }
        index_i = index[index.length - 1];
        validateIndex(index_i, data.length);
        data[index_i] = value;
        return this;
      };
      function _get(matrix, index) {
        if (!index || index.isIndex !== true) {
          throw new TypeError("Invalid index");
        }
        var isScalar = index.isScalar();
        if (isScalar) {
          return matrix.get(index.min());
        } else {
          var size = index.size();
          if (size.length != matrix._size.length) {
            throw new DimensionError(size.length, matrix._size.length);
          }
          var min = index.min();
          var max = index.max();
          for (var i = 0, ii = matrix._size.length; i < ii; i++) {
            validateIndex(min[i], matrix._size[i]);
            validateIndex(max[i], matrix._size[i]);
          }
          return new DenseMatrix(_getSubmatrix(matrix._data, index, size.length, 0), matrix._datatype);
        }
      }
      function _getSubmatrix(data, index, dims, dim) {
        var last = dim == dims - 1;
        var range = index.dimension(dim);
        if (last) {
          return range.map(function(i) {
            return data[i];
          }).valueOf();
        } else {
          return range.map(function(i) {
            var child = data[i];
            return _getSubmatrix(child, index, dims, dim + 1);
          }).valueOf();
        }
      }
      function _set(matrix, index, submatrix, defaultValue) {
        if (!index || index.isIndex !== true) {
          throw new TypeError("Invalid index");
        }
        var iSize = index.size(), isScalar = index.isScalar();
        var sSize;
        if (submatrix && submatrix.isMatrix === true) {
          sSize = submatrix.size();
          submatrix = submatrix.valueOf();
        } else {
          sSize = array.size(submatrix);
        }
        if (isScalar) {
          if (sSize.length !== 0) {
            throw new TypeError("Scalar expected");
          }
          matrix.set(index.min(), submatrix, defaultValue);
        } else {
          if (iSize.length < matrix._size.length) {
            throw new DimensionError(iSize.length, matrix._size.length, "<");
          }
          if (sSize.length < iSize.length) {
            var i = 0;
            var outer = 0;
            while (iSize[i] === 1 && sSize[i] === 1) {
              i++;
            }
            while (iSize[i] === 1) {
              outer++;
              i++;
            }
            submatrix = array.unsqueeze(submatrix, iSize.length, outer, sSize);
          }
          if (!object.deepEqual(iSize, sSize)) {
            throw new DimensionError(iSize, sSize, ">");
          }
          var size = index.max().map(function(i2) {
            return i2 + 1;
          });
          _fit(matrix, size, defaultValue);
          var dims = iSize.length, dim = 0;
          _setSubmatrix(matrix._data, index, submatrix, dims, dim);
        }
        return matrix;
      }
      function _setSubmatrix(data, index, submatrix, dims, dim) {
        var last = dim == dims - 1, range = index.dimension(dim);
        if (last) {
          range.forEach(function(dataIndex, subIndex) {
            validateIndex(dataIndex);
            data[dataIndex] = submatrix[subIndex[0]];
          });
        } else {
          range.forEach(function(dataIndex, subIndex) {
            validateIndex(dataIndex);
            _setSubmatrix(data[dataIndex], index, submatrix[subIndex[0]], dims, dim + 1);
          });
        }
      }
      DenseMatrix.prototype.resize = function(size, defaultValue, copy) {
        if (!isArray(size))
          throw new TypeError("Array expected");
        var m = copy ? this.clone() : this;
        return _resize(m, size, defaultValue);
      };
      var _resize = function(matrix, size, defaultValue) {
        if (size.length === 0) {
          var v = matrix._data;
          while (isArray(v)) {
            v = v[0];
          }
          return v;
        }
        matrix._size = size.slice(0);
        matrix._data = array.resize(matrix._data, matrix._size, defaultValue);
        return matrix;
      };
      DenseMatrix.prototype.reshape = function(size, copy) {
        var m = copy ? this.clone() : this;
        m._data = array.reshape(m._data, size);
        m._size = size.slice(0);
        return m;
      };
      function _fit(matrix, size, defaultValue) {
        var newSize = matrix._size.slice(0), changed = false;
        while (newSize.length < size.length) {
          newSize.push(0);
          changed = true;
        }
        for (var i = 0, ii = size.length; i < ii; i++) {
          if (size[i] > newSize[i]) {
            newSize[i] = size[i];
            changed = true;
          }
        }
        if (changed) {
          _resize(matrix, newSize, defaultValue);
        }
      }
      DenseMatrix.prototype.clone = function() {
        var m = new DenseMatrix({
          data: object.clone(this._data),
          size: object.clone(this._size),
          datatype: this._datatype
        });
        return m;
      };
      DenseMatrix.prototype.size = function() {
        return this._size.slice(0);
      };
      DenseMatrix.prototype.map = function(callback) {
        var me = this;
        var recurse = function(value, index) {
          if (isArray(value)) {
            return value.map(function(child, i) {
              return recurse(child, index.concat(i));
            });
          } else {
            return callback(value, index, me);
          }
        };
        return new DenseMatrix({
          data: recurse(this._data, []),
          size: object.clone(this._size),
          datatype: this._datatype
        });
      };
      DenseMatrix.prototype.forEach = function(callback) {
        var me = this;
        var recurse = function(value, index) {
          if (isArray(value)) {
            value.forEach(function(child, i) {
              recurse(child, index.concat(i));
            });
          } else {
            callback(value, index, me);
          }
        };
        recurse(this._data, []);
      };
      DenseMatrix.prototype.toArray = function() {
        return object.clone(this._data);
      };
      DenseMatrix.prototype.valueOf = function() {
        return this._data;
      };
      DenseMatrix.prototype.format = function(options) {
        return string.format(this._data, options);
      };
      DenseMatrix.prototype.toString = function() {
        return string.format(this._data);
      };
      DenseMatrix.prototype.toJSON = function() {
        return {
          mathjs: "DenseMatrix",
          data: this._data,
          size: this._size,
          datatype: this._datatype
        };
      };
      DenseMatrix.prototype.diagonal = function(k) {
        if (k) {
          if (k.isBigNumber === true)
            k = k.toNumber();
          if (!isNumber(k) || !isInteger(k)) {
            throw new TypeError("The parameter k must be an integer number");
          }
        } else {
          k = 0;
        }
        var kSuper = k > 0 ? k : 0;
        var kSub = k < 0 ? -k : 0;
        var rows = this._size[0];
        var columns = this._size[1];
        var n = Math.min(rows - kSub, columns - kSuper);
        var data = [];
        for (var i = 0; i < n; i++) {
          data[i] = this._data[i + kSub][i + kSuper];
        }
        return new DenseMatrix({
          data,
          size: [n],
          datatype: this._datatype
        });
      };
      DenseMatrix.diagonal = function(size, value, k, defaultValue, datatype) {
        if (!isArray(size))
          throw new TypeError("Array expected, size parameter");
        if (size.length !== 2)
          throw new Error("Only two dimensions matrix are supported");
        size = size.map(function(s) {
          if (s && s.isBigNumber === true) {
            s = s.toNumber();
          }
          if (!isNumber(s) || !isInteger(s) || s < 1) {
            throw new Error("Size values must be positive integers");
          }
          return s;
        });
        if (k) {
          if (k && k.isBigNumber === true)
            k = k.toNumber();
          if (!isNumber(k) || !isInteger(k)) {
            throw new TypeError("The parameter k must be an integer number");
          }
        } else {
          k = 0;
        }
        if (defaultValue && isString(datatype)) {
          defaultValue = typed.convert(defaultValue, datatype);
        }
        var kSuper = k > 0 ? k : 0;
        var kSub = k < 0 ? -k : 0;
        var rows = size[0];
        var columns = size[1];
        var n = Math.min(rows - kSub, columns - kSuper);
        var _value;
        if (isArray(value)) {
          if (value.length !== n) {
            throw new Error("Invalid value array length");
          }
          _value = function(i) {
            return value[i];
          };
        } else if (value && value.isMatrix === true) {
          var ms = value.size();
          if (ms.length !== 1 || ms[0] !== n) {
            throw new Error("Invalid matrix length");
          }
          _value = function(i) {
            return value.get([i]);
          };
        } else {
          _value = function() {
            return value;
          };
        }
        if (!defaultValue) {
          defaultValue = _value(0) && _value(0).isBigNumber === true ? new type.BigNumber(0) : 0;
        }
        var data = [];
        if (size.length > 0) {
          data = array.resize(data, size, defaultValue);
          for (var d = 0; d < n; d++) {
            data[d + kSub][d + kSuper] = _value(d);
          }
        }
        return new DenseMatrix({
          data,
          size: [rows, columns]
        });
      };
      DenseMatrix.fromJSON = function(json) {
        return new DenseMatrix(json);
      };
      DenseMatrix.prototype.swapRows = function(i, j) {
        if (!isNumber(i) || !isInteger(i) || !isNumber(j) || !isInteger(j)) {
          throw new Error("Row index must be positive integers");
        }
        if (this._size.length !== 2) {
          throw new Error("Only two dimensional matrix is supported");
        }
        validateIndex(i, this._size[0]);
        validateIndex(j, this._size[0]);
        DenseMatrix._swapRows(i, j, this._data);
        return this;
      };
      DenseMatrix._swapRows = function(i, j, data) {
        var vi = data[i];
        data[i] = data[j];
        data[j] = vi;
      };
      function preprocess(data) {
        for (var i = 0, ii = data.length; i < ii; i++) {
          var elem = data[i];
          if (isArray(elem)) {
            data[i] = preprocess(elem);
          } else if (elem && elem.isMatrix === true) {
            data[i] = preprocess(elem.valueOf());
          }
        }
        return data;
      }
      type.Matrix._storage.dense = DenseMatrix;
      type.Matrix._storage["default"] = DenseMatrix;
      return DenseMatrix;
    }
    exports.name = "DenseMatrix";
    exports.path = "type";
    exports.factory = factory;
    exports.lazy = false;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/utils/bignumber/nearlyEqual.js
var require_nearlyEqual = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/utils/bignumber/nearlyEqual.js"(exports, module) {
    "use strict";
    module.exports = function nearlyEqual(x, y, epsilon) {
      if (epsilon == null) {
        return x.eq(y);
      }
      if (x.eq(y)) {
        return true;
      }
      if (x.isNaN() || y.isNaN()) {
        return false;
      }
      if (x.isFinite() && y.isFinite()) {
        var diff = x.minus(y).abs();
        if (diff.isZero()) {
          return true;
        } else {
          var max = x.constructor.max(x.abs(), y.abs());
          return diff.lte(max.times(epsilon));
        }
      }
      return false;
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/relational/equalScalar.js
var require_equalScalar = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/relational/equalScalar.js"(exports) {
    "use strict";
    var nearlyEqual = require_number().nearlyEqual;
    var bigNearlyEqual = require_nearlyEqual();
    function factory(type, config, load, typed) {
      var equalScalar = typed("equalScalar", {
        "boolean, boolean": function(x, y) {
          return x === y;
        },
        "number, number": function(x, y) {
          return x === y || nearlyEqual(x, y, config.epsilon);
        },
        "BigNumber, BigNumber": function(x, y) {
          return x.eq(y) || bigNearlyEqual(x, y, config.epsilon);
        },
        "Fraction, Fraction": function(x, y) {
          return x.equals(y);
        },
        "Complex, Complex": function(x, y) {
          return x.equals(y);
        },
        "Unit, Unit": function(x, y) {
          if (!x.equalBase(y)) {
            throw new Error("Cannot compare units with different base");
          }
          return equalScalar(x.value, y.value);
        },
        "string, string": function(x, y) {
          return x === y;
        }
      });
      return equalScalar;
    }
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/type/matrix/SparseMatrix.js
var require_SparseMatrix = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/type/matrix/SparseMatrix.js"(exports) {
    "use strict";
    var util = require_utils();
    var DimensionError = require_DimensionError();
    var array = util.array;
    var object = util.object;
    var string = util.string;
    var number = util.number;
    var isArray = Array.isArray;
    var isNumber = number.isNumber;
    var isInteger = number.isInteger;
    var isString = string.isString;
    var validateIndex = array.validateIndex;
    function factory(type, config, load, typed) {
      var Matrix = load(require_Matrix());
      var equalScalar = load(require_equalScalar());
      function SparseMatrix(data, datatype) {
        if (!(this instanceof SparseMatrix))
          throw new SyntaxError("Constructor must be called with the new operator");
        if (datatype && !isString(datatype))
          throw new Error("Invalid datatype: " + datatype);
        if (data && data.isMatrix === true) {
          _createFromMatrix(this, data, datatype);
        } else if (data && isArray(data.index) && isArray(data.ptr) && isArray(data.size)) {
          this._values = data.values;
          this._index = data.index;
          this._ptr = data.ptr;
          this._size = data.size;
          this._datatype = datatype || data.datatype;
        } else if (isArray(data)) {
          _createFromArray(this, data, datatype);
        } else if (data) {
          throw new TypeError("Unsupported type of data (" + util.types.type(data) + ")");
        } else {
          this._values = [];
          this._index = [];
          this._ptr = [0];
          this._size = [0, 0];
          this._datatype = datatype;
        }
      }
      var _createFromMatrix = function(matrix, source, datatype) {
        if (source.type === "SparseMatrix") {
          matrix._values = source._values ? object.clone(source._values) : void 0;
          matrix._index = object.clone(source._index);
          matrix._ptr = object.clone(source._ptr);
          matrix._size = object.clone(source._size);
          matrix._datatype = datatype || source._datatype;
        } else {
          _createFromArray(matrix, source.valueOf(), datatype || source._datatype);
        }
      };
      var _createFromArray = function(matrix, data, datatype) {
        matrix._values = [];
        matrix._index = [];
        matrix._ptr = [];
        matrix._datatype = datatype;
        var rows = data.length;
        var columns = 0;
        var eq = equalScalar;
        var zero = 0;
        if (isString(datatype)) {
          eq = typed.find(equalScalar, [datatype, datatype]) || equalScalar;
          zero = typed.convert(0, datatype);
        }
        if (rows > 0) {
          var j = 0;
          do {
            matrix._ptr.push(matrix._index.length);
            for (var i = 0; i < rows; i++) {
              var row = data[i];
              if (isArray(row)) {
                if (j === 0 && columns < row.length)
                  columns = row.length;
                if (j < row.length) {
                  var v = row[j];
                  if (!eq(v, zero)) {
                    matrix._values.push(v);
                    matrix._index.push(i);
                  }
                }
              } else {
                if (j === 0 && columns < 1)
                  columns = 1;
                if (!eq(row, zero)) {
                  matrix._values.push(row);
                  matrix._index.push(i);
                }
              }
            }
            j++;
          } while (j < columns);
        }
        matrix._ptr.push(matrix._index.length);
        matrix._size = [rows, columns];
      };
      SparseMatrix.prototype = new Matrix();
      SparseMatrix.prototype.type = "SparseMatrix";
      SparseMatrix.prototype.isSparseMatrix = true;
      SparseMatrix.prototype.storage = function() {
        return "sparse";
      };
      SparseMatrix.prototype.datatype = function() {
        return this._datatype;
      };
      SparseMatrix.prototype.create = function(data, datatype) {
        return new SparseMatrix(data, datatype);
      };
      SparseMatrix.prototype.density = function() {
        var rows = this._size[0];
        var columns = this._size[1];
        return rows !== 0 && columns !== 0 ? this._index.length / (rows * columns) : 0;
      };
      SparseMatrix.prototype.subset = function(index, replacement, defaultValue) {
        if (!this._values)
          throw new Error("Cannot invoke subset on a Pattern only matrix");
        switch (arguments.length) {
          case 1:
            return _getsubset(this, index);
          case 2:
          case 3:
            return _setsubset(this, index, replacement, defaultValue);
          default:
            throw new SyntaxError("Wrong number of arguments");
        }
      };
      var _getsubset = function(matrix, idx) {
        if (!idx || idx.isIndex !== true) {
          throw new TypeError("Invalid index");
        }
        var isScalar = idx.isScalar();
        if (isScalar) {
          return matrix.get(idx.min());
        }
        var size = idx.size();
        if (size.length != matrix._size.length) {
          throw new DimensionError(size.length, matrix._size.length);
        }
        var i, ii, k, kk;
        var min = idx.min();
        var max = idx.max();
        for (i = 0, ii = matrix._size.length; i < ii; i++) {
          validateIndex(min[i], matrix._size[i]);
          validateIndex(max[i], matrix._size[i]);
        }
        var mvalues = matrix._values;
        var mindex = matrix._index;
        var mptr = matrix._ptr;
        var rows = idx.dimension(0);
        var columns = idx.dimension(1);
        var w = [];
        var pv = [];
        rows.forEach(function(i2, r) {
          pv[i2] = r[0];
          w[i2] = true;
        });
        var values = mvalues ? [] : void 0;
        var index = [];
        var ptr = [];
        columns.forEach(function(j) {
          ptr.push(index.length);
          for (k = mptr[j], kk = mptr[j + 1]; k < kk; k++) {
            i = mindex[k];
            if (w[i] === true) {
              index.push(pv[i]);
              if (values)
                values.push(mvalues[k]);
            }
          }
        });
        ptr.push(index.length);
        return new SparseMatrix({
          values,
          index,
          ptr,
          size,
          datatype: matrix._datatype
        });
      };
      var _setsubset = function(matrix, index, submatrix, defaultValue) {
        if (!index || index.isIndex !== true) {
          throw new TypeError("Invalid index");
        }
        var iSize = index.size(), isScalar = index.isScalar();
        var sSize;
        if (submatrix && submatrix.isMatrix === true) {
          sSize = submatrix.size();
          submatrix = submatrix.toArray();
        } else {
          sSize = array.size(submatrix);
        }
        if (isScalar) {
          if (sSize.length !== 0) {
            throw new TypeError("Scalar expected");
          }
          matrix.set(index.min(), submatrix, defaultValue);
        } else {
          if (iSize.length !== 1 && iSize.length !== 2) {
            throw new DimensionError(iSize.length, matrix._size.length, "<");
          }
          if (sSize.length < iSize.length) {
            var i = 0;
            var outer = 0;
            while (iSize[i] === 1 && sSize[i] === 1) {
              i++;
            }
            while (iSize[i] === 1) {
              outer++;
              i++;
            }
            submatrix = array.unsqueeze(submatrix, iSize.length, outer, sSize);
          }
          if (!object.deepEqual(iSize, sSize)) {
            throw new DimensionError(iSize, sSize, ">");
          }
          var x0 = index.min()[0];
          var y0 = index.min()[1];
          var m = sSize[0];
          var n = sSize[1];
          for (var x = 0; x < m; x++) {
            for (var y = 0; y < n; y++) {
              var v = submatrix[x][y];
              matrix.set([x + x0, y + y0], v, defaultValue);
            }
          }
        }
        return matrix;
      };
      SparseMatrix.prototype.get = function(index) {
        if (!isArray(index))
          throw new TypeError("Array expected");
        if (index.length != this._size.length)
          throw new DimensionError(index.length, this._size.length);
        if (!this._values)
          throw new Error("Cannot invoke get on a Pattern only matrix");
        var i = index[0];
        var j = index[1];
        validateIndex(i, this._size[0]);
        validateIndex(j, this._size[1]);
        var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index);
        if (k < this._ptr[j + 1] && this._index[k] === i)
          return this._values[k];
        return 0;
      };
      SparseMatrix.prototype.set = function(index, v, defaultValue) {
        if (!isArray(index))
          throw new TypeError("Array expected");
        if (index.length != this._size.length)
          throw new DimensionError(index.length, this._size.length);
        if (!this._values)
          throw new Error("Cannot invoke set on a Pattern only matrix");
        var i = index[0];
        var j = index[1];
        var rows = this._size[0];
        var columns = this._size[1];
        var eq = equalScalar;
        var zero = 0;
        if (isString(this._datatype)) {
          eq = typed.find(equalScalar, [this._datatype, this._datatype]) || equalScalar;
          zero = typed.convert(0, this._datatype);
        }
        if (i > rows - 1 || j > columns - 1) {
          _resize(this, Math.max(i + 1, rows), Math.max(j + 1, columns), defaultValue);
          rows = this._size[0];
          columns = this._size[1];
        }
        validateIndex(i, rows);
        validateIndex(j, columns);
        var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index);
        if (k < this._ptr[j + 1] && this._index[k] === i) {
          if (!eq(v, zero)) {
            this._values[k] = v;
          } else {
            _remove(k, j, this._values, this._index, this._ptr);
          }
        } else {
          _insert(k, i, j, v, this._values, this._index, this._ptr);
        }
        return this;
      };
      var _getValueIndex = function(i, top, bottom, index) {
        if (bottom - top === 0)
          return bottom;
        for (var r = top; r < bottom; r++) {
          if (index[r] === i)
            return r;
        }
        return top;
      };
      var _remove = function(k, j, values, index, ptr) {
        values.splice(k, 1);
        index.splice(k, 1);
        for (var x = j + 1; x < ptr.length; x++)
          ptr[x]--;
      };
      var _insert = function(k, i, j, v, values, index, ptr) {
        values.splice(k, 0, v);
        index.splice(k, 0, i);
        for (var x = j + 1; x < ptr.length; x++)
          ptr[x]++;
      };
      SparseMatrix.prototype.resize = function(size, defaultValue, copy) {
        if (!isArray(size))
          throw new TypeError("Array expected");
        if (size.length !== 2)
          throw new Error("Only two dimensions matrix are supported");
        size.forEach(function(value) {
          if (!number.isNumber(value) || !number.isInteger(value) || value < 0) {
            throw new TypeError("Invalid size, must contain positive integers (size: " + string.format(size) + ")");
          }
        });
        var m = copy ? this.clone() : this;
        return _resize(m, size[0], size[1], defaultValue);
      };
      var _resize = function(matrix, rows, columns, defaultValue) {
        var value = defaultValue || 0;
        var eq = equalScalar;
        var zero = 0;
        if (isString(matrix._datatype)) {
          eq = typed.find(equalScalar, [matrix._datatype, matrix._datatype]) || equalScalar;
          zero = typed.convert(0, matrix._datatype);
          value = typed.convert(value, matrix._datatype);
        }
        var ins = !eq(value, zero);
        var r = matrix._size[0];
        var c = matrix._size[1];
        var i, j, k;
        if (columns > c) {
          for (j = c; j < columns; j++) {
            matrix._ptr[j] = matrix._values.length;
            if (ins) {
              for (i = 0; i < r; i++) {
                matrix._values.push(value);
                matrix._index.push(i);
              }
            }
          }
          matrix._ptr[columns] = matrix._values.length;
        } else if (columns < c) {
          matrix._ptr.splice(columns + 1, c - columns);
          matrix._values.splice(matrix._ptr[columns], matrix._values.length);
          matrix._index.splice(matrix._ptr[columns], matrix._index.length);
        }
        c = columns;
        if (rows > r) {
          if (ins) {
            var n = 0;
            for (j = 0; j < c; j++) {
              matrix._ptr[j] = matrix._ptr[j] + n;
              k = matrix._ptr[j + 1] + n;
              var p = 0;
              for (i = r; i < rows; i++, p++) {
                matrix._values.splice(k + p, 0, value);
                matrix._index.splice(k + p, 0, i);
                n++;
              }
            }
            matrix._ptr[c] = matrix._values.length;
          }
        } else if (rows < r) {
          var d = 0;
          for (j = 0; j < c; j++) {
            matrix._ptr[j] = matrix._ptr[j] - d;
            var k0 = matrix._ptr[j];
            var k1 = matrix._ptr[j + 1] - d;
            for (k = k0; k < k1; k++) {
              i = matrix._index[k];
              if (i > rows - 1) {
                matrix._values.splice(k, 1);
                matrix._index.splice(k, 1);
                d++;
              }
            }
          }
          matrix._ptr[j] = matrix._values.length;
        }
        matrix._size[0] = rows;
        matrix._size[1] = columns;
        return matrix;
      };
      SparseMatrix.prototype.reshape = function(size, copy) {
        if (!isArray(size))
          throw new TypeError("Array expected");
        if (size.length !== 2)
          throw new Error("Sparse matrices can only be reshaped in two dimensions");
        size.forEach(function(value) {
          if (!number.isNumber(value) || !number.isInteger(value) || value < 0) {
            throw new TypeError("Invalid size, must contain positive integers (size: " + string.format(size) + ")");
          }
        });
        if (this._size[0] * this._size[1] !== size[0] * size[1]) {
          throw new Error("Reshaping sparse matrix will result in the wrong number of elements");
        }
        var m = copy ? this.clone() : this;
        if (this._size[0] === size[0] && this._size[1] === size[1]) {
          return m;
        }
        var colIndex = [];
        for (var i = 0; i < m._ptr.length; i++) {
          for (var j = 0; j < m._ptr[i + 1] - m._ptr[i]; j++) {
            colIndex.push(i);
          }
        }
        var values = m._values.slice();
        var rowIndex = m._index.slice();
        for (var i = 0; i < m._index.length; i++) {
          var r1 = rowIndex[i];
          var c1 = colIndex[i];
          var flat = r1 * m._size[1] + c1;
          colIndex[i] = flat % size[1];
          rowIndex[i] = Math.floor(flat / size[1]);
        }
        m._values.length = 0;
        m._index.length = 0;
        m._ptr.length = size[1] + 1;
        m._size = size.slice();
        for (var i = 0; i < m._ptr.length; i++) {
          m._ptr[i] = 0;
        }
        for (var h = 0; h < values.length; h++) {
          var i = rowIndex[h];
          var j = colIndex[h];
          var v = values[h];
          var k = _getValueIndex(i, m._ptr[j], m._ptr[j + 1], m._index);
          _insert(k, i, j, v, m._values, m._index, m._ptr);
        }
        return m;
      };
      SparseMatrix.prototype.clone = function() {
        var m = new SparseMatrix({
          values: this._values ? object.clone(this._values) : void 0,
          index: object.clone(this._index),
          ptr: object.clone(this._ptr),
          size: object.clone(this._size),
          datatype: this._datatype
        });
        return m;
      };
      SparseMatrix.prototype.size = function() {
        return this._size.slice(0);
      };
      SparseMatrix.prototype.map = function(callback, skipZeros) {
        if (!this._values)
          throw new Error("Cannot invoke map on a Pattern only matrix");
        var me = this;
        var rows = this._size[0];
        var columns = this._size[1];
        var invoke = function(v, i, j) {
          return callback(v, [i, j], me);
        };
        return _map(this, 0, rows - 1, 0, columns - 1, invoke, skipZeros);
      };
      var _map = function(matrix, minRow, maxRow, minColumn, maxColumn, callback, skipZeros) {
        var values = [];
        var index = [];
        var ptr = [];
        var eq = equalScalar;
        var zero = 0;
        if (isString(matrix._datatype)) {
          eq = typed.find(equalScalar, [matrix._datatype, matrix._datatype]) || equalScalar;
          zero = typed.convert(0, matrix._datatype);
        }
        var invoke = function(v, x2, y2) {
          v = callback(v, x2, y2);
          if (!eq(v, zero)) {
            values.push(v);
            index.push(x2);
          }
        };
        for (var j = minColumn; j <= maxColumn; j++) {
          ptr.push(values.length);
          var k0 = matrix._ptr[j];
          var k1 = matrix._ptr[j + 1];
          var p = minRow;
          for (var k = k0; k < k1; k++) {
            var i = matrix._index[k];
            if (i >= minRow && i <= maxRow) {
              if (!skipZeros) {
                for (var x = p; x < i; x++)
                  invoke(0, x - minRow, j - minColumn);
              }
              invoke(matrix._values[k], i - minRow, j - minColumn);
            }
            p = i + 1;
          }
          if (!skipZeros) {
            for (var y = p; y <= maxRow; y++)
              invoke(0, y - minRow, j - minColumn);
          }
        }
        ptr.push(values.length);
        return new SparseMatrix({
          values,
          index,
          ptr,
          size: [maxRow - minRow + 1, maxColumn - minColumn + 1]
        });
      };
      SparseMatrix.prototype.forEach = function(callback, skipZeros) {
        if (!this._values)
          throw new Error("Cannot invoke forEach on a Pattern only matrix");
        var me = this;
        var rows = this._size[0];
        var columns = this._size[1];
        for (var j = 0; j < columns; j++) {
          var k0 = this._ptr[j];
          var k1 = this._ptr[j + 1];
          var p = 0;
          for (var k = k0; k < k1; k++) {
            var i = this._index[k];
            if (!skipZeros) {
              for (var x = p; x < i; x++)
                callback(0, [x, j], me);
            }
            callback(this._values[k], [i, j], me);
            p = i + 1;
          }
          if (!skipZeros) {
            for (var y = p; y < rows; y++)
              callback(0, [y, j], me);
          }
        }
      };
      SparseMatrix.prototype.toArray = function() {
        return _toArray(this._values, this._index, this._ptr, this._size, true);
      };
      SparseMatrix.prototype.valueOf = function() {
        return _toArray(this._values, this._index, this._ptr, this._size, false);
      };
      var _toArray = function(values, index, ptr, size, copy) {
        var rows = size[0];
        var columns = size[1];
        var a = [];
        var i, j;
        for (i = 0; i < rows; i++) {
          a[i] = [];
          for (j = 0; j < columns; j++)
            a[i][j] = 0;
        }
        for (j = 0; j < columns; j++) {
          var k0 = ptr[j];
          var k1 = ptr[j + 1];
          for (var k = k0; k < k1; k++) {
            i = index[k];
            a[i][j] = values ? copy ? object.clone(values[k]) : values[k] : 1;
          }
        }
        return a;
      };
      SparseMatrix.prototype.format = function(options) {
        var rows = this._size[0];
        var columns = this._size[1];
        var density = this.density();
        var str = "Sparse Matrix [" + string.format(rows, options) + " x " + string.format(columns, options) + "] density: " + string.format(density, options) + "\n";
        for (var j = 0; j < columns; j++) {
          var k0 = this._ptr[j];
          var k1 = this._ptr[j + 1];
          for (var k = k0; k < k1; k++) {
            var i = this._index[k];
            str += "\n    (" + string.format(i, options) + ", " + string.format(j, options) + ") ==> " + (this._values ? string.format(this._values[k], options) : "X");
          }
        }
        return str;
      };
      SparseMatrix.prototype.toString = function() {
        return string.format(this.toArray());
      };
      SparseMatrix.prototype.toJSON = function() {
        return {
          mathjs: "SparseMatrix",
          values: this._values,
          index: this._index,
          ptr: this._ptr,
          size: this._size,
          datatype: this._datatype
        };
      };
      SparseMatrix.prototype.diagonal = function(k) {
        if (k) {
          if (k.isBigNumber === true)
            k = k.toNumber();
          if (!isNumber(k) || !isInteger(k)) {
            throw new TypeError("The parameter k must be an integer number");
          }
        } else {
          k = 0;
        }
        var kSuper = k > 0 ? k : 0;
        var kSub = k < 0 ? -k : 0;
        var rows = this._size[0];
        var columns = this._size[1];
        var n = Math.min(rows - kSub, columns - kSuper);
        var values = [];
        var index = [];
        var ptr = [];
        ptr[0] = 0;
        for (var j = kSuper; j < columns && values.length < n; j++) {
          var k0 = this._ptr[j];
          var k1 = this._ptr[j + 1];
          for (var x = k0; x < k1; x++) {
            var i = this._index[x];
            if (i === j - kSuper + kSub) {
              values.push(this._values[x]);
              index[values.length - 1] = i - kSub;
              break;
            }
          }
        }
        ptr.push(values.length);
        return new SparseMatrix({
          values,
          index,
          ptr,
          size: [n, 1]
        });
      };
      SparseMatrix.fromJSON = function(json) {
        return new SparseMatrix(json);
      };
      SparseMatrix.diagonal = function(size, value, k, defaultValue, datatype) {
        if (!isArray(size))
          throw new TypeError("Array expected, size parameter");
        if (size.length !== 2)
          throw new Error("Only two dimensions matrix are supported");
        size = size.map(function(s) {
          if (s && s.isBigNumber === true) {
            s = s.toNumber();
          }
          if (!isNumber(s) || !isInteger(s) || s < 1) {
            throw new Error("Size values must be positive integers");
          }
          return s;
        });
        if (k) {
          if (k.isBigNumber === true)
            k = k.toNumber();
          if (!isNumber(k) || !isInteger(k)) {
            throw new TypeError("The parameter k must be an integer number");
          }
        } else {
          k = 0;
        }
        var eq = equalScalar;
        var zero = 0;
        if (isString(datatype)) {
          eq = typed.find(equalScalar, [datatype, datatype]) || equalScalar;
          zero = typed.convert(0, datatype);
        }
        var kSuper = k > 0 ? k : 0;
        var kSub = k < 0 ? -k : 0;
        var rows = size[0];
        var columns = size[1];
        var n = Math.min(rows - kSub, columns - kSuper);
        var _value;
        if (isArray(value)) {
          if (value.length !== n) {
            throw new Error("Invalid value array length");
          }
          _value = function(i2) {
            return value[i2];
          };
        } else if (value && value.isMatrix === true) {
          var ms = value.size();
          if (ms.length !== 1 || ms[0] !== n) {
            throw new Error("Invalid matrix length");
          }
          _value = function(i2) {
            return value.get([i2]);
          };
        } else {
          _value = function() {
            return value;
          };
        }
        var values = [];
        var index = [];
        var ptr = [];
        for (var j = 0; j < columns; j++) {
          ptr.push(values.length);
          var i = j - kSuper;
          if (i >= 0 && i < n) {
            var v = _value(i);
            if (!eq(v, zero)) {
              index.push(i + kSub);
              values.push(v);
            }
          }
        }
        ptr.push(values.length);
        return new SparseMatrix({
          values,
          index,
          ptr,
          size: [rows, columns]
        });
      };
      SparseMatrix.prototype.swapRows = function(i, j) {
        if (!isNumber(i) || !isInteger(i) || !isNumber(j) || !isInteger(j)) {
          throw new Error("Row index must be positive integers");
        }
        if (this._size.length !== 2) {
          throw new Error("Only two dimensional matrix is supported");
        }
        validateIndex(i, this._size[0]);
        validateIndex(j, this._size[0]);
        SparseMatrix._swapRows(i, j, this._size[1], this._values, this._index, this._ptr);
        return this;
      };
      SparseMatrix._forEachRow = function(j, values, index, ptr, callback) {
        var k0 = ptr[j];
        var k1 = ptr[j + 1];
        for (var k = k0; k < k1; k++) {
          callback(index[k], values[k]);
        }
      };
      SparseMatrix._swapRows = function(x, y, columns, values, index, ptr) {
        for (var j = 0; j < columns; j++) {
          var k0 = ptr[j];
          var k1 = ptr[j + 1];
          var kx = _getValueIndex(x, k0, k1, index);
          var ky = _getValueIndex(y, k0, k1, index);
          if (kx < k1 && ky < k1 && index[kx] === x && index[ky] === y) {
            if (values) {
              var v = values[kx];
              values[kx] = values[ky];
              values[ky] = v;
            }
            continue;
          }
          if (kx < k1 && index[kx] === x && (ky >= k1 || index[ky] !== y)) {
            var vx = values ? values[kx] : void 0;
            index.splice(ky, 0, y);
            if (values)
              values.splice(ky, 0, vx);
            index.splice(ky <= kx ? kx + 1 : kx, 1);
            if (values)
              values.splice(ky <= kx ? kx + 1 : kx, 1);
            continue;
          }
          if (ky < k1 && index[ky] === y && (kx >= k1 || index[kx] !== x)) {
            var vy = values ? values[ky] : void 0;
            index.splice(kx, 0, x);
            if (values)
              values.splice(kx, 0, vy);
            index.splice(kx <= ky ? ky + 1 : ky, 1);
            if (values)
              values.splice(kx <= ky ? ky + 1 : ky, 1);
          }
        }
      };
      type.Matrix._storage.sparse = SparseMatrix;
      return SparseMatrix;
    }
    exports.name = "SparseMatrix";
    exports.path = "type";
    exports.factory = factory;
    exports.lazy = false;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/type/matrix/function/matrix.js
var require_matrix = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/type/matrix/function/matrix.js"(exports) {
    "use strict";
    function factory(type, config, load, typed) {
      var matrix = typed("matrix", {
        "": function() {
          return _create([]);
        },
        "string": function(format) {
          return _create([], format);
        },
        "string, string": function(format, datatype) {
          return _create([], format, datatype);
        },
        "Array": function(data) {
          return _create(data);
        },
        "Matrix": function(data) {
          return _create(data, data.storage());
        },
        "Array | Matrix, string": _create,
        "Array | Matrix, string, string": _create
      });
      matrix.toTex = {
        0: "\\begin{bmatrix}\\end{bmatrix}",
        1: "\\left(${args[0]}\\right)",
        2: "\\left(${args[0]}\\right)"
      };
      return matrix;
      function _create(data, format, datatype) {
        var M = type.Matrix.storage(format || "default");
        return new M(data, datatype);
      }
    }
    exports.name = "matrix";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/arithmetic/addScalar.js
var require_addScalar = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/arithmetic/addScalar.js"(exports) {
    "use strict";
    function factory(type, config, load, typed) {
      var add = typed("add", {
        "number, number": function(x, y) {
          return x + y;
        },
        "Complex, Complex": function(x, y) {
          return x.add(y);
        },
        "BigNumber, BigNumber": function(x, y) {
          return x.plus(y);
        },
        "Fraction, Fraction": function(x, y) {
          return x.add(y);
        },
        "Unit, Unit": function(x, y) {
          if (x.value == null) throw new Error("Parameter x contains a unit with undefined value");
          if (y.value == null) throw new Error("Parameter y contains a unit with undefined value");
          if (!x.equalBase(y)) throw new Error("Units do not match");
          var res = x.clone();
          res.value = add(res.value, y.value);
          res.fixPrefix = false;
          return res;
        }
      });
      return add;
    }
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/type/matrix/utils/algorithm01.js
var require_algorithm01 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/type/matrix/utils/algorithm01.js"(exports) {
    "use strict";
    var DimensionError = require_DimensionError();
    function factory(type, config, load, typed) {
      var DenseMatrix = type.DenseMatrix;
      var algorithm01 = function(denseMatrix, sparseMatrix, callback, inverse) {
        var adata = denseMatrix._data;
        var asize = denseMatrix._size;
        var adt = denseMatrix._datatype;
        var bvalues = sparseMatrix._values;
        var bindex = sparseMatrix._index;
        var bptr = sparseMatrix._ptr;
        var bsize = sparseMatrix._size;
        var bdt = sparseMatrix._datatype;
        if (asize.length !== bsize.length)
          throw new DimensionError(asize.length, bsize.length);
        if (asize[0] !== bsize[0] || asize[1] !== bsize[1])
          throw new RangeError("Dimension mismatch. Matrix A (" + asize + ") must match Matrix B (" + bsize + ")");
        if (!bvalues)
          throw new Error("Cannot perform operation on Dense Matrix and Pattern Sparse Matrix");
        var rows = asize[0];
        var columns = asize[1];
        var dt = typeof adt === "string" && adt === bdt ? adt : void 0;
        var cf = dt ? typed.find(callback, [dt, dt]) : callback;
        var i, j;
        var cdata = [];
        for (i = 0; i < rows; i++)
          cdata[i] = [];
        var x = [];
        var w = [];
        for (j = 0; j < columns; j++) {
          var mark = j + 1;
          for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
            i = bindex[k];
            x[i] = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);
            w[i] = mark;
          }
          for (i = 0; i < rows; i++) {
            if (w[i] === mark) {
              cdata[i][j] = x[i];
            } else {
              cdata[i][j] = adata[i][j];
            }
          }
        }
        return new DenseMatrix({
          data: cdata,
          size: [rows, columns],
          datatype: dt
        });
      };
      return algorithm01;
    }
    exports.name = "algorithm01";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/type/matrix/utils/algorithm04.js
var require_algorithm04 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/type/matrix/utils/algorithm04.js"(exports) {
    "use strict";
    var DimensionError = require_DimensionError();
    function factory(type, config, load, typed) {
      var equalScalar = load(require_equalScalar());
      var SparseMatrix = type.SparseMatrix;
      var algorithm04 = function(a, b, callback) {
        var avalues = a._values;
        var aindex = a._index;
        var aptr = a._ptr;
        var asize = a._size;
        var adt = a._datatype;
        var bvalues = b._values;
        var bindex = b._index;
        var bptr = b._ptr;
        var bsize = b._size;
        var bdt = b._datatype;
        if (asize.length !== bsize.length)
          throw new DimensionError(asize.length, bsize.length);
        if (asize[0] !== bsize[0] || asize[1] !== bsize[1])
          throw new RangeError("Dimension mismatch. Matrix A (" + asize + ") must match Matrix B (" + bsize + ")");
        var rows = asize[0];
        var columns = asize[1];
        var dt;
        var eq = equalScalar;
        var zero = 0;
        var cf = callback;
        if (typeof adt === "string" && adt === bdt) {
          dt = adt;
          eq = typed.find(equalScalar, [dt, dt]);
          zero = typed.convert(0, dt);
          cf = typed.find(callback, [dt, dt]);
        }
        var cvalues = avalues && bvalues ? [] : void 0;
        var cindex = [];
        var cptr = [];
        var c = new SparseMatrix({
          values: cvalues,
          index: cindex,
          ptr: cptr,
          size: [rows, columns],
          datatype: dt
        });
        var xa = avalues && bvalues ? [] : void 0;
        var xb = avalues && bvalues ? [] : void 0;
        var wa = [];
        var wb = [];
        var i, j, k, k0, k1;
        for (j = 0; j < columns; j++) {
          cptr[j] = cindex.length;
          var mark = j + 1;
          for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
            i = aindex[k];
            cindex.push(i);
            wa[i] = mark;
            if (xa)
              xa[i] = avalues[k];
          }
          for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
            i = bindex[k];
            if (wa[i] === mark) {
              if (xa) {
                var v = cf(xa[i], bvalues[k]);
                if (!eq(v, zero)) {
                  xa[i] = v;
                } else {
                  wa[i] = null;
                }
              }
            } else {
              cindex.push(i);
              wb[i] = mark;
              if (xb)
                xb[i] = bvalues[k];
            }
          }
          if (xa && xb) {
            k = cptr[j];
            while (k < cindex.length) {
              i = cindex[k];
              if (wa[i] === mark) {
                cvalues[k] = xa[i];
                k++;
              } else if (wb[i] === mark) {
                cvalues[k] = xb[i];
                k++;
              } else {
                cindex.splice(k, 1);
              }
            }
          }
        }
        cptr[columns] = cindex.length;
        return c;
      };
      return algorithm04;
    }
    exports.name = "algorithm04";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/type/matrix/utils/algorithm10.js
var require_algorithm10 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/type/matrix/utils/algorithm10.js"(exports) {
    "use strict";
    function factory(type, config, load, typed) {
      var DenseMatrix = type.DenseMatrix;
      var algorithm10 = function(s, b, callback, inverse) {
        var avalues = s._values;
        var aindex = s._index;
        var aptr = s._ptr;
        var asize = s._size;
        var adt = s._datatype;
        if (!avalues)
          throw new Error("Cannot perform operation on Pattern Sparse Matrix and Scalar value");
        var rows = asize[0];
        var columns = asize[1];
        var dt;
        var cf = callback;
        if (typeof adt === "string") {
          dt = adt;
          b = typed.convert(b, dt);
          cf = typed.find(callback, [dt, dt]);
        }
        var cdata = [];
        var c = new DenseMatrix({
          data: cdata,
          size: [rows, columns],
          datatype: dt
        });
        var x = [];
        var w = [];
        for (var j = 0; j < columns; j++) {
          var mark = j + 1;
          for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
            var r = aindex[k];
            x[r] = avalues[k];
            w[r] = mark;
          }
          for (var i = 0; i < rows; i++) {
            if (j === 0) {
              cdata[i] = [];
            }
            if (w[i] === mark) {
              cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);
            } else {
              cdata[i][j] = b;
            }
          }
        }
        return c;
      };
      return algorithm10;
    }
    exports.name = "algorithm10";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/type/matrix/utils/algorithm13.js
var require_algorithm13 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/type/matrix/utils/algorithm13.js"(exports) {
    "use strict";
    var util = require_utils();
    var DimensionError = require_DimensionError();
    var string = util.string;
    var isString = string.isString;
    function factory(type, config, load, typed) {
      var DenseMatrix = type.DenseMatrix;
      var algorithm13 = function(a, b, callback) {
        var adata = a._data;
        var asize = a._size;
        var adt = a._datatype;
        var bdata = b._data;
        var bsize = b._size;
        var bdt = b._datatype;
        var csize = [];
        if (asize.length !== bsize.length)
          throw new DimensionError(asize.length, bsize.length);
        for (var s = 0; s < asize.length; s++) {
          if (asize[s] !== bsize[s])
            throw new RangeError("Dimension mismatch. Matrix A (" + asize + ") must match Matrix B (" + bsize + ")");
          csize[s] = asize[s];
        }
        var dt;
        var cf = callback;
        if (typeof adt === "string" && adt === bdt) {
          dt = adt;
          b = typed.convert(b, dt);
          cf = typed.find(callback, [dt, dt]);
        }
        var cdata = csize.length > 0 ? _iterate(cf, 0, csize, csize[0], adata, bdata) : [];
        return new DenseMatrix({
          data: cdata,
          size: csize,
          datatype: dt
        });
      };
      var _iterate = function(f, level, s, n, av, bv) {
        var cv = [];
        if (level === s.length - 1) {
          for (var i = 0; i < n; i++) {
            cv[i] = f(av[i], bv[i]);
          }
        } else {
          for (var j = 0; j < n; j++) {
            cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv[j]);
          }
        }
        return cv;
      };
      return algorithm13;
    }
    exports.name = "algorithm13";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/type/matrix/utils/algorithm14.js
var require_algorithm14 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/type/matrix/utils/algorithm14.js"(exports) {
    "use strict";
    var clone = require_object().clone;
    function factory(type, config, load, typed) {
      var DenseMatrix = type.DenseMatrix;
      var algorithm14 = function(a, b, callback, inverse) {
        var adata = a._data;
        var asize = a._size;
        var adt = a._datatype;
        var dt;
        var cf = callback;
        if (typeof adt === "string") {
          dt = adt;
          b = typed.convert(b, dt);
          cf = typed.find(callback, [dt, dt]);
        }
        var cdata = asize.length > 0 ? _iterate(cf, 0, asize, asize[0], adata, b, inverse) : [];
        return new DenseMatrix({
          data: cdata,
          size: clone(asize),
          datatype: dt
        });
      };
      var _iterate = function(f, level, s, n, av, bv, inverse) {
        var cv = [];
        if (level === s.length - 1) {
          for (var i = 0; i < n; i++) {
            cv[i] = inverse ? f(bv, av[i]) : f(av[i], bv);
          }
        } else {
          for (var j = 0; j < n; j++) {
            cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv, inverse);
          }
        }
        return cv;
      };
      return algorithm14;
    }
    exports.name = "algorithm14";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/arithmetic/add.js
var require_add = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/arithmetic/add.js"(exports) {
    "use strict";
    var extend = require_object().extend;
    function factory(type, config, load, typed) {
      var matrix = load(require_matrix());
      var addScalar = load(require_addScalar());
      var latex = require_latex();
      var algorithm01 = load(require_algorithm01());
      var algorithm04 = load(require_algorithm04());
      var algorithm10 = load(require_algorithm10());
      var algorithm13 = load(require_algorithm13());
      var algorithm14 = load(require_algorithm14());
      var add = typed("add", extend({
        // we extend the signatures of addScalar with signatures dealing with matrices
        "Matrix, Matrix": function(x, y) {
          var c;
          switch (x.storage()) {
            case "sparse":
              switch (y.storage()) {
                case "sparse":
                  c = algorithm04(x, y, addScalar);
                  break;
                default:
                  c = algorithm01(y, x, addScalar, true);
                  break;
              }
              break;
            default:
              switch (y.storage()) {
                case "sparse":
                  c = algorithm01(x, y, addScalar, false);
                  break;
                default:
                  c = algorithm13(x, y, addScalar);
                  break;
              }
              break;
          }
          return c;
        },
        "Array, Array": function(x, y) {
          return add(matrix(x), matrix(y)).valueOf();
        },
        "Array, Matrix": function(x, y) {
          return add(matrix(x), y);
        },
        "Matrix, Array": function(x, y) {
          return add(x, matrix(y));
        },
        "Matrix, any": function(x, y) {
          var c;
          switch (x.storage()) {
            case "sparse":
              c = algorithm10(x, y, addScalar, false);
              break;
            default:
              c = algorithm14(x, y, addScalar, false);
              break;
          }
          return c;
        },
        "any, Matrix": function(x, y) {
          var c;
          switch (y.storage()) {
            case "sparse":
              c = algorithm10(y, x, addScalar, true);
              break;
            default:
              c = algorithm14(y, x, addScalar, true);
              break;
          }
          return c;
        },
        "Array, any": function(x, y) {
          return algorithm14(matrix(x), y, addScalar, false).valueOf();
        },
        "any, Array": function(x, y) {
          return algorithm14(matrix(y), x, addScalar, true).valueOf();
        },
        "any, any": addScalar,
        "any, any, ...any": function(x, y, rest) {
          var result = add(x, y);
          for (var i = 0; i < rest.length; i++) {
            result = add(result, rest[i]);
          }
          return result;
        }
      }, addScalar.signatures));
      add.toTex = {
        2: "\\left(${args[0]}" + latex.operators["add"] + "${args[1]}\\right)"
      };
      return add;
    }
    exports.name = "add";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/type/matrix/Spa.js
var require_Spa = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/type/matrix/Spa.js"(exports) {
    "use strict";
    function factory(type, config, load) {
      var add = load(require_add());
      var equalScalar = load(require_equalScalar());
      function Spa() {
        if (!(this instanceof Spa))
          throw new SyntaxError("Constructor must be called with the new operator");
        this._values = [];
        this._heap = new type.FibonacciHeap();
      }
      Spa.prototype.type = "Spa";
      Spa.prototype.isSpa = true;
      Spa.prototype.set = function(i, v) {
        if (!this._values[i]) {
          var node = this._heap.insert(i, v);
          this._values[i] = node;
        } else {
          this._values[i].value = v;
        }
      };
      Spa.prototype.get = function(i) {
        var node = this._values[i];
        if (node)
          return node.value;
        return 0;
      };
      Spa.prototype.accumulate = function(i, v) {
        var node = this._values[i];
        if (!node) {
          node = this._heap.insert(i, v);
          this._values[i] = node;
        } else {
          node.value = add(node.value, v);
        }
      };
      Spa.prototype.forEach = function(from, to, callback) {
        var heap = this._heap;
        var values = this._values;
        var nodes = [];
        var node = heap.extractMinimum();
        if (node)
          nodes.push(node);
        while (node && node.key <= to) {
          if (node.key >= from) {
            if (!equalScalar(node.value, 0)) {
              callback(node.key, node.value, this);
            }
          }
          node = heap.extractMinimum();
          if (node)
            nodes.push(node);
        }
        for (var i = 0; i < nodes.length; i++) {
          var n = nodes[i];
          node = heap.insert(n.key, n.value);
          values[node.key] = node;
        }
      };
      Spa.prototype.swap = function(i, j) {
        var nodei = this._values[i];
        var nodej = this._values[j];
        if (!nodei && nodej) {
          nodei = this._heap.insert(i, nodej.value);
          this._heap.remove(nodej);
          this._values[i] = nodei;
          this._values[j] = void 0;
        } else if (nodei && !nodej) {
          nodej = this._heap.insert(j, nodei.value);
          this._heap.remove(nodei);
          this._values[j] = nodej;
          this._values[i] = void 0;
        } else if (nodei && nodej) {
          var v = nodei.value;
          nodei.value = nodej.value;
          nodej.value = v;
        }
      };
      return Spa;
    }
    exports.name = "Spa";
    exports.path = "type";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/type/matrix/utils/algorithm03.js
var require_algorithm03 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/type/matrix/utils/algorithm03.js"(exports) {
    "use strict";
    var DimensionError = require_DimensionError();
    function factory(type, config, load, typed) {
      var DenseMatrix = type.DenseMatrix;
      var algorithm03 = function(denseMatrix, sparseMatrix, callback, inverse) {
        var adata = denseMatrix._data;
        var asize = denseMatrix._size;
        var adt = denseMatrix._datatype;
        var bvalues = sparseMatrix._values;
        var bindex = sparseMatrix._index;
        var bptr = sparseMatrix._ptr;
        var bsize = sparseMatrix._size;
        var bdt = sparseMatrix._datatype;
        if (asize.length !== bsize.length)
          throw new DimensionError(asize.length, bsize.length);
        if (asize[0] !== bsize[0] || asize[1] !== bsize[1])
          throw new RangeError("Dimension mismatch. Matrix A (" + asize + ") must match Matrix B (" + bsize + ")");
        if (!bvalues)
          throw new Error("Cannot perform operation on Dense Matrix and Pattern Sparse Matrix");
        var rows = asize[0];
        var columns = asize[1];
        var dt;
        var zero = 0;
        var cf = callback;
        if (typeof adt === "string" && adt === bdt) {
          dt = adt;
          zero = typed.convert(0, dt);
          cf = typed.find(callback, [dt, dt]);
        }
        var cdata = [];
        for (var z = 0; z < rows; z++) {
          cdata[z] = [];
        }
        var x = [];
        var w = [];
        for (var j = 0; j < columns; j++) {
          var mark = j + 1;
          for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
            var i = bindex[k];
            x[i] = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);
            w[i] = mark;
          }
          for (var y = 0; y < rows; y++) {
            if (w[y] === mark) {
              cdata[y][j] = x[y];
            } else {
              cdata[y][j] = inverse ? cf(zero, adata[y][j]) : cf(adata[y][j], zero);
            }
          }
        }
        return new DenseMatrix({
          data: cdata,
          size: [rows, columns],
          datatype: dt
        });
      };
      return algorithm03;
    }
    exports.name = "algorithm03";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/type/matrix/utils/algorithm07.js
var require_algorithm07 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/type/matrix/utils/algorithm07.js"(exports) {
    "use strict";
    var DimensionError = require_DimensionError();
    function factory(type, config, load, typed) {
      var DenseMatrix = type.DenseMatrix;
      var algorithm07 = function(a, b, callback) {
        var asize = a._size;
        var adt = a._datatype;
        var bsize = b._size;
        var bdt = b._datatype;
        if (asize.length !== bsize.length)
          throw new DimensionError(asize.length, bsize.length);
        if (asize[0] !== bsize[0] || asize[1] !== bsize[1])
          throw new RangeError("Dimension mismatch. Matrix A (" + asize + ") must match Matrix B (" + bsize + ")");
        var rows = asize[0];
        var columns = asize[1];
        var dt;
        var zero = 0;
        var cf = callback;
        if (typeof adt === "string" && adt === bdt) {
          dt = adt;
          zero = typed.convert(0, dt);
          cf = typed.find(callback, [dt, dt]);
        }
        var i, j;
        var cdata = [];
        for (i = 0; i < rows; i++)
          cdata[i] = [];
        var c = new DenseMatrix({
          data: cdata,
          size: [rows, columns],
          datatype: dt
        });
        var xa = [];
        var xb = [];
        var wa = [];
        var wb = [];
        for (j = 0; j < columns; j++) {
          var mark = j + 1;
          _scatter(a, j, wa, xa, mark);
          _scatter(b, j, wb, xb, mark);
          for (i = 0; i < rows; i++) {
            var va = wa[i] === mark ? xa[i] : zero;
            var vb = wb[i] === mark ? xb[i] : zero;
            cdata[i][j] = cf(va, vb);
          }
        }
        return c;
      };
      var _scatter = function(m, j, w, x, mark) {
        var values = m._values;
        var index = m._index;
        var ptr = m._ptr;
        for (var k = ptr[j], k1 = ptr[j + 1]; k < k1; k++) {
          var i = index[k];
          w[i] = mark;
          x[i] = values[k];
        }
      };
      return algorithm07;
    }
    exports.name = "algorithm07";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/type/matrix/utils/algorithm12.js
var require_algorithm12 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/type/matrix/utils/algorithm12.js"(exports) {
    "use strict";
    function factory(type, config, load, typed) {
      var DenseMatrix = type.DenseMatrix;
      var algorithm12 = function(s, b, callback, inverse) {
        var avalues = s._values;
        var aindex = s._index;
        var aptr = s._ptr;
        var asize = s._size;
        var adt = s._datatype;
        if (!avalues)
          throw new Error("Cannot perform operation on Pattern Sparse Matrix and Scalar value");
        var rows = asize[0];
        var columns = asize[1];
        var dt;
        var cf = callback;
        if (typeof adt === "string") {
          dt = adt;
          b = typed.convert(b, dt);
          cf = typed.find(callback, [dt, dt]);
        }
        var cdata = [];
        var c = new DenseMatrix({
          data: cdata,
          size: [rows, columns],
          datatype: dt
        });
        var x = [];
        var w = [];
        for (var j = 0; j < columns; j++) {
          var mark = j + 1;
          for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
            var r = aindex[k];
            x[r] = avalues[k];
            w[r] = mark;
          }
          for (var i = 0; i < rows; i++) {
            if (j === 0) {
              cdata[i] = [];
            }
            if (w[i] === mark) {
              cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);
            } else {
              cdata[i][j] = inverse ? cf(b, 0) : cf(0, b);
            }
          }
        }
        return c;
      };
      return algorithm12;
    }
    exports.name = "algorithm12";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/relational/smaller.js
var require_smaller = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/relational/smaller.js"(exports) {
    "use strict";
    var nearlyEqual = require_number().nearlyEqual;
    var bigNearlyEqual = require_nearlyEqual();
    function factory(type, config, load, typed) {
      var matrix = load(require_matrix());
      var algorithm03 = load(require_algorithm03());
      var algorithm07 = load(require_algorithm07());
      var algorithm12 = load(require_algorithm12());
      var algorithm13 = load(require_algorithm13());
      var algorithm14 = load(require_algorithm14());
      var latex = require_latex();
      var smaller = typed("smaller", {
        "boolean, boolean": function(x, y) {
          return x < y;
        },
        "number, number": function(x, y) {
          return x < y && !nearlyEqual(x, y, config.epsilon);
        },
        "BigNumber, BigNumber": function(x, y) {
          return x.lt(y) && !bigNearlyEqual(x, y, config.epsilon);
        },
        "Fraction, Fraction": function(x, y) {
          return x.compare(y) === -1;
        },
        "Complex, Complex": function(x, y) {
          throw new TypeError("No ordering relation is defined for complex numbers");
        },
        "Unit, Unit": function(x, y) {
          if (!x.equalBase(y)) {
            throw new Error("Cannot compare units with different base");
          }
          return smaller(x.value, y.value);
        },
        "string, string": function(x, y) {
          return x < y;
        },
        "Matrix, Matrix": function(x, y) {
          var c;
          switch (x.storage()) {
            case "sparse":
              switch (y.storage()) {
                case "sparse":
                  c = algorithm07(x, y, smaller);
                  break;
                default:
                  c = algorithm03(y, x, smaller, true);
                  break;
              }
              break;
            default:
              switch (y.storage()) {
                case "sparse":
                  c = algorithm03(x, y, smaller, false);
                  break;
                default:
                  c = algorithm13(x, y, smaller);
                  break;
              }
              break;
          }
          return c;
        },
        "Array, Array": function(x, y) {
          return smaller(matrix(x), matrix(y)).valueOf();
        },
        "Array, Matrix": function(x, y) {
          return smaller(matrix(x), y);
        },
        "Matrix, Array": function(x, y) {
          return smaller(x, matrix(y));
        },
        "Matrix, any": function(x, y) {
          var c;
          switch (x.storage()) {
            case "sparse":
              c = algorithm12(x, y, smaller, false);
              break;
            default:
              c = algorithm14(x, y, smaller, false);
              break;
          }
          return c;
        },
        "any, Matrix": function(x, y) {
          var c;
          switch (y.storage()) {
            case "sparse":
              c = algorithm12(y, x, smaller, true);
              break;
            default:
              c = algorithm14(y, x, smaller, true);
              break;
          }
          return c;
        },
        "Array, any": function(x, y) {
          return algorithm14(matrix(x), y, smaller, false).valueOf();
        },
        "any, Array": function(x, y) {
          return algorithm14(matrix(y), x, smaller, true).valueOf();
        }
      });
      smaller.toTex = {
        2: "\\left(${args[0]}" + latex.operators["smaller"] + "${args[1]}\\right)"
      };
      return smaller;
    }
    exports.name = "smaller";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/relational/larger.js
var require_larger = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/relational/larger.js"(exports) {
    "use strict";
    var nearlyEqual = require_number().nearlyEqual;
    var bigNearlyEqual = require_nearlyEqual();
    function factory(type, config, load, typed) {
      var matrix = load(require_matrix());
      var algorithm03 = load(require_algorithm03());
      var algorithm07 = load(require_algorithm07());
      var algorithm12 = load(require_algorithm12());
      var algorithm13 = load(require_algorithm13());
      var algorithm14 = load(require_algorithm14());
      var latex = require_latex();
      var larger = typed("larger", {
        "boolean, boolean": function(x, y) {
          return x > y;
        },
        "number, number": function(x, y) {
          return x > y && !nearlyEqual(x, y, config.epsilon);
        },
        "BigNumber, BigNumber": function(x, y) {
          return x.gt(y) && !bigNearlyEqual(x, y, config.epsilon);
        },
        "Fraction, Fraction": function(x, y) {
          return x.compare(y) === 1;
        },
        "Complex, Complex": function() {
          throw new TypeError("No ordering relation is defined for complex numbers");
        },
        "Unit, Unit": function(x, y) {
          if (!x.equalBase(y)) {
            throw new Error("Cannot compare units with different base");
          }
          return larger(x.value, y.value);
        },
        "string, string": function(x, y) {
          return x > y;
        },
        "Matrix, Matrix": function(x, y) {
          var c;
          switch (x.storage()) {
            case "sparse":
              switch (y.storage()) {
                case "sparse":
                  c = algorithm07(x, y, larger);
                  break;
                default:
                  c = algorithm03(y, x, larger, true);
                  break;
              }
              break;
            default:
              switch (y.storage()) {
                case "sparse":
                  c = algorithm03(x, y, larger, false);
                  break;
                default:
                  c = algorithm13(x, y, larger);
                  break;
              }
              break;
          }
          return c;
        },
        "Array, Array": function(x, y) {
          return larger(matrix(x), matrix(y)).valueOf();
        },
        "Array, Matrix": function(x, y) {
          return larger(matrix(x), y);
        },
        "Matrix, Array": function(x, y) {
          return larger(x, matrix(y));
        },
        "Matrix, any": function(x, y) {
          var c;
          switch (x.storage()) {
            case "sparse":
              c = algorithm12(x, y, larger, false);
              break;
            default:
              c = algorithm14(x, y, larger, false);
              break;
          }
          return c;
        },
        "any, Matrix": function(x, y) {
          var c;
          switch (y.storage()) {
            case "sparse":
              c = algorithm12(y, x, larger, true);
              break;
            default:
              c = algorithm14(y, x, larger, true);
              break;
          }
          return c;
        },
        "Array, any": function(x, y) {
          return algorithm14(matrix(x), y, larger, false).valueOf();
        },
        "any, Array": function(x, y) {
          return algorithm14(matrix(y), x, larger, true).valueOf();
        }
      });
      larger.toTex = {
        2: "\\left(${args[0]}" + latex.operators["larger"] + "${args[1]}\\right)"
      };
      return larger;
    }
    exports.name = "larger";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/type/matrix/FibonacciHeap.js
var require_FibonacciHeap = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/type/matrix/FibonacciHeap.js"(exports) {
    "use strict";
    function factory(type, config, load, typed) {
      var smaller = load(require_smaller());
      var larger = load(require_larger());
      var oneOverLogPhi = 1 / Math.log((1 + Math.sqrt(5)) / 2);
      function FibonacciHeap() {
        if (!(this instanceof FibonacciHeap))
          throw new SyntaxError("Constructor must be called with the new operator");
        this._minimum = null;
        this._size = 0;
      }
      FibonacciHeap.prototype.type = "FibonacciHeap";
      FibonacciHeap.prototype.isFibonacciHeap = true;
      FibonacciHeap.prototype.insert = function(key, value) {
        var node = {
          key,
          value,
          degree: 0
        };
        if (this._minimum) {
          var minimum = this._minimum;
          node.left = minimum;
          node.right = minimum.right;
          minimum.right = node;
          node.right.left = node;
          if (smaller(key, minimum.key)) {
            this._minimum = node;
          }
        } else {
          node.left = node;
          node.right = node;
          this._minimum = node;
        }
        this._size++;
        return node;
      };
      FibonacciHeap.prototype.size = function() {
        return this._size;
      };
      FibonacciHeap.prototype.clear = function() {
        this._minimum = null;
        this._size = 0;
      };
      FibonacciHeap.prototype.isEmpty = function() {
        return !!this._minimum;
      };
      FibonacciHeap.prototype.extractMinimum = function() {
        var node = this._minimum;
        if (node === null)
          return node;
        var minimum = this._minimum;
        var numberOfChildren = node.degree;
        var x = node.child;
        while (numberOfChildren > 0) {
          var tempRight = x.right;
          x.left.right = x.right;
          x.right.left = x.left;
          x.left = minimum;
          x.right = minimum.right;
          minimum.right = x;
          x.right.left = x;
          x.parent = null;
          x = tempRight;
          numberOfChildren--;
        }
        node.left.right = node.right;
        node.right.left = node.left;
        if (node == node.right) {
          minimum = null;
        } else {
          minimum = node.right;
          minimum = _findMinimumNode(minimum, this._size);
        }
        this._size--;
        this._minimum = minimum;
        return node;
      };
      FibonacciHeap.prototype.remove = function(node) {
        this._minimum = _decreaseKey(this._minimum, node, -1);
        this.extractMinimum();
      };
      var _decreaseKey = function(minimum, node, key) {
        node.key = key;
        var parent = node.parent;
        if (parent && smaller(node.key, parent.key)) {
          _cut(minimum, node, parent);
          _cascadingCut(minimum, parent);
        }
        if (smaller(node.key, minimum.key))
          minimum = node;
        return minimum;
      };
      var _cut = function(minimum, node, parent) {
        node.left.right = node.right;
        node.right.left = node.left;
        parent.degree--;
        if (parent.child == node)
          parent.child = node.right;
        if (parent.degree === 0)
          parent.child = null;
        node.left = minimum;
        node.right = minimum.right;
        minimum.right = node;
        node.right.left = node;
        node.parent = null;
        node.mark = false;
      };
      var _cascadingCut = function(minimum, node) {
        var parent = node.parent;
        if (!parent)
          return;
        if (!node.mark) {
          node.mark = true;
        } else {
          _cut(minimum, node, parent);
          _cascadingCut(parent);
        }
      };
      var _linkNodes = function(node, parent) {
        node.left.right = node.right;
        node.right.left = node.left;
        node.parent = parent;
        if (!parent.child) {
          parent.child = node;
          node.right = node;
          node.left = node;
        } else {
          node.left = parent.child;
          node.right = parent.child.right;
          parent.child.right = node;
          node.right.left = node;
        }
        parent.degree++;
        node.mark = false;
      };
      var _findMinimumNode = function(minimum, size) {
        var arraySize = Math.floor(Math.log(size) * oneOverLogPhi) + 1;
        var array = new Array(arraySize);
        var numRoots = 0;
        var x = minimum;
        if (x) {
          numRoots++;
          x = x.right;
          while (x !== minimum) {
            numRoots++;
            x = x.right;
          }
        }
        var y;
        while (numRoots > 0) {
          var d = x.degree;
          var next = x.right;
          while (true) {
            y = array[d];
            if (!y)
              break;
            if (larger(x.key, y.key)) {
              var temp = y;
              y = x;
              x = temp;
            }
            _linkNodes(y, x);
            array[d] = null;
            d++;
          }
          array[d] = x;
          x = next;
          numRoots--;
        }
        minimum = null;
        for (var i = 0; i < arraySize; i++) {
          y = array[i];
          if (!y)
            continue;
          if (minimum) {
            y.left.right = y.right;
            y.right.left = y.left;
            y.left = minimum;
            y.right = minimum.right;
            minimum.right = y;
            y.right.left = y;
            if (smaller(y.key, minimum.key))
              minimum = y;
          } else
            minimum = y;
        }
        return minimum;
      };
      return FibonacciHeap;
    }
    exports.name = "FibonacciHeap";
    exports.path = "type";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/type/matrix/ImmutableDenseMatrix.js
var require_ImmutableDenseMatrix = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/type/matrix/ImmutableDenseMatrix.js"(exports) {
    "use strict";
    var util = require_utils();
    var string = util.string;
    var object = util.object;
    var isArray = Array.isArray;
    var isString = string.isString;
    function factory(type, config, load) {
      var DenseMatrix = load(require_DenseMatrix());
      var smaller = load(require_smaller());
      function ImmutableDenseMatrix(data, datatype) {
        if (!(this instanceof ImmutableDenseMatrix))
          throw new SyntaxError("Constructor must be called with the new operator");
        if (datatype && !isString(datatype))
          throw new Error("Invalid datatype: " + datatype);
        if (data && data.isMatrix === true || isArray(data)) {
          var matrix = new DenseMatrix(data, datatype);
          this._data = matrix._data;
          this._size = matrix._size;
          this._datatype = matrix._datatype;
          this._min = null;
          this._max = null;
        } else if (data && isArray(data.data) && isArray(data.size)) {
          this._data = data.data;
          this._size = data.size;
          this._datatype = data.datatype;
          this._min = typeof data.min !== "undefined" ? data.min : null;
          this._max = typeof data.max !== "undefined" ? data.max : null;
        } else if (data) {
          throw new TypeError("Unsupported type of data (" + util.types.type(data) + ")");
        } else {
          this._data = [];
          this._size = [0];
          this._datatype = datatype;
          this._min = null;
          this._max = null;
        }
      }
      ImmutableDenseMatrix.prototype = new DenseMatrix();
      ImmutableDenseMatrix.prototype.type = "ImmutableDenseMatrix";
      ImmutableDenseMatrix.prototype.isImmutableDenseMatrix = true;
      ImmutableDenseMatrix.prototype.subset = function(index) {
        switch (arguments.length) {
          case 1:
            var m = DenseMatrix.prototype.subset.call(this, index);
            if (m.isMatrix) {
              return new ImmutableDenseMatrix({
                data: m._data,
                size: m._size,
                datatype: m._datatype
              });
            }
            return m;
          case 2:
          case 3:
            throw new Error("Cannot invoke set subset on an Immutable Matrix instance");
          default:
            throw new SyntaxError("Wrong number of arguments");
        }
      };
      ImmutableDenseMatrix.prototype.set = function() {
        throw new Error("Cannot invoke set on an Immutable Matrix instance");
      };
      ImmutableDenseMatrix.prototype.resize = function() {
        throw new Error("Cannot invoke resize on an Immutable Matrix instance");
      };
      ImmutableDenseMatrix.prototype.reshape = function() {
        throw new Error("Cannot invoke reshape on an Immutable Matrix instance");
      };
      ImmutableDenseMatrix.prototype.clone = function() {
        var m = new ImmutableDenseMatrix({
          data: object.clone(this._data),
          size: object.clone(this._size),
          datatype: this._datatype
        });
        return m;
      };
      ImmutableDenseMatrix.prototype.toJSON = function() {
        return {
          mathjs: "ImmutableDenseMatrix",
          data: this._data,
          size: this._size,
          datatype: this._datatype
        };
      };
      ImmutableDenseMatrix.fromJSON = function(json) {
        return new ImmutableDenseMatrix(json);
      };
      ImmutableDenseMatrix.prototype.swapRows = function() {
        throw new Error("Cannot invoke swapRows on an Immutable Matrix instance");
      };
      ImmutableDenseMatrix.prototype.min = function() {
        if (this._min === null) {
          var m = null;
          this.forEach(function(v) {
            if (m === null || smaller(v, m))
              m = v;
          });
          this._min = m !== null ? m : void 0;
        }
        return this._min;
      };
      ImmutableDenseMatrix.prototype.max = function() {
        if (this._max === null) {
          var m = null;
          this.forEach(function(v) {
            if (m === null || smaller(m, v))
              m = v;
          });
          this._max = m !== null ? m : void 0;
        }
        return this._max;
      };
      return ImmutableDenseMatrix;
    }
    exports.name = "ImmutableDenseMatrix";
    exports.path = "type";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/type/matrix/MatrixIndex.js
var require_MatrixIndex = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/type/matrix/MatrixIndex.js"(exports) {
    "use strict";
    var clone = require_object().clone;
    var isInteger = require_number().isInteger;
    function factory(type) {
      function Index(ranges) {
        if (!(this instanceof Index)) {
          throw new SyntaxError("Constructor must be called with the new operator");
        }
        this._dimensions = [];
        this._isScalar = true;
        for (var i = 0, ii = arguments.length; i < ii; i++) {
          var arg = arguments[i];
          if (arg && arg.isRange === true) {
            this._dimensions.push(arg);
            this._isScalar = false;
          } else if (arg && (Array.isArray(arg) || arg.isMatrix === true)) {
            var m = _createImmutableMatrix(arg.valueOf());
            this._dimensions.push(m);
            var size = m.size();
            if (size.length !== 1 || size[0] !== 1) {
              this._isScalar = false;
            }
          } else if (typeof arg === "number") {
            this._dimensions.push(_createImmutableMatrix([arg]));
          } else if (typeof arg === "string") {
            this._dimensions.push(arg);
          } else {
            throw new TypeError("Dimension must be an Array, Matrix, number, string, or Range");
          }
        }
      }
      Index.prototype.type = "Index";
      Index.prototype.isIndex = true;
      function _createImmutableMatrix(arg) {
        for (var i = 0, l = arg.length; i < l; i++) {
          if (typeof arg[i] !== "number" || !isInteger(arg[i])) {
            throw new TypeError("Index parameters must be positive integer numbers");
          }
        }
        return new type.ImmutableDenseMatrix(arg);
      }
      Index.prototype.clone = function() {
        var index = new Index();
        index._dimensions = clone(this._dimensions);
        index._isScalar = this._isScalar;
        return index;
      };
      Index.create = function(ranges) {
        var index = new Index();
        Index.apply(index, ranges);
        return index;
      };
      Index.prototype.size = function() {
        var size = [];
        for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
          var d = this._dimensions[i];
          size[i] = typeof d === "string" ? 1 : d.size()[0];
        }
        return size;
      };
      Index.prototype.max = function() {
        var values = [];
        for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
          var range = this._dimensions[i];
          values[i] = typeof range === "string" ? range : range.max();
        }
        return values;
      };
      Index.prototype.min = function() {
        var values = [];
        for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
          var range = this._dimensions[i];
          values[i] = typeof range === "string" ? range : range.min();
        }
        return values;
      };
      Index.prototype.forEach = function(callback) {
        for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
          callback(this._dimensions[i], i, this);
        }
      };
      Index.prototype.dimension = function(dim) {
        return this._dimensions[dim] || null;
      };
      Index.prototype.isObjectProperty = function() {
        return this._dimensions.length === 1 && typeof this._dimensions[0] === "string";
      };
      Index.prototype.getObjectProperty = function() {
        return this.isObjectProperty() ? this._dimensions[0] : null;
      };
      Index.prototype.isScalar = function() {
        return this._isScalar;
      };
      Index.prototype.toArray = function() {
        var array = [];
        for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
          var dimension = this._dimensions[i];
          array.push(typeof dimension === "string" ? dimension : dimension.toArray());
        }
        return array;
      };
      Index.prototype.valueOf = Index.prototype.toArray;
      Index.prototype.toString = function() {
        var strings = [];
        for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
          var dimension = this._dimensions[i];
          if (typeof dimension === "string") {
            strings.push(JSON.stringify(dimension));
          } else {
            strings.push(dimension.toString());
          }
        }
        return "[" + strings.join(", ") + "]";
      };
      Index.prototype.toJSON = function() {
        return {
          mathjs: "Index",
          dimensions: this._dimensions
        };
      };
      Index.fromJSON = function(json) {
        return Index.create(json.dimensions);
      };
      return Index;
    }
    exports.name = "Index";
    exports.path = "type";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/type/matrix/Range.js
var require_Range = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/type/matrix/Range.js"(exports) {
    "use strict";
    var number = require_number();
    function factory(type, config, load, typed) {
      function Range(start, end, step) {
        if (!(this instanceof Range)) {
          throw new SyntaxError("Constructor must be called with the new operator");
        }
        if (start != null) {
          if (start.isBigNumber === true)
            start = start.toNumber();
          else if (typeof start !== "number")
            throw new TypeError("Parameter start must be a number");
        }
        if (end != null) {
          if (end.isBigNumber === true)
            end = end.toNumber();
          else if (typeof end !== "number")
            throw new TypeError("Parameter end must be a number");
        }
        if (step != null) {
          if (step.isBigNumber === true)
            step = step.toNumber();
          else if (typeof step !== "number")
            throw new TypeError("Parameter step must be a number");
        }
        this.start = start != null ? parseFloat(start) : 0;
        this.end = end != null ? parseFloat(end) : 0;
        this.step = step != null ? parseFloat(step) : 1;
      }
      Range.prototype.type = "Range";
      Range.prototype.isRange = true;
      Range.parse = function(str) {
        if (typeof str !== "string") {
          return null;
        }
        var args = str.split(":");
        var nums = args.map(function(arg) {
          return parseFloat(arg);
        });
        var invalid = nums.some(function(num) {
          return isNaN(num);
        });
        if (invalid) {
          return null;
        }
        switch (nums.length) {
          case 2:
            return new Range(nums[0], nums[1]);
          case 3:
            return new Range(nums[0], nums[2], nums[1]);
          default:
            return null;
        }
      };
      Range.prototype.clone = function() {
        return new Range(this.start, this.end, this.step);
      };
      Range.prototype.size = function() {
        var len = 0, start = this.start, step = this.step, end = this.end, diff = end - start;
        if (number.sign(step) == number.sign(diff)) {
          len = Math.ceil(diff / step);
        } else if (diff == 0) {
          len = 0;
        }
        if (isNaN(len)) {
          len = 0;
        }
        return [len];
      };
      Range.prototype.min = function() {
        var size = this.size()[0];
        if (size > 0) {
          if (this.step > 0) {
            return this.start;
          } else {
            return this.start + (size - 1) * this.step;
          }
        } else {
          return void 0;
        }
      };
      Range.prototype.max = function() {
        var size = this.size()[0];
        if (size > 0) {
          if (this.step > 0) {
            return this.start + (size - 1) * this.step;
          } else {
            return this.start;
          }
        } else {
          return void 0;
        }
      };
      Range.prototype.forEach = function(callback) {
        var x = this.start;
        var step = this.step;
        var end = this.end;
        var i = 0;
        if (step > 0) {
          while (x < end) {
            callback(x, [i], this);
            x += step;
            i++;
          }
        } else if (step < 0) {
          while (x > end) {
            callback(x, [i], this);
            x += step;
            i++;
          }
        }
      };
      Range.prototype.map = function(callback) {
        var array = [];
        this.forEach(function(value, index, obj) {
          array[index[0]] = callback(value, index, obj);
        });
        return array;
      };
      Range.prototype.toArray = function() {
        var array = [];
        this.forEach(function(value, index) {
          array[index[0]] = value;
        });
        return array;
      };
      Range.prototype.valueOf = function() {
        return this.toArray();
      };
      Range.prototype.format = function(options) {
        var str = number.format(this.start, options);
        if (this.step != 1) {
          str += ":" + number.format(this.step, options);
        }
        str += ":" + number.format(this.end, options);
        return str;
      };
      Range.prototype.toString = function() {
        return this.format();
      };
      Range.prototype.toJSON = function() {
        return {
          mathjs: "Range",
          start: this.start,
          end: this.end,
          step: this.step
        };
      };
      Range.fromJSON = function(json) {
        return new Range(json.start, json.end, json.step);
      };
      return Range;
    }
    exports.name = "Range";
    exports.path = "type";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/type/matrix/function/index.js
var require_function2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/type/matrix/function/index.js"(exports) {
    "use strict";
    function factory(type, config, load, typed) {
      return typed("index", {
        "...number | string | BigNumber | Range | Array | Matrix": function(args) {
          var ranges = args.map(function(arg) {
            if (arg && arg.isBigNumber === true) {
              return arg.toNumber();
            } else if (arg && (Array.isArray(arg) || arg.isMatrix === true)) {
              return arg.map(function(elem) {
                return elem && elem.isBigNumber === true ? elem.toNumber() : elem;
              });
            } else {
              return arg;
            }
          });
          var res = new type.Index();
          type.Index.apply(res, ranges);
          return res;
        }
      });
    }
    exports.name = "index";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/type/matrix/function/sparse.js
var require_sparse = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/type/matrix/function/sparse.js"(exports) {
    "use strict";
    function factory(type, config, load, typed) {
      var SparseMatrix = type.SparseMatrix;
      var sparse = typed("sparse", {
        "": function() {
          return new SparseMatrix([]);
        },
        "string": function(datatype) {
          return new SparseMatrix([], datatype);
        },
        "Array | Matrix": function(data) {
          return new SparseMatrix(data);
        },
        "Array | Matrix, string": function(data, datatype) {
          return new SparseMatrix(data, datatype);
        }
      });
      sparse.toTex = {
        0: "\\begin{bsparse}\\end{bsparse}",
        1: "\\left(${args[0]}\\right)"
      };
      return sparse;
    }
    exports.name = "sparse";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/type/matrix/index.js
var require_matrix2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/type/matrix/index.js"(exports, module) {
    module.exports = [
      // types
      require_Matrix(),
      require_DenseMatrix(),
      require_SparseMatrix(),
      require_Spa(),
      require_FibonacciHeap(),
      require_ImmutableDenseMatrix(),
      require_MatrixIndex(),
      require_Range(),
      // construction functions
      require_function2(),
      require_matrix(),
      require_sparse()
    ];
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/type/number.js
var require_number2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/type/number.js"(exports) {
    "use strict";
    var deepMap = require_deepMap();
    function factory(type, config, load, typed) {
      var number = typed("number", {
        "": function() {
          return 0;
        },
        "number": function(x) {
          return x;
        },
        "string": function(x) {
          var num = Number(x);
          if (isNaN(num)) {
            throw new SyntaxError('String "' + x + '" is no valid number');
          }
          return num;
        },
        "BigNumber": function(x) {
          return x.toNumber();
        },
        "Fraction": function(x) {
          return x.valueOf();
        },
        "Unit": function(x) {
          throw new Error("Second argument with valueless unit expected");
        },
        "Unit, string | Unit": function(unit, valuelessUnit) {
          return unit.toNumber(valuelessUnit);
        },
        "Array | Matrix": function(x) {
          return deepMap(x, number);
        }
      });
      number.toTex = {
        0: "0",
        1: "\\left(${args[0]}\\right)",
        2: "\\left(\\left(${args[0]}\\right)${args[1]}\\right)"
      };
      return number;
    }
    exports.name = "number";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/type/resultset/ResultSet.js
var require_ResultSet = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/type/resultset/ResultSet.js"(exports) {
    "use strict";
    function factory(type, config, load, typed) {
      function ResultSet(entries) {
        if (!(this instanceof ResultSet)) {
          throw new SyntaxError("Constructor must be called with the new operator");
        }
        this.entries = entries || [];
      }
      ResultSet.prototype.type = "ResultSet";
      ResultSet.prototype.isResultSet = true;
      ResultSet.prototype.valueOf = function() {
        return this.entries;
      };
      ResultSet.prototype.toString = function() {
        return "[" + this.entries.join(", ") + "]";
      };
      ResultSet.prototype.toJSON = function() {
        return {
          mathjs: "ResultSet",
          entries: this.entries
        };
      };
      ResultSet.fromJSON = function(json) {
        return new ResultSet(json.entries);
      };
      return ResultSet;
    }
    exports.name = "ResultSet";
    exports.path = "type";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/type/resultset/index.js
var require_resultset = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/type/resultset/index.js"(exports, module) {
    module.exports = [
      // type
      require_ResultSet()
    ];
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/type/string.js
var require_string2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/type/string.js"(exports) {
    "use strict";
    var deepMap = require_deepMap();
    var number = require_number();
    function factory(type, config, load, typed) {
      var string = typed("string", {
        "": function() {
          return "";
        },
        "number": number.format,
        "null": function(x) {
          return "null";
        },
        "boolean": function(x) {
          return x + "";
        },
        "string": function(x) {
          return x;
        },
        "Array | Matrix": function(x) {
          return deepMap(x, string);
        },
        "any": function(x) {
          return String(x);
        }
      });
      string.toTex = {
        0: '\\mathtt{""}',
        1: "\\mathrm{string}\\left(${args[0]}\\right)"
      };
      return string;
    }
    exports.name = "string";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/utils/bignumber/constants.js
var require_constants = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/utils/bignumber/constants.js"(exports) {
    var memoize = require_function().memoize;
    exports.e = memoize(function(BigNumber) {
      return new BigNumber(1).exp();
    }, hasher);
    exports.phi = memoize(function(BigNumber) {
      return new BigNumber(1).plus(new BigNumber(5).sqrt()).div(2);
    }, hasher);
    exports.pi = memoize(function(BigNumber) {
      return pi = BigNumber.acos(-1);
    }, hasher);
    exports.tau = memoize(function(BigNumber) {
      return exports.pi(BigNumber).times(2);
    }, hasher);
    function hasher(args) {
      return args[0].precision;
    }
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/arithmetic/unaryMinus.js
var require_unaryMinus = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/arithmetic/unaryMinus.js"(exports) {
    "use strict";
    var deepMap = require_deepMap();
    function factory(type, config, load, typed) {
      var latex = require_latex();
      var unaryMinus = typed("unaryMinus", {
        "number": function(x) {
          return -x;
        },
        "Complex": function(x) {
          return x.neg();
        },
        "BigNumber": function(x) {
          return x.neg();
        },
        "Fraction": function(x) {
          return x.neg();
        },
        "Unit": function(x) {
          var res = x.clone();
          res.value = unaryMinus(x.value);
          return res;
        },
        "Array | Matrix": function(x) {
          return deepMap(x, unaryMinus, true);
        }
        // TODO: add support for string
      });
      unaryMinus.toTex = {
        1: latex.operators["unaryMinus"] + "\\left(${args[0]}\\right)"
      };
      return unaryMinus;
    }
    exports.name = "unaryMinus";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/type/matrix/utils/algorithm05.js
var require_algorithm05 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/type/matrix/utils/algorithm05.js"(exports) {
    "use strict";
    var DimensionError = require_DimensionError();
    function factory(type, config, load, typed) {
      var equalScalar = load(require_equalScalar());
      var SparseMatrix = type.SparseMatrix;
      var algorithm05 = function(a, b, callback) {
        var avalues = a._values;
        var aindex = a._index;
        var aptr = a._ptr;
        var asize = a._size;
        var adt = a._datatype;
        var bvalues = b._values;
        var bindex = b._index;
        var bptr = b._ptr;
        var bsize = b._size;
        var bdt = b._datatype;
        if (asize.length !== bsize.length)
          throw new DimensionError(asize.length, bsize.length);
        if (asize[0] !== bsize[0] || asize[1] !== bsize[1])
          throw new RangeError("Dimension mismatch. Matrix A (" + asize + ") must match Matrix B (" + bsize + ")");
        var rows = asize[0];
        var columns = asize[1];
        var dt;
        var eq = equalScalar;
        var zero = 0;
        var cf = callback;
        if (typeof adt === "string" && adt === bdt) {
          dt = adt;
          eq = typed.find(equalScalar, [dt, dt]);
          zero = typed.convert(0, dt);
          cf = typed.find(callback, [dt, dt]);
        }
        var cvalues = avalues && bvalues ? [] : void 0;
        var cindex = [];
        var cptr = [];
        var c = new SparseMatrix({
          values: cvalues,
          index: cindex,
          ptr: cptr,
          size: [rows, columns],
          datatype: dt
        });
        var xa = cvalues ? [] : void 0;
        var xb = cvalues ? [] : void 0;
        var wa = [];
        var wb = [];
        var i, j, k, k1;
        for (j = 0; j < columns; j++) {
          cptr[j] = cindex.length;
          var mark = j + 1;
          for (k = aptr[j], k1 = aptr[j + 1]; k < k1; k++) {
            i = aindex[k];
            cindex.push(i);
            wa[i] = mark;
            if (xa)
              xa[i] = avalues[k];
          }
          for (k = bptr[j], k1 = bptr[j + 1]; k < k1; k++) {
            i = bindex[k];
            if (wa[i] !== mark) {
              cindex.push(i);
            }
            wb[i] = mark;
            if (xb)
              xb[i] = bvalues[k];
          }
          if (cvalues) {
            k = cptr[j];
            while (k < cindex.length) {
              i = cindex[k];
              var wai = wa[i];
              var wbi = wb[i];
              if (wai === mark || wbi === mark) {
                var va = wai === mark ? xa[i] : zero;
                var vb = wbi === mark ? xb[i] : zero;
                var vc = cf(va, vb);
                if (!eq(vc, zero)) {
                  cvalues.push(vc);
                  k++;
                } else {
                  cindex.splice(k, 1);
                }
              }
            }
          }
        }
        cptr[columns] = cindex.length;
        return c;
      };
      return algorithm05;
    }
    exports.name = "algorithm05";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/arithmetic/subtract.js
var require_subtract = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/arithmetic/subtract.js"(exports) {
    "use strict";
    var DimensionError = require_DimensionError();
    function factory(type, config, load, typed) {
      var latex = require_latex();
      var matrix = load(require_matrix());
      var addScalar = load(require_addScalar());
      var unaryMinus = load(require_unaryMinus());
      var algorithm01 = load(require_algorithm01());
      var algorithm03 = load(require_algorithm03());
      var algorithm05 = load(require_algorithm05());
      var algorithm10 = load(require_algorithm10());
      var algorithm13 = load(require_algorithm13());
      var algorithm14 = load(require_algorithm14());
      var subtract = typed("subtract", {
        "number, number": function(x, y) {
          return x - y;
        },
        "Complex, Complex": function(x, y) {
          return x.sub(y);
        },
        "BigNumber, BigNumber": function(x, y) {
          return x.minus(y);
        },
        "Fraction, Fraction": function(x, y) {
          return x.sub(y);
        },
        "Unit, Unit": function(x, y) {
          if (x.value == null) {
            throw new Error("Parameter x contains a unit with undefined value");
          }
          if (y.value == null) {
            throw new Error("Parameter y contains a unit with undefined value");
          }
          if (!x.equalBase(y)) {
            throw new Error("Units do not match");
          }
          var res = x.clone();
          res.value = subtract(res.value, y.value);
          res.fixPrefix = false;
          return res;
        },
        "Matrix, Matrix": function(x, y) {
          var xsize = x.size();
          var ysize = y.size();
          if (xsize.length !== ysize.length)
            throw new DimensionError(xsize.length, ysize.length);
          var c;
          switch (x.storage()) {
            case "sparse":
              switch (y.storage()) {
                case "sparse":
                  c = algorithm05(x, y, subtract);
                  break;
                default:
                  c = algorithm03(y, x, subtract, true);
                  break;
              }
              break;
            default:
              switch (y.storage()) {
                case "sparse":
                  c = algorithm01(x, y, subtract, false);
                  break;
                default:
                  c = algorithm13(x, y, subtract);
                  break;
              }
              break;
          }
          return c;
        },
        "Array, Array": function(x, y) {
          return subtract(matrix(x), matrix(y)).valueOf();
        },
        "Array, Matrix": function(x, y) {
          return subtract(matrix(x), y);
        },
        "Matrix, Array": function(x, y) {
          return subtract(x, matrix(y));
        },
        "Matrix, any": function(x, y) {
          var c;
          switch (x.storage()) {
            case "sparse":
              c = algorithm10(x, unaryMinus(y), addScalar);
              break;
            default:
              c = algorithm14(x, y, subtract);
              break;
          }
          return c;
        },
        "any, Matrix": function(x, y) {
          var c;
          switch (y.storage()) {
            case "sparse":
              c = algorithm10(y, x, subtract, true);
              break;
            default:
              c = algorithm14(y, x, subtract, true);
              break;
          }
          return c;
        },
        "Array, any": function(x, y) {
          return algorithm14(matrix(x), y, subtract, false).valueOf();
        },
        "any, Array": function(x, y) {
          return algorithm14(matrix(y), x, subtract, true).valueOf();
        }
      });
      subtract.toTex = {
        2: "\\left(${args[0]}" + latex.operators["subtract"] + "${args[1]}\\right)"
      };
      return subtract;
    }
    exports.name = "subtract";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/arithmetic/multiplyScalar.js
var require_multiplyScalar = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/arithmetic/multiplyScalar.js"(exports) {
    "use strict";
    function factory(type, config, load, typed) {
      var multiplyScalar = typed("multiplyScalar", {
        "number, number": function(x, y) {
          return x * y;
        },
        "Complex, Complex": function(x, y) {
          return x.mul(y);
        },
        "BigNumber, BigNumber": function(x, y) {
          return x.times(y);
        },
        "Fraction, Fraction": function(x, y) {
          return x.mul(y);
        },
        "number | Fraction | BigNumber | Complex, Unit": function(x, y) {
          var res = y.clone();
          res.value = res.value === null ? res._normalize(x) : multiplyScalar(res.value, x);
          return res;
        },
        "Unit, number | Fraction | BigNumber | Complex": function(x, y) {
          var res = x.clone();
          res.value = res.value === null ? res._normalize(y) : multiplyScalar(res.value, y);
          return res;
        },
        "Unit, Unit": function(x, y) {
          return x.multiply(y);
        }
      });
      return multiplyScalar;
    }
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/arithmetic/divideScalar.js
var require_divideScalar = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/arithmetic/divideScalar.js"(exports) {
    "use strict";
    function factory(type, config, load, typed) {
      var multiplyScalar = load(require_multiplyScalar());
      var divideScalar = typed("divide", {
        "number, number": function(x, y) {
          return x / y;
        },
        "Complex, Complex": function(x, y) {
          return x.div(y);
        },
        "BigNumber, BigNumber": function(x, y) {
          return x.div(y);
        },
        "Fraction, Fraction": function(x, y) {
          return x.div(y);
        },
        "Unit, number | Fraction | BigNumber": function(x, y) {
          var res = x.clone();
          res.value = divideScalar(res.value === null ? res._normalize(1) : res.value, y);
          return res;
        },
        "number | Fraction | BigNumber, Unit": function(x, y) {
          var res = y.pow(-1);
          res.value = multiplyScalar(res.value === null ? res._normalize(1) : res.value, x);
          return res;
        },
        "Unit, Unit": function(x, y) {
          return x.divide(y);
        }
      });
      return divideScalar;
    }
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/matrix/eye.js
var require_eye = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/matrix/eye.js"(exports) {
    "use strict";
    var array = require_array();
    var isInteger = require_number().isInteger;
    function factory(type, config, load, typed) {
      var matrix = load(require_matrix());
      var eye = typed("eye", {
        "": function() {
          return config.matrix === "Matrix" ? matrix([]) : [];
        },
        "string": function(format) {
          return matrix(format);
        },
        "number | BigNumber": function(rows) {
          return _eye(rows, rows, config.matrix === "Matrix" ? "default" : void 0);
        },
        "number | BigNumber, string": function(rows, format) {
          return _eye(rows, rows, format);
        },
        "number | BigNumber, number | BigNumber": function(rows, cols) {
          return _eye(rows, cols, config.matrix === "Matrix" ? "default" : void 0);
        },
        "number | BigNumber, number | BigNumber, string": function(rows, cols, format) {
          return _eye(rows, cols, format);
        },
        "Array": function(size) {
          return _eyeVector(size);
        },
        "Array, string": function(size, format) {
          return _eyeVector(size, format);
        },
        "Matrix": function(size) {
          return _eyeVector(size.valueOf(), size.storage());
        },
        "Matrix, string": function(size, format) {
          return _eyeVector(size.valueOf(), format);
        }
      });
      eye.toTex = void 0;
      return eye;
      function _eyeVector(size, format) {
        switch (size.length) {
          case 0:
            return format ? matrix(format) : [];
          case 1:
            return _eye(size[0], size[0], format);
          case 2:
            return _eye(size[0], size[1], format);
          default:
            throw new Error("Vector containing two values expected");
        }
      }
      function _eye(rows, cols, format) {
        var Big = rows && rows.isBigNumber === true ? type.BigNumber : cols && cols.isBigNumber === true ? type.BigNumber : null;
        if (rows && rows.isBigNumber === true) rows = rows.toNumber();
        if (cols && cols.isBigNumber === true) cols = cols.toNumber();
        if (!isInteger(rows) || rows < 1) {
          throw new Error("Parameters in function eye must be positive integers");
        }
        if (!isInteger(cols) || cols < 1) {
          throw new Error("Parameters in function eye must be positive integers");
        }
        var one = Big ? new type.BigNumber(1) : 1;
        var defaultValue = Big ? new Big(0) : 0;
        var size = [rows, cols];
        if (format) {
          var F = type.Matrix.storage(format);
          return F.diagonal(size, one, 0, defaultValue);
        }
        var res = array.resize([], size, defaultValue);
        var minimum = rows < cols ? rows : cols;
        for (var d = 0; d < minimum; d++) {
          res[d][d] = one;
        }
        return res;
      }
    }
    exports.name = "eye";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/type/matrix/utils/algorithm11.js
var require_algorithm11 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/type/matrix/utils/algorithm11.js"(exports) {
    "use strict";
    function factory(type, config, load, typed) {
      var equalScalar = load(require_equalScalar());
      var SparseMatrix = type.SparseMatrix;
      var algorithm11 = function(s, b, callback, inverse) {
        var avalues = s._values;
        var aindex = s._index;
        var aptr = s._ptr;
        var asize = s._size;
        var adt = s._datatype;
        if (!avalues)
          throw new Error("Cannot perform operation on Pattern Sparse Matrix and Scalar value");
        var rows = asize[0];
        var columns = asize[1];
        var dt;
        var eq = equalScalar;
        var zero = 0;
        var cf = callback;
        if (typeof adt === "string") {
          dt = adt;
          eq = typed.find(equalScalar, [dt, dt]);
          zero = typed.convert(0, dt);
          b = typed.convert(b, dt);
          cf = typed.find(callback, [dt, dt]);
        }
        var cvalues = [];
        var cindex = [];
        var cptr = [];
        var c = new SparseMatrix({
          values: cvalues,
          index: cindex,
          ptr: cptr,
          size: [rows, columns],
          datatype: dt
        });
        for (var j = 0; j < columns; j++) {
          cptr[j] = cindex.length;
          for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
            var i = aindex[k];
            var v = inverse ? cf(b, avalues[k]) : cf(avalues[k], b);
            if (!eq(v, zero)) {
              cindex.push(i);
              cvalues.push(v);
            }
          }
        }
        cptr[columns] = cindex.length;
        return c;
      };
      return algorithm11;
    }
    exports.name = "algorithm11";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/arithmetic/multiply.js
var require_multiply = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/arithmetic/multiply.js"(exports) {
    "use strict";
    var extend = require_object().extend;
    var array = require_array();
    function factory(type, config, load, typed) {
      var latex = require_latex();
      var matrix = load(require_matrix());
      var addScalar = load(require_addScalar());
      var multiplyScalar = load(require_multiplyScalar());
      var equalScalar = load(require_equalScalar());
      var algorithm11 = load(require_algorithm11());
      var algorithm14 = load(require_algorithm14());
      var DenseMatrix = type.DenseMatrix;
      var SparseMatrix = type.SparseMatrix;
      var multiply = typed("multiply", extend({
        // we extend the signatures of multiplyScalar with signatures dealing with matrices
        "Array, Array": function(x, y) {
          _validateMatrixDimensions(array.size(x), array.size(y));
          var m = multiply(matrix(x), matrix(y));
          return m && m.isMatrix === true ? m.valueOf() : m;
        },
        "Matrix, Matrix": function(x, y) {
          var xsize = x.size();
          var ysize = y.size();
          _validateMatrixDimensions(xsize, ysize);
          if (xsize.length === 1) {
            if (ysize.length === 1) {
              return _multiplyVectorVector(x, y, xsize[0]);
            }
            return _multiplyVectorMatrix(x, y);
          }
          if (ysize.length === 1) {
            return _multiplyMatrixVector(x, y);
          }
          return _multiplyMatrixMatrix(x, y);
        },
        "Matrix, Array": function(x, y) {
          return multiply(x, matrix(y));
        },
        "Array, Matrix": function(x, y) {
          return multiply(matrix(x, y.storage()), y);
        },
        "Matrix, any": function(x, y) {
          var c;
          switch (x.storage()) {
            case "sparse":
              c = algorithm11(x, y, multiplyScalar, false);
              break;
            case "dense":
              c = algorithm14(x, y, multiplyScalar, false);
              break;
          }
          return c;
        },
        "any, Matrix": function(x, y) {
          var c;
          switch (y.storage()) {
            case "sparse":
              c = algorithm11(y, x, multiplyScalar, true);
              break;
            case "dense":
              c = algorithm14(y, x, multiplyScalar, true);
              break;
          }
          return c;
        },
        "Array, any": function(x, y) {
          return algorithm14(matrix(x), y, multiplyScalar, false).valueOf();
        },
        "any, Array": function(x, y) {
          return algorithm14(matrix(y), x, multiplyScalar, true).valueOf();
        },
        "any, any": multiplyScalar,
        "any, any, ...any": function(x, y, rest) {
          var result = multiply(x, y);
          for (var i = 0; i < rest.length; i++) {
            result = multiply(result, rest[i]);
          }
          return result;
        }
      }, multiplyScalar.signatures));
      var _validateMatrixDimensions = function(size1, size2) {
        switch (size1.length) {
          case 1:
            switch (size2.length) {
              case 1:
                if (size1[0] !== size2[0]) {
                  throw new RangeError("Dimension mismatch in multiplication. Vectors must have the same length");
                }
                break;
              case 2:
                if (size1[0] !== size2[0]) {
                  throw new RangeError("Dimension mismatch in multiplication. Vector length (" + size1[0] + ") must match Matrix rows (" + size2[0] + ")");
                }
                break;
              default:
                throw new Error("Can only multiply a 1 or 2 dimensional matrix (Matrix B has " + size2.length + " dimensions)");
            }
            break;
          case 2:
            switch (size2.length) {
              case 1:
                if (size1[1] !== size2[0]) {
                  throw new RangeError("Dimension mismatch in multiplication. Matrix columns (" + size1[1] + ") must match Vector length (" + size2[0] + ")");
                }
                break;
              case 2:
                if (size1[1] !== size2[0]) {
                  throw new RangeError("Dimension mismatch in multiplication. Matrix A columns (" + size1[1] + ") must match Matrix B rows (" + size2[0] + ")");
                }
                break;
              default:
                throw new Error("Can only multiply a 1 or 2 dimensional matrix (Matrix B has " + size2.length + " dimensions)");
            }
            break;
          default:
            throw new Error("Can only multiply a 1 or 2 dimensional matrix (Matrix A has " + size1.length + " dimensions)");
        }
      };
      var _multiplyVectorVector = function(a, b, n) {
        if (n === 0)
          throw new Error("Cannot multiply two empty vectors");
        var adata = a._data;
        var adt = a._datatype;
        var bdata = b._data;
        var bdt = b._datatype;
        var dt;
        var af = addScalar;
        var mf = multiplyScalar;
        if (adt && bdt && adt === bdt && typeof adt === "string") {
          dt = adt;
          af = typed.find(addScalar, [dt, dt]);
          mf = typed.find(multiplyScalar, [dt, dt]);
        }
        var c = mf(adata[0], bdata[0]);
        for (var i = 1; i < n; i++) {
          c = af(c, mf(adata[i], bdata[i]));
        }
        return c;
      };
      var _multiplyVectorMatrix = function(a, b) {
        switch (b.storage()) {
          case "dense":
            return _multiplyVectorDenseMatrix(a, b);
        }
        throw new Error("Not implemented");
      };
      var _multiplyVectorDenseMatrix = function(a, b) {
        var adata = a._data;
        var asize = a._size;
        var adt = a._datatype;
        var bdata = b._data;
        var bsize = b._size;
        var bdt = b._datatype;
        var alength = asize[0];
        var bcolumns = bsize[1];
        var dt;
        var af = addScalar;
        var mf = multiplyScalar;
        if (adt && bdt && adt === bdt && typeof adt === "string") {
          dt = adt;
          af = typed.find(addScalar, [dt, dt]);
          mf = typed.find(multiplyScalar, [dt, dt]);
        }
        var c = [];
        for (var j = 0; j < bcolumns; j++) {
          var sum = mf(adata[0], bdata[0][j]);
          for (var i = 1; i < alength; i++) {
            sum = af(sum, mf(adata[i], bdata[i][j]));
          }
          c[j] = sum;
        }
        return new DenseMatrix({
          data: c,
          size: [bcolumns],
          datatype: dt
        });
      };
      var _multiplyMatrixVector = function(a, b) {
        switch (a.storage()) {
          case "dense":
            return _multiplyDenseMatrixVector(a, b);
          case "sparse":
            return _multiplySparseMatrixVector(a, b);
        }
      };
      var _multiplyMatrixMatrix = function(a, b) {
        switch (a.storage()) {
          case "dense":
            switch (b.storage()) {
              case "dense":
                return _multiplyDenseMatrixDenseMatrix(a, b);
              case "sparse":
                return _multiplyDenseMatrixSparseMatrix(a, b);
            }
            break;
          case "sparse":
            switch (b.storage()) {
              case "dense":
                return _multiplySparseMatrixDenseMatrix(a, b);
              case "sparse":
                return _multiplySparseMatrixSparseMatrix(a, b);
            }
            break;
        }
      };
      var _multiplyDenseMatrixVector = function(a, b) {
        var adata = a._data;
        var asize = a._size;
        var adt = a._datatype;
        var bdata = b._data;
        var bdt = b._datatype;
        var arows = asize[0];
        var acolumns = asize[1];
        var dt;
        var af = addScalar;
        var mf = multiplyScalar;
        if (adt && bdt && adt === bdt && typeof adt === "string") {
          dt = adt;
          af = typed.find(addScalar, [dt, dt]);
          mf = typed.find(multiplyScalar, [dt, dt]);
        }
        var c = [];
        for (var i = 0; i < arows; i++) {
          var row = adata[i];
          var sum = mf(row[0], bdata[0]);
          for (var j = 1; j < acolumns; j++) {
            sum = af(sum, mf(row[j], bdata[j]));
          }
          c[i] = sum;
        }
        return new DenseMatrix({
          data: c,
          size: [arows],
          datatype: dt
        });
      };
      var _multiplyDenseMatrixDenseMatrix = function(a, b) {
        var adata = a._data;
        var asize = a._size;
        var adt = a._datatype;
        var bdata = b._data;
        var bsize = b._size;
        var bdt = b._datatype;
        var arows = asize[0];
        var acolumns = asize[1];
        var bcolumns = bsize[1];
        var dt;
        var af = addScalar;
        var mf = multiplyScalar;
        if (adt && bdt && adt === bdt && typeof adt === "string") {
          dt = adt;
          af = typed.find(addScalar, [dt, dt]);
          mf = typed.find(multiplyScalar, [dt, dt]);
        }
        var c = [];
        for (var i = 0; i < arows; i++) {
          var row = adata[i];
          c[i] = [];
          for (var j = 0; j < bcolumns; j++) {
            var sum = mf(row[0], bdata[0][j]);
            for (var x = 1; x < acolumns; x++) {
              sum = af(sum, mf(row[x], bdata[x][j]));
            }
            c[i][j] = sum;
          }
        }
        return new DenseMatrix({
          data: c,
          size: [arows, bcolumns],
          datatype: dt
        });
      };
      var _multiplyDenseMatrixSparseMatrix = function(a, b) {
        var adata = a._data;
        var asize = a._size;
        var adt = a._datatype;
        var bvalues = b._values;
        var bindex = b._index;
        var bptr = b._ptr;
        var bsize = b._size;
        var bdt = b._datatype;
        if (!bvalues)
          throw new Error("Cannot multiply Dense Matrix times Pattern only Matrix");
        var arows = asize[0];
        var bcolumns = bsize[1];
        var dt;
        var af = addScalar;
        var mf = multiplyScalar;
        var eq = equalScalar;
        var zero = 0;
        if (adt && bdt && adt === bdt && typeof adt === "string") {
          dt = adt;
          af = typed.find(addScalar, [dt, dt]);
          mf = typed.find(multiplyScalar, [dt, dt]);
          eq = typed.find(equalScalar, [dt, dt]);
          zero = typed.convert(0, dt);
        }
        var cvalues = [];
        var cindex = [];
        var cptr = [];
        var c = new SparseMatrix({
          values: cvalues,
          index: cindex,
          ptr: cptr,
          size: [arows, bcolumns],
          datatype: dt
        });
        for (var jb = 0; jb < bcolumns; jb++) {
          cptr[jb] = cindex.length;
          var kb0 = bptr[jb];
          var kb1 = bptr[jb + 1];
          if (kb1 > kb0) {
            var last = 0;
            for (var i = 0; i < arows; i++) {
              var mark = i + 1;
              var cij;
              for (var kb = kb0; kb < kb1; kb++) {
                var ib = bindex[kb];
                if (last !== mark) {
                  cij = mf(adata[i][ib], bvalues[kb]);
                  last = mark;
                } else {
                  cij = af(cij, mf(adata[i][ib], bvalues[kb]));
                }
              }
              if (last === mark && !eq(cij, zero)) {
                cindex.push(i);
                cvalues.push(cij);
              }
            }
          }
        }
        cptr[bcolumns] = cindex.length;
        return c;
      };
      var _multiplySparseMatrixVector = function(a, b) {
        var avalues = a._values;
        var aindex = a._index;
        var aptr = a._ptr;
        var adt = a._datatype;
        if (!avalues)
          throw new Error("Cannot multiply Pattern only Matrix times Dense Matrix");
        var bdata = b._data;
        var bdt = b._datatype;
        var arows = a._size[0];
        var brows = b._size[0];
        var cvalues = [];
        var cindex = [];
        var cptr = [];
        var dt;
        var af = addScalar;
        var mf = multiplyScalar;
        var eq = equalScalar;
        var zero = 0;
        if (adt && bdt && adt === bdt && typeof adt === "string") {
          dt = adt;
          af = typed.find(addScalar, [dt, dt]);
          mf = typed.find(multiplyScalar, [dt, dt]);
          eq = typed.find(equalScalar, [dt, dt]);
          zero = typed.convert(0, dt);
        }
        var x = [];
        var w = [];
        cptr[0] = 0;
        for (var ib = 0; ib < brows; ib++) {
          var vbi = bdata[ib];
          if (!eq(vbi, zero)) {
            for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
              var ia = aindex[ka];
              if (!w[ia]) {
                w[ia] = true;
                cindex.push(ia);
                x[ia] = mf(vbi, avalues[ka]);
              } else {
                x[ia] = af(x[ia], mf(vbi, avalues[ka]));
              }
            }
          }
        }
        for (var p1 = cindex.length, p = 0; p < p1; p++) {
          var ic = cindex[p];
          cvalues[p] = x[ic];
        }
        cptr[1] = cindex.length;
        return new SparseMatrix({
          values: cvalues,
          index: cindex,
          ptr: cptr,
          size: [arows, 1],
          datatype: dt
        });
      };
      var _multiplySparseMatrixDenseMatrix = function(a, b) {
        var avalues = a._values;
        var aindex = a._index;
        var aptr = a._ptr;
        var adt = a._datatype;
        if (!avalues)
          throw new Error("Cannot multiply Pattern only Matrix times Dense Matrix");
        var bdata = b._data;
        var bdt = b._datatype;
        var arows = a._size[0];
        var brows = b._size[0];
        var bcolumns = b._size[1];
        var dt;
        var af = addScalar;
        var mf = multiplyScalar;
        var eq = equalScalar;
        var zero = 0;
        if (adt && bdt && adt === bdt && typeof adt === "string") {
          dt = adt;
          af = typed.find(addScalar, [dt, dt]);
          mf = typed.find(multiplyScalar, [dt, dt]);
          eq = typed.find(equalScalar, [dt, dt]);
          zero = typed.convert(0, dt);
        }
        var cvalues = [];
        var cindex = [];
        var cptr = [];
        var c = new SparseMatrix({
          values: cvalues,
          index: cindex,
          ptr: cptr,
          size: [arows, bcolumns],
          datatype: dt
        });
        var x = [];
        var w = [];
        for (var jb = 0; jb < bcolumns; jb++) {
          cptr[jb] = cindex.length;
          var mark = jb + 1;
          for (var ib = 0; ib < brows; ib++) {
            var vbij = bdata[ib][jb];
            if (!eq(vbij, zero)) {
              for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
                var ia = aindex[ka];
                if (w[ia] !== mark) {
                  w[ia] = mark;
                  cindex.push(ia);
                  x[ia] = mf(vbij, avalues[ka]);
                } else {
                  x[ia] = af(x[ia], mf(vbij, avalues[ka]));
                }
              }
            }
          }
          for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {
            var ic = cindex[p];
            cvalues[p] = x[ic];
          }
        }
        cptr[bcolumns] = cindex.length;
        return c;
      };
      var _multiplySparseMatrixSparseMatrix = function(a, b) {
        var avalues = a._values;
        var aindex = a._index;
        var aptr = a._ptr;
        var adt = a._datatype;
        var bvalues = b._values;
        var bindex = b._index;
        var bptr = b._ptr;
        var bdt = b._datatype;
        var arows = a._size[0];
        var bcolumns = b._size[1];
        var values = avalues && bvalues;
        var dt;
        var af = addScalar;
        var mf = multiplyScalar;
        if (adt && bdt && adt === bdt && typeof adt === "string") {
          dt = adt;
          af = typed.find(addScalar, [dt, dt]);
          mf = typed.find(multiplyScalar, [dt, dt]);
        }
        var cvalues = values ? [] : void 0;
        var cindex = [];
        var cptr = [];
        var c = new SparseMatrix({
          values: cvalues,
          index: cindex,
          ptr: cptr,
          size: [arows, bcolumns],
          datatype: dt
        });
        var x = values ? [] : void 0;
        var w = [];
        var ka, ka0, ka1, kb, kb0, kb1, ia, ib;
        for (var jb = 0; jb < bcolumns; jb++) {
          cptr[jb] = cindex.length;
          var mark = jb + 1;
          for (kb0 = bptr[jb], kb1 = bptr[jb + 1], kb = kb0; kb < kb1; kb++) {
            ib = bindex[kb];
            if (values) {
              for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
                ia = aindex[ka];
                if (w[ia] !== mark) {
                  w[ia] = mark;
                  cindex.push(ia);
                  x[ia] = mf(bvalues[kb], avalues[ka]);
                } else {
                  x[ia] = af(x[ia], mf(bvalues[kb], avalues[ka]));
                }
              }
            } else {
              for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
                ia = aindex[ka];
                if (w[ia] !== mark) {
                  w[ia] = mark;
                  cindex.push(ia);
                }
              }
            }
          }
          if (values) {
            for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {
              var ic = cindex[p];
              cvalues[p] = x[ic];
            }
          }
        }
        cptr[bcolumns] = cindex.length;
        return c;
      };
      multiply.toTex = {
        2: "\\left(${args[0]}" + latex.operators["multiply"] + "${args[1]}\\right)"
      };
      return multiply;
    }
    exports.name = "multiply";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/arithmetic/pow.js
var require_pow = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/arithmetic/pow.js"(exports) {
    "use strict";
    var isInteger = require_number().isInteger;
    var size = require_array().size;
    function factory(type, config, load, typed) {
      var latex = require_latex();
      var eye = load(require_eye());
      var multiply = load(require_multiply());
      var matrix = load(require_matrix());
      var fraction = load(require_fraction2());
      var number = load(require_number2());
      var pow = typed("pow", {
        "number, number": _pow,
        "Complex, Complex": function(x, y) {
          return x.pow(y);
        },
        "BigNumber, BigNumber": function(x, y) {
          if (y.isInteger() || x >= 0 || config.predictable) {
            return x.pow(y);
          } else {
            return new type.Complex(x.toNumber(), 0).pow(y.toNumber(), 0);
          }
        },
        "Fraction, Fraction": function(x, y) {
          if (y.d !== 1) {
            if (config.predictable) {
              throw new Error("Function pow does not support non-integer exponents for fractions.");
            } else {
              return _pow(x.valueOf(), y.valueOf());
            }
          } else {
            return x.pow(y);
          }
        },
        "Array, number": _powArray,
        "Array, BigNumber": function(x, y) {
          return _powArray(x, y.toNumber());
        },
        "Matrix, number": _powMatrix,
        "Matrix, BigNumber": function(x, y) {
          return _powMatrix(x, y.toNumber());
        },
        "Unit, number": function(x, y) {
          return x.pow(y);
        }
      });
      function _pow(x, y) {
        if (config.predictable && !isInteger(y) && x < 0) {
          try {
            var yFrac = fraction(y);
            var yNum = number(yFrac);
            if (y === yNum || Math.abs((y - yNum) / y) < 1e-14) {
              if (yFrac.d % 2 === 1) {
                return (yFrac.n % 2 === 0 ? 1 : -1) * Math.pow(-x, y);
              }
            }
          } catch (ex) {
          }
        }
        if (isInteger(y) || x >= 0 || config.predictable) {
          return Math.pow(x, y);
        } else {
          return new type.Complex(x, 0).pow(y, 0);
        }
      }
      function _powArray(x, y) {
        if (!isInteger(y) || y < 0) {
          throw new TypeError("For A^b, b must be a positive integer (value is " + y + ")");
        }
        var s = size(x);
        if (s.length != 2) {
          throw new Error("For A^b, A must be 2 dimensional (A has " + s.length + " dimensions)");
        }
        if (s[0] != s[1]) {
          throw new Error("For A^b, A must be square (size is " + s[0] + "x" + s[1] + ")");
        }
        var res = eye(s[0]).valueOf();
        var px = x;
        while (y >= 1) {
          if ((y & 1) == 1) {
            res = multiply(px, res);
          }
          y >>= 1;
          px = multiply(px, px);
        }
        return res;
      }
      function _powMatrix(x, y) {
        return matrix(_powArray(x.valueOf(), y));
      }
      pow.toTex = {
        2: "\\left(${args[0]}\\right)" + latex.operators["pow"] + "{${args[1]}}"
      };
      return pow;
    }
    exports.name = "pow";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/arithmetic/abs.js
var require_abs = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/arithmetic/abs.js"(exports) {
    "use strict";
    var deepMap = require_deepMap();
    function factory(type, config, load, typed) {
      var abs = typed("abs", {
        "number": Math.abs,
        "Complex": function(x) {
          return x.abs();
        },
        "BigNumber": function(x) {
          return x.abs();
        },
        "Fraction": function(x) {
          return x.abs();
        },
        "Array | Matrix": function(x) {
          return deepMap(x, abs, true);
        },
        "Unit": function(x) {
          return x.abs();
        }
      });
      abs.toTex = { 1: "\\left|${args[0]}\\right|" };
      return abs;
    }
    exports.name = "abs";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/arithmetic/fix.js
var require_fix = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/arithmetic/fix.js"(exports) {
    "use strict";
    var deepMap = require_deepMap();
    function factory(type, config, load, typed) {
      var fix = typed("fix", {
        "number": function(x) {
          return x > 0 ? Math.floor(x) : Math.ceil(x);
        },
        "Complex": function(x) {
          return new type.Complex(
            x.re > 0 ? Math.floor(x.re) : Math.ceil(x.re),
            x.im > 0 ? Math.floor(x.im) : Math.ceil(x.im)
          );
        },
        "BigNumber": function(x) {
          return x.isNegative() ? x.ceil() : x.floor();
        },
        "Fraction": function(x) {
          return x.s < 0 ? x.ceil() : x.floor();
        },
        "Array | Matrix": function(x) {
          return deepMap(x, fix, true);
        }
      });
      fix.toTex = { 1: "\\mathrm{${name}}\\left(${args[0]}\\right)" };
      return fix;
    }
    exports.name = "fix";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/relational/equal.js
var require_equal = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/relational/equal.js"(exports) {
    "use strict";
    function factory(type, config, load, typed) {
      var matrix = load(require_matrix());
      var equalScalar = load(require_equalScalar());
      var algorithm03 = load(require_algorithm03());
      var algorithm07 = load(require_algorithm07());
      var algorithm12 = load(require_algorithm12());
      var algorithm13 = load(require_algorithm13());
      var algorithm14 = load(require_algorithm14());
      var latex = require_latex();
      var equal = typed("equal", {
        "any, any": function(x, y) {
          if (x === null) {
            return y === null;
          }
          if (y === null) {
            return x === null;
          }
          if (x === void 0) {
            return y === void 0;
          }
          if (y === void 0) {
            return x === void 0;
          }
          return equalScalar(x, y);
        },
        "Matrix, Matrix": function(x, y) {
          var c;
          switch (x.storage()) {
            case "sparse":
              switch (y.storage()) {
                case "sparse":
                  c = algorithm07(x, y, equalScalar);
                  break;
                default:
                  c = algorithm03(y, x, equalScalar, true);
                  break;
              }
              break;
            default:
              switch (y.storage()) {
                case "sparse":
                  c = algorithm03(x, y, equalScalar, false);
                  break;
                default:
                  c = algorithm13(x, y, equalScalar);
                  break;
              }
              break;
          }
          return c;
        },
        "Array, Array": function(x, y) {
          return equal(matrix(x), matrix(y)).valueOf();
        },
        "Array, Matrix": function(x, y) {
          return equal(matrix(x), y);
        },
        "Matrix, Array": function(x, y) {
          return equal(x, matrix(y));
        },
        "Matrix, any": function(x, y) {
          var c;
          switch (x.storage()) {
            case "sparse":
              c = algorithm12(x, y, equalScalar, false);
              break;
            default:
              c = algorithm14(x, y, equalScalar, false);
              break;
          }
          return c;
        },
        "any, Matrix": function(x, y) {
          var c;
          switch (y.storage()) {
            case "sparse":
              c = algorithm12(y, x, equalScalar, true);
              break;
            default:
              c = algorithm14(y, x, equalScalar, true);
              break;
          }
          return c;
        },
        "Array, any": function(x, y) {
          return algorithm14(matrix(x), y, equalScalar, false).valueOf();
        },
        "any, Array": function(x, y) {
          return algorithm14(matrix(y), x, equalScalar, true).valueOf();
        }
      });
      equal.toTex = {
        2: "\\left(${args[0]}" + latex.operators["equal"] + "${args[1]}\\right)"
      };
      return equal;
    }
    exports.name = "equal";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/utils/isNumeric.js
var require_isNumeric = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/utils/isNumeric.js"(exports) {
    "use strict";
    var deepMap = require_deepMap();
    var number = require_number();
    function factory(type, config, load, typed) {
      var isNumeric = typed("isNumeric", {
        "number | BigNumber | Fraction | boolean": function() {
          return true;
        },
        "Complex | Unit | string": function() {
          return false;
        },
        "Array | Matrix": function(x) {
          return deepMap(x, isNumeric);
        }
      });
      return isNumeric;
    }
    exports.name = "isNumeric";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/string/format.js
var require_format = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/string/format.js"(exports) {
    "use strict";
    var string = require_string();
    function factory(type, config, load, typed) {
      var format = typed("format", {
        "any": string.format,
        "any, Object | function | number": string.format
      });
      format.toTex = void 0;
      return format;
    }
    exports.name = "format";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/utils/typeof.js
var require_typeof = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/utils/typeof.js"(exports) {
    "use strict";
    var types = require_types();
    function factory(type, config, load, typed) {
      var _typeof = typed("_typeof", {
        "any": function(x) {
          var t = types.type(x);
          if (t === "Object") {
            if (x.isBigNumber === true) return "BigNumber";
            if (x.isComplex === true) return "Complex";
            if (x.isFraction === true) return "Fraction";
            if (x.isMatrix === true) return "Matrix";
            if (x.isUnit === true) return "Unit";
            if (x.isIndex === true) return "Index";
            if (x.isRange === true) return "Range";
            if (x.isChain === true) return "Chain";
            if (x.isHelp === true) return "Help";
          }
          return t;
        }
      });
      _typeof.toTex = void 0;
      return _typeof;
    }
    exports.name = "typeof";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/type/unit/Unit.js
var require_Unit = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/type/unit/Unit.js"(exports) {
    "use strict";
    var endsWith = require_string().endsWith;
    var clone = require_object().clone;
    var constants = require_constants();
    function factory(type, config, load, typed, math) {
      var add = load(require_addScalar());
      var subtract = load(require_subtract());
      var multiply = load(require_multiplyScalar());
      var divide = load(require_divideScalar());
      var pow = load(require_pow());
      var abs = load(require_abs());
      var fix = load(require_fix());
      var equal = load(require_equal());
      var isNumeric = load(require_isNumeric());
      var format = load(require_format());
      var getTypeOf = load(require_typeof());
      var toNumber = load(require_number2());
      var Complex = load(require_Complex());
      function Unit(value, name2) {
        if (!(this instanceof Unit)) {
          throw new Error("Constructor must be called with the new operator");
        }
        if (!(value === void 0 || isNumeric(value) || value.isComplex)) {
          throw new TypeError("First parameter in Unit constructor must be number, BigNumber, Fraction, Complex, or undefined");
        }
        if (name2 != void 0 && (typeof name2 !== "string" || name2 == "")) {
          throw new TypeError("Second parameter in Unit constructor must be a string");
        }
        if (name2 != void 0) {
          var u = Unit.parse(name2);
          this.units = u.units;
          this.dimensions = u.dimensions;
        } else {
          this.units = [
            {
              unit: UNIT_NONE,
              prefix: PREFIXES.NONE,
              // link to a list with supported prefixes
              power: 0
            }
          ];
          this.dimensions = [];
          for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
            this.dimensions[i] = 0;
          }
        }
        this.value = value != void 0 ? this._normalize(value) : null;
        this.fixPrefix = false;
        this.isUnitListSimplified = true;
      }
      Unit.prototype.type = "Unit";
      Unit.prototype.isUnit = true;
      var text, index, c;
      function skipWhitespace() {
        while (c == " " || c == "	") {
          next();
        }
      }
      function isDigitDot(c2) {
        return c2 >= "0" && c2 <= "9" || c2 == ".";
      }
      function isDigit(c2) {
        return c2 >= "0" && c2 <= "9";
      }
      function next() {
        index++;
        c = text.charAt(index);
      }
      function revert(oldIndex) {
        index = oldIndex;
        c = text.charAt(index);
      }
      function parseNumber() {
        var number = "";
        var oldIndex;
        oldIndex = index;
        if (c == "+") {
          next();
        } else if (c == "-") {
          number += c;
          next();
        }
        if (!isDigitDot(c)) {
          revert(oldIndex);
          return null;
        }
        if (c == ".") {
          number += c;
          next();
          if (!isDigit(c)) {
            revert(oldIndex);
            return null;
          }
        } else {
          while (isDigit(c)) {
            number += c;
            next();
          }
          if (c == ".") {
            number += c;
            next();
          }
        }
        while (isDigit(c)) {
          number += c;
          next();
        }
        if (c == "E" || c == "e") {
          var tentativeNumber = "";
          var tentativeIndex = index;
          tentativeNumber += c;
          next();
          if (c == "+" || c == "-") {
            tentativeNumber += c;
            next();
          }
          if (!isDigit(c)) {
            revert(tentativeIndex);
            return number;
          }
          number = number + tentativeNumber;
          while (isDigit(c)) {
            number += c;
            next();
          }
        }
        return number;
      }
      function parseUnit() {
        var unitName = "";
        var code = text.charCodeAt(index);
        while (code >= 48 && code <= 57 || code >= 65 && code <= 90 || code >= 97 && code <= 122) {
          unitName += c;
          next();
          code = text.charCodeAt(index);
        }
        code = unitName.charCodeAt(0);
        if (code >= 65 && code <= 90 || code >= 97 && code <= 122) {
          return unitName || null;
        } else {
          return null;
        }
      }
      function parseCharacter(toFind) {
        if (c === toFind) {
          next();
          return toFind;
        } else {
          return null;
        }
      }
      Unit.parse = function(str, options) {
        options = options || {};
        text = str;
        index = -1;
        c = "";
        if (typeof text !== "string") {
          throw new TypeError("Invalid argument in Unit.parse, string expected");
        }
        var unit2 = new Unit();
        unit2.units = [];
        next();
        skipWhitespace();
        var valueStr = parseNumber();
        var value = null;
        if (valueStr) {
          if (config.number === "BigNumber") {
            value = new type.BigNumber(valueStr);
          } else if (config.number === "Fraction") {
            value = new type.Fraction(valueStr);
          } else {
            value = parseFloat(valueStr);
          }
        }
        skipWhitespace();
        var powerMultiplierCurrent = 1;
        var expectingUnit = false;
        var powerMultiplierStack = [];
        var powerMultiplierStackProduct = 1;
        while (true) {
          skipWhitespace();
          while (c === "(") {
            powerMultiplierStack.push(powerMultiplierCurrent);
            powerMultiplierStackProduct *= powerMultiplierCurrent;
            powerMultiplierCurrent = 1;
            next();
            skipWhitespace();
          }
          if (c) {
            var oldC = c;
            var uStr = parseUnit();
            if (uStr == null) {
              throw new SyntaxError('Unexpected "' + oldC + '" in "' + text + '" at index ' + index.toString());
            }
          } else {
            break;
          }
          var res = _findUnit(uStr);
          if (res == null) {
            throw new SyntaxError('Unit "' + uStr + '" not found.');
          }
          var power = powerMultiplierCurrent * powerMultiplierStackProduct;
          skipWhitespace();
          if (parseCharacter("^")) {
            skipWhitespace();
            var p = parseNumber();
            if (p == null) {
              throw new SyntaxError('In "' + str + '", "^" must be followed by a floating-point number');
            }
            power *= p;
          }
          unit2.units.push({
            unit: res.unit,
            prefix: res.prefix,
            power
          });
          for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
            unit2.dimensions[i] += (res.unit.dimensions[i] || 0) * power;
          }
          skipWhitespace();
          while (c === ")") {
            if (powerMultiplierStack.length === 0) {
              throw new SyntaxError('Unmatched ")" in "' + text + '" at index ' + index.toString());
            }
            powerMultiplierStackProduct /= powerMultiplierStack.pop();
            next();
            skipWhitespace();
          }
          expectingUnit = false;
          if (parseCharacter("*")) {
            powerMultiplierCurrent = 1;
            expectingUnit = true;
          } else if (parseCharacter("/")) {
            powerMultiplierCurrent = -1;
            expectingUnit = true;
          } else {
            powerMultiplierCurrent = 1;
          }
          if (res.unit.base) {
            var baseDim = res.unit.base.key;
            UNIT_SYSTEMS.auto[baseDim] = {
              unit: res.unit,
              prefix: res.prefix
            };
          }
        }
        skipWhitespace();
        if (c) {
          throw new SyntaxError('Could not parse: "' + str + '"');
        }
        if (expectingUnit) {
          throw new SyntaxError('Trailing characters: "' + str + '"');
        }
        if (powerMultiplierStack.length !== 0) {
          throw new SyntaxError('Unmatched "(" in "' + text + '"');
        }
        if (unit2.units.length == 0 && !options.allowNoUnits) {
          throw new SyntaxError('"' + str + '" contains no units');
        }
        unit2.value = value != void 0 ? unit2._normalize(value) : null;
        return unit2;
      };
      Unit.prototype.clone = function() {
        var unit2 = new Unit();
        unit2.fixPrefix = this.fixPrefix;
        unit2.isUnitListSimplified = this.isUnitListSimplified;
        unit2.value = clone(this.value);
        unit2.dimensions = this.dimensions.slice(0);
        unit2.units = [];
        for (var i = 0; i < this.units.length; i++) {
          unit2.units[i] = {};
          for (var p in this.units[i]) {
            if (this.units[i].hasOwnProperty(p)) {
              unit2.units[i][p] = this.units[i][p];
            }
          }
        }
        return unit2;
      };
      Unit.prototype._isDerived = function() {
        if (this.units.length === 0) {
          return false;
        }
        return this.units.length > 1 || Math.abs(this.units[0].power - 1) > 1e-15;
      };
      Unit.prototype._normalize = function(value) {
        var unitValue, unitOffset, unitPower, unitPrefixValue;
        var convert;
        if (value == null || this.units.length === 0) {
          return value;
        } else if (this._isDerived()) {
          var res = value;
          convert = Unit._getNumberConverter(getTypeOf(value));
          for (var i = 0; i < this.units.length; i++) {
            unitValue = convert(this.units[i].unit.value);
            unitPrefixValue = convert(this.units[i].prefix.value);
            unitPower = convert(this.units[i].power);
            res = multiply(res, pow(multiply(unitValue, unitPrefixValue), unitPower));
          }
          return res;
        } else {
          convert = Unit._getNumberConverter(getTypeOf(value));
          unitValue = convert(this.units[0].unit.value);
          unitOffset = convert(this.units[0].unit.offset);
          unitPrefixValue = convert(this.units[0].prefix.value);
          return multiply(add(value, unitOffset), multiply(unitValue, unitPrefixValue));
        }
      };
      Unit.prototype._denormalize = function(value, prefixValue) {
        var unitValue, unitOffset, unitPower, unitPrefixValue;
        var convert;
        if (value == null || this.units.length === 0) {
          return value;
        } else if (this._isDerived()) {
          var res = value;
          convert = Unit._getNumberConverter(getTypeOf(value));
          for (var i = 0; i < this.units.length; i++) {
            unitValue = convert(this.units[i].unit.value);
            unitPrefixValue = convert(this.units[i].prefix.value);
            unitPower = convert(this.units[i].power);
            res = divide(res, pow(multiply(unitValue, unitPrefixValue), unitPower));
          }
          return res;
        } else {
          convert = Unit._getNumberConverter(getTypeOf(value));
          unitValue = convert(this.units[0].unit.value);
          unitPrefixValue = convert(this.units[0].prefix.value);
          unitOffset = convert(this.units[0].unit.offset);
          if (prefixValue == void 0) {
            return subtract(divide(divide(value, unitValue), unitPrefixValue), unitOffset);
          } else {
            return subtract(divide(divide(value, unitValue), prefixValue), unitOffset);
          }
        }
      };
      function _findUnit(str) {
        if (UNITS.hasOwnProperty(str)) {
          var unit2 = UNITS[str];
          var prefix = unit2.prefixes[""];
          return {
            unit: unit2,
            prefix
          };
        }
        for (var name2 in UNITS) {
          if (UNITS.hasOwnProperty(name2)) {
            if (endsWith(str, name2)) {
              var unit2 = UNITS[name2];
              var prefixLen = str.length - name2.length;
              var prefixName = str.substring(0, prefixLen);
              var prefix = unit2.prefixes[prefixName];
              if (prefix !== void 0) {
                return {
                  unit: unit2,
                  prefix
                };
              }
            }
          }
        }
        return null;
      }
      Unit.isValuelessUnit = function(name2) {
        return _findUnit(name2) != null;
      };
      Unit.prototype.hasBase = function(base) {
        if (typeof base === "string") {
          base = BASE_UNITS[base];
        }
        if (!base)
          return false;
        for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
          if (Math.abs((this.dimensions[i] || 0) - (base.dimensions[i] || 0)) > 1e-12) {
            return false;
          }
        }
        return true;
      };
      Unit.prototype.equalBase = function(other) {
        for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
          if (Math.abs((this.dimensions[i] || 0) - (other.dimensions[i] || 0)) > 1e-12) {
            return false;
          }
        }
        return true;
      };
      Unit.prototype.equals = function(other) {
        return this.equalBase(other) && equal(this.value, other.value);
      };
      Unit.prototype.multiply = function(other) {
        var res = this.clone();
        for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
          res.dimensions[i] = (this.dimensions[i] || 0) + (other.dimensions[i] || 0);
        }
        for (var i = 0; i < other.units.length; i++) {
          var inverted = {};
          for (var key2 in other.units[i]) {
            inverted[key2] = other.units[i][key2];
          }
          res.units.push(inverted);
        }
        if (this.value != null || other.value != null) {
          var valThis = this.value == null ? this._normalize(1) : this.value;
          var valOther = other.value == null ? other._normalize(1) : other.value;
          res.value = multiply(valThis, valOther);
        } else {
          res.value = null;
        }
        res.isUnitListSimplified = false;
        return getNumericIfUnitless(res);
      };
      Unit.prototype.divide = function(other) {
        var res = this.clone();
        for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
          res.dimensions[i] = (this.dimensions[i] || 0) - (other.dimensions[i] || 0);
        }
        for (var i = 0; i < other.units.length; i++) {
          var inverted = {};
          for (var key2 in other.units[i]) {
            inverted[key2] = other.units[i][key2];
          }
          inverted.power = -inverted.power;
          res.units.push(inverted);
        }
        if (this.value != null || other.value != null) {
          var valThis = this.value == null ? this._normalize(1) : this.value;
          var valOther = other.value == null ? other._normalize(1) : other.value;
          res.value = divide(valThis, valOther);
        } else {
          res.value = null;
        }
        res.isUnitListSimplified = false;
        return getNumericIfUnitless(res);
      };
      Unit.prototype.pow = function(p) {
        var res = this.clone();
        for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
          res.dimensions[i] = (this.dimensions[i] || 0) * p;
        }
        for (var i = 0; i < res.units.length; i++) {
          res.units[i].power *= p;
        }
        if (res.value != null) {
          res.value = pow(res.value, p);
        } else {
          res.value = null;
        }
        res.isUnitListSimplified = false;
        return getNumericIfUnitless(res);
      };
      var getNumericIfUnitless = function(unit2) {
        if (unit2.equalBase(BASE_UNITS.NONE) && unit2.value !== null && !config.predictable) {
          return unit2.value;
        } else {
          return unit2;
        }
      };
      Unit.prototype.abs = function() {
        var ret = this.clone();
        ret.value = abs(ret.value);
        for (var i in ret.units) {
          if (ret.units[i].unit.name === "VA" || ret.units[i].unit.name === "VAR") {
            ret.units[i].unit = UNITS["W"];
          }
        }
        return ret;
      };
      Unit.prototype.to = function(valuelessUnit) {
        var other;
        var value = this.value == null ? this._normalize(1) : this.value;
        if (typeof valuelessUnit === "string") {
          other = Unit.parse(valuelessUnit);
          if (!this.equalBase(other)) {
            throw new Error("Units do not match");
          }
          if (other.value !== null) {
            throw new Error("Cannot convert to a unit with a value");
          }
          other.value = clone(value);
          other.fixPrefix = true;
          other.isUnitListSimplified = true;
          return other;
        } else if (valuelessUnit && valuelessUnit.isUnit) {
          if (!this.equalBase(valuelessUnit)) {
            throw new Error("Units do not match");
          }
          if (valuelessUnit.value !== null) {
            throw new Error("Cannot convert to a unit with a value");
          }
          other = valuelessUnit.clone();
          other.value = clone(value);
          other.fixPrefix = true;
          other.isUnitListSimplified = true;
          return other;
        } else {
          throw new Error("String or Unit expected as parameter");
        }
      };
      Unit.prototype.toNumber = function(valuelessUnit) {
        return toNumber(this.toNumeric(valuelessUnit));
      };
      Unit.prototype.toNumeric = function(valuelessUnit) {
        var other = this;
        if (valuelessUnit) {
          other = this.to(valuelessUnit);
        }
        if (other._isDerived()) {
          return other._denormalize(other.value);
        } else {
          return other._denormalize(other.value, other.units[0].prefix.value);
        }
      };
      Unit.prototype.toString = function() {
        return this.format();
      };
      Unit.prototype.toJSON = function() {
        return {
          mathjs: "Unit",
          value: this._denormalize(this.value),
          unit: this.formatUnits(),
          fixPrefix: this.fixPrefix
        };
      };
      Unit.fromJSON = function(json) {
        var unit2 = new Unit(json.value, json.unit);
        unit2.fixPrefix = json.fixPrefix || false;
        return unit2;
      };
      Unit.prototype.valueOf = Unit.prototype.toString;
      Unit.prototype.simplifyUnitListLazy = function() {
        if (this.isUnitListSimplified || this.value == null) {
          return;
        }
        var proposedUnitList = [];
        var matchingBase;
        for (var key2 in currentUnitSystem) {
          if (this.hasBase(BASE_UNITS[key2])) {
            matchingBase = key2;
            break;
          }
        }
        if (matchingBase === "NONE") {
          this.units = [];
        } else {
          var matchingUnit;
          if (matchingBase) {
            if (currentUnitSystem.hasOwnProperty(matchingBase)) {
              matchingUnit = currentUnitSystem[matchingBase];
            }
          }
          var value;
          var str;
          if (matchingUnit) {
            this.units = [{
              unit: matchingUnit.unit,
              prefix: matchingUnit.prefix,
              power: 1
            }];
          } else {
            var missingBaseDim = false;
            for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
              var baseDim = BASE_DIMENSIONS[i];
              if (Math.abs(this.dimensions[i] || 0) > 1e-12) {
                if (currentUnitSystem.hasOwnProperty(baseDim)) {
                  proposedUnitList.push({
                    unit: currentUnitSystem[baseDim].unit,
                    prefix: currentUnitSystem[baseDim].prefix,
                    power: this.dimensions[i] || 0
                  });
                } else {
                  missingBaseDim = true;
                }
              }
            }
            if (proposedUnitList.length < this.units.length && !missingBaseDim) {
              this.units = proposedUnitList;
            }
          }
        }
        this.isUnitListSimplified = true;
      };
      Unit.prototype.toSI = function() {
        var ret = this.clone();
        var proposedUnitList = [];
        var missingBaseDim = false;
        for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
          var baseDim = BASE_DIMENSIONS[i];
          if (Math.abs(ret.dimensions[i] || 0) > 1e-12) {
            if (UNIT_SYSTEMS["si"].hasOwnProperty(baseDim)) {
              proposedUnitList.push({
                unit: UNIT_SYSTEMS["si"][baseDim].unit,
                prefix: UNIT_SYSTEMS["si"][baseDim].prefix,
                power: ret.dimensions[i] || 0
              });
            } else {
              throw new Error("Cannot express custom unit " + baseDim + " in SI units");
            }
          }
        }
        ret.units = proposedUnitList;
        ret.isUnitListSimplified = true;
        return ret;
      };
      Unit.prototype.formatUnits = function() {
        this.simplifyUnitListLazy();
        var strNum = "";
        var strDen = "";
        var nNum = 0;
        var nDen = 0;
        for (var i = 0; i < this.units.length; i++) {
          if (this.units[i].power > 0) {
            nNum++;
            strNum += " " + this.units[i].prefix.name + this.units[i].unit.name;
            if (Math.abs(this.units[i].power - 1) > 1e-15) {
              strNum += "^" + this.units[i].power;
            }
          } else if (this.units[i].power < 0) {
            nDen++;
          }
        }
        if (nDen > 0) {
          for (var i = 0; i < this.units.length; i++) {
            if (this.units[i].power < 0) {
              if (nNum > 0) {
                strDen += " " + this.units[i].prefix.name + this.units[i].unit.name;
                if (Math.abs(this.units[i].power + 1) > 1e-15) {
                  strDen += "^" + -this.units[i].power;
                }
              } else {
                strDen += " " + this.units[i].prefix.name + this.units[i].unit.name;
                strDen += "^" + this.units[i].power;
              }
            }
          }
        }
        strNum = strNum.substr(1);
        strDen = strDen.substr(1);
        if (nNum > 1 && nDen > 0) {
          strNum = "(" + strNum + ")";
        }
        if (nDen > 1 && nNum > 0) {
          strDen = "(" + strDen + ")";
        }
        var str = strNum;
        if (nNum > 0 && nDen > 0) {
          str += " / ";
        }
        str += strDen;
        return str;
      };
      Unit.prototype.format = function(options) {
        this.simplifyUnitListLazy();
        var isImaginary = false;
        var isReal = true;
        if (typeof this.value !== "undefined" && this.value !== null && this.value.isComplex) {
          isImaginary = Math.abs(this.value.re) < 1e-14;
          isReal = Math.abs(this.value.im) < 1e-14;
        }
        for (var i in this.units) {
          if (this.units[i].unit) {
            if (this.units[i].unit.name === "VA" && isImaginary) {
              this.units[i].unit = UNITS["VAR"];
            } else if (this.units[i].unit.name === "VAR" && !isImaginary) {
              this.units[i].unit = UNITS["VA"];
            }
          }
        }
        if (this.units.length === 1 && !this.fixPrefix) {
          if (Math.abs(this.units[0].power - Math.round(this.units[0].power)) < 1e-14) {
            this.units[0].prefix = this._bestPrefix();
          }
        }
        var value = this._denormalize(this.value);
        var str = this.value !== null ? format(value, options || {}) : "";
        var unitStr = this.formatUnits();
        if (this.value && this.value.isComplex) {
          str = "(" + str + ")";
        }
        if (unitStr.length > 0 && str.length > 0) {
          str += " ";
        }
        str += unitStr;
        return str;
      };
      Unit.prototype._bestPrefix = function() {
        if (this.units.length !== 1) {
          throw new Error("Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!");
        }
        if (Math.abs(this.units[0].power - Math.round(this.units[0].power)) >= 1e-14) {
          throw new Error("Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!");
        }
        var absValue = abs(this.value);
        var absUnitValue = abs(this.units[0].unit.value);
        var bestPrefix = this.units[0].prefix;
        if (absValue === 0) {
          return bestPrefix;
        }
        var power = this.units[0].power;
        var bestDiff = Math.log(absValue / Math.pow(bestPrefix.value * absUnitValue, power)) / Math.LN10 - 1.2;
        if (bestDiff > -2.200001 && bestDiff < 1.800001) return bestPrefix;
        bestDiff = Math.abs(bestDiff);
        var prefixes = this.units[0].unit.prefixes;
        for (var p in prefixes) {
          if (prefixes.hasOwnProperty(p)) {
            var prefix = prefixes[p];
            if (prefix.scientific) {
              var diff = Math.abs(
                Math.log(absValue / Math.pow(prefix.value * absUnitValue, power)) / Math.LN10 - 1.2
              );
              if (diff < bestDiff || diff === bestDiff && prefix.name.length < bestPrefix.name.length) {
                bestPrefix = prefix;
                bestDiff = diff;
              }
            }
          }
        }
        return bestPrefix;
      };
      Unit.prototype.splitUnit = function(parts) {
        var x = this.clone();
        var ret = [];
        for (var i = 0; i < parts.length; i++) {
          x = x.to(parts[i]);
          if (i == parts.length - 1) break;
          var fixedVal = fix(x.toNumeric());
          var y = new Unit(fixedVal, parts[i].toString());
          ret.push(y);
          x = subtract(x, y);
        }
        ret.push(x);
        return ret;
      };
      var PREFIXES = {
        NONE: {
          "": { name: "", value: 1, scientific: true }
        },
        SHORT: {
          "": { name: "", value: 1, scientific: true },
          "da": { name: "da", value: 10, scientific: false },
          "h": { name: "h", value: 100, scientific: false },
          "k": { name: "k", value: 1e3, scientific: true },
          "M": { name: "M", value: 1e6, scientific: true },
          "G": { name: "G", value: 1e9, scientific: true },
          "T": { name: "T", value: 1e12, scientific: true },
          "P": { name: "P", value: 1e15, scientific: true },
          "E": { name: "E", value: 1e18, scientific: true },
          "Z": { name: "Z", value: 1e21, scientific: true },
          "Y": { name: "Y", value: 1e24, scientific: true },
          "d": { name: "d", value: 0.1, scientific: false },
          "c": { name: "c", value: 0.01, scientific: false },
          "m": { name: "m", value: 1e-3, scientific: true },
          "u": { name: "u", value: 1e-6, scientific: true },
          "n": { name: "n", value: 1e-9, scientific: true },
          "p": { name: "p", value: 1e-12, scientific: true },
          "f": { name: "f", value: 1e-15, scientific: true },
          "a": { name: "a", value: 1e-18, scientific: true },
          "z": { name: "z", value: 1e-21, scientific: true },
          "y": { name: "y", value: 1e-24, scientific: true }
        },
        LONG: {
          "": { name: "", value: 1, scientific: true },
          "deca": { name: "deca", value: 10, scientific: false },
          "hecto": { name: "hecto", value: 100, scientific: false },
          "kilo": { name: "kilo", value: 1e3, scientific: true },
          "mega": { name: "mega", value: 1e6, scientific: true },
          "giga": { name: "giga", value: 1e9, scientific: true },
          "tera": { name: "tera", value: 1e12, scientific: true },
          "peta": { name: "peta", value: 1e15, scientific: true },
          "exa": { name: "exa", value: 1e18, scientific: true },
          "zetta": { name: "zetta", value: 1e21, scientific: true },
          "yotta": { name: "yotta", value: 1e24, scientific: true },
          "deci": { name: "deci", value: 0.1, scientific: false },
          "centi": { name: "centi", value: 0.01, scientific: false },
          "milli": { name: "milli", value: 1e-3, scientific: true },
          "micro": { name: "micro", value: 1e-6, scientific: true },
          "nano": { name: "nano", value: 1e-9, scientific: true },
          "pico": { name: "pico", value: 1e-12, scientific: true },
          "femto": { name: "femto", value: 1e-15, scientific: true },
          "atto": { name: "atto", value: 1e-18, scientific: true },
          "zepto": { name: "zepto", value: 1e-21, scientific: true },
          "yocto": { name: "yocto", value: 1e-24, scientific: true }
        },
        SQUARED: {
          "": { name: "", value: 1, scientific: true },
          "da": { name: "da", value: 100, scientific: false },
          "h": { name: "h", value: 1e4, scientific: false },
          "k": { name: "k", value: 1e6, scientific: true },
          "M": { name: "M", value: 1e12, scientific: true },
          "G": { name: "G", value: 1e18, scientific: true },
          "T": { name: "T", value: 1e24, scientific: true },
          "P": { name: "P", value: 1e30, scientific: true },
          "E": { name: "E", value: 1e36, scientific: true },
          "Z": { name: "Z", value: 1e42, scientific: true },
          "Y": { name: "Y", value: 1e48, scientific: true },
          "d": { name: "d", value: 0.01, scientific: false },
          "c": { name: "c", value: 1e-4, scientific: false },
          "m": { name: "m", value: 1e-6, scientific: true },
          "u": { name: "u", value: 1e-12, scientific: true },
          "n": { name: "n", value: 1e-18, scientific: true },
          "p": { name: "p", value: 1e-24, scientific: true },
          "f": { name: "f", value: 1e-30, scientific: true },
          "a": { name: "a", value: 1e-36, scientific: true },
          "z": { name: "z", value: 1e-42, scientific: true },
          "y": { name: "y", value: 1e-48, scientific: true }
        },
        CUBIC: {
          "": { name: "", value: 1, scientific: true },
          "da": { name: "da", value: 1e3, scientific: false },
          "h": { name: "h", value: 1e6, scientific: false },
          "k": { name: "k", value: 1e9, scientific: true },
          "M": { name: "M", value: 1e18, scientific: true },
          "G": { name: "G", value: 1e27, scientific: true },
          "T": { name: "T", value: 1e36, scientific: true },
          "P": { name: "P", value: 1e45, scientific: true },
          "E": { name: "E", value: 1e54, scientific: true },
          "Z": { name: "Z", value: 1e63, scientific: true },
          "Y": { name: "Y", value: 1e72, scientific: true },
          "d": { name: "d", value: 1e-3, scientific: false },
          "c": { name: "c", value: 1e-6, scientific: false },
          "m": { name: "m", value: 1e-9, scientific: true },
          "u": { name: "u", value: 1e-18, scientific: true },
          "n": { name: "n", value: 1e-27, scientific: true },
          "p": { name: "p", value: 1e-36, scientific: true },
          "f": { name: "f", value: 1e-45, scientific: true },
          "a": { name: "a", value: 1e-54, scientific: true },
          "z": { name: "z", value: 1e-63, scientific: true },
          "y": { name: "y", value: 1e-72, scientific: true }
        },
        BINARY_SHORT: {
          "": { name: "", value: 1, scientific: true },
          "k": { name: "k", value: 1e3, scientific: true },
          "M": { name: "M", value: 1e6, scientific: true },
          "G": { name: "G", value: 1e9, scientific: true },
          "T": { name: "T", value: 1e12, scientific: true },
          "P": { name: "P", value: 1e15, scientific: true },
          "E": { name: "E", value: 1e18, scientific: true },
          "Z": { name: "Z", value: 1e21, scientific: true },
          "Y": { name: "Y", value: 1e24, scientific: true },
          "Ki": { name: "Ki", value: 1024, scientific: true },
          "Mi": { name: "Mi", value: Math.pow(1024, 2), scientific: true },
          "Gi": { name: "Gi", value: Math.pow(1024, 3), scientific: true },
          "Ti": { name: "Ti", value: Math.pow(1024, 4), scientific: true },
          "Pi": { name: "Pi", value: Math.pow(1024, 5), scientific: true },
          "Ei": { name: "Ei", value: Math.pow(1024, 6), scientific: true },
          "Zi": { name: "Zi", value: Math.pow(1024, 7), scientific: true },
          "Yi": { name: "Yi", value: Math.pow(1024, 8), scientific: true }
        },
        BINARY_LONG: {
          "": { name: "", value: 1, scientific: true },
          "kilo": { name: "kilo", value: 1e3, scientific: true },
          "mega": { name: "mega", value: 1e6, scientific: true },
          "giga": { name: "giga", value: 1e9, scientific: true },
          "tera": { name: "tera", value: 1e12, scientific: true },
          "peta": { name: "peta", value: 1e15, scientific: true },
          "exa": { name: "exa", value: 1e18, scientific: true },
          "zetta": { name: "zetta", value: 1e21, scientific: true },
          "yotta": { name: "yotta", value: 1e24, scientific: true },
          "kibi": { name: "kibi", value: 1024, scientific: true },
          "mebi": { name: "mebi", value: Math.pow(1024, 2), scientific: true },
          "gibi": { name: "gibi", value: Math.pow(1024, 3), scientific: true },
          "tebi": { name: "tebi", value: Math.pow(1024, 4), scientific: true },
          "pebi": { name: "pebi", value: Math.pow(1024, 5), scientific: true },
          "exi": { name: "exi", value: Math.pow(1024, 6), scientific: true },
          "zebi": { name: "zebi", value: Math.pow(1024, 7), scientific: true },
          "yobi": { name: "yobi", value: Math.pow(1024, 8), scientific: true }
        },
        BTU: {
          "": { name: "", value: 1, scientific: true },
          "MM": { name: "MM", value: 1e6, scientific: true }
        }
      };
      PREFIXES.SHORTLONG = {};
      for (var key in PREFIXES.SHORT) {
        if (PREFIXES.SHORT.hasOwnProperty(key)) {
          PREFIXES.SHORTLONG[key] = PREFIXES.SHORT[key];
        }
      }
      for (var key in PREFIXES.LONG) {
        if (PREFIXES.LONG.hasOwnProperty(key)) {
          PREFIXES.SHORTLONG[key] = PREFIXES.LONG[key];
        }
      }
      var BASE_DIMENSIONS = ["MASS", "LENGTH", "TIME", "CURRENT", "TEMPERATURE", "LUMINOUS_INTENSITY", "AMOUNT_OF_SUBSTANCE", "ANGLE", "BIT"];
      var BASE_UNITS = {
        NONE: {
          dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 0]
        },
        MASS: {
          dimensions: [1, 0, 0, 0, 0, 0, 0, 0, 0]
        },
        LENGTH: {
          dimensions: [0, 1, 0, 0, 0, 0, 0, 0, 0]
        },
        TIME: {
          dimensions: [0, 0, 1, 0, 0, 0, 0, 0, 0]
        },
        CURRENT: {
          dimensions: [0, 0, 0, 1, 0, 0, 0, 0, 0]
        },
        TEMPERATURE: {
          dimensions: [0, 0, 0, 0, 1, 0, 0, 0, 0]
        },
        LUMINOUS_INTENSITY: {
          dimensions: [0, 0, 0, 0, 0, 1, 0, 0, 0]
        },
        AMOUNT_OF_SUBSTANCE: {
          dimensions: [0, 0, 0, 0, 0, 0, 1, 0, 0]
        },
        FORCE: {
          dimensions: [1, 1, -2, 0, 0, 0, 0, 0, 0]
        },
        SURFACE: {
          dimensions: [0, 2, 0, 0, 0, 0, 0, 0, 0]
        },
        VOLUME: {
          dimensions: [0, 3, 0, 0, 0, 0, 0, 0, 0]
        },
        ENERGY: {
          dimensions: [1, 2, -2, 0, 0, 0, 0, 0, 0]
        },
        POWER: {
          dimensions: [1, 2, -3, 0, 0, 0, 0, 0, 0]
        },
        PRESSURE: {
          dimensions: [1, -1, -2, 0, 0, 0, 0, 0, 0]
        },
        ELECTRIC_CHARGE: {
          dimensions: [0, 0, 1, 1, 0, 0, 0, 0, 0]
        },
        ELECTRIC_CAPACITANCE: {
          dimensions: [-1, -2, 4, 2, 0, 0, 0, 0, 0]
        },
        ELECTRIC_POTENTIAL: {
          dimensions: [1, 2, -3, -1, 0, 0, 0, 0, 0]
        },
        ELECTRIC_RESISTANCE: {
          dimensions: [1, 2, -3, -2, 0, 0, 0, 0, 0]
        },
        ELECTRIC_INDUCTANCE: {
          dimensions: [1, 2, -2, -2, 0, 0, 0, 0, 0]
        },
        ELECTRIC_CONDUCTANCE: {
          dimensions: [-1, -2, 3, 2, 0, 0, 0, 0, 0]
        },
        MAGNETIC_FLUX: {
          dimensions: [1, 2, -2, -1, 0, 0, 0, 0, 0]
        },
        MAGNETIC_FLUX_DENSITY: {
          dimensions: [1, 0, -2, -1, 0, 0, 0, 0, 0]
        },
        FREQUENCY: {
          dimensions: [0, 0, -1, 0, 0, 0, 0, 0, 0]
        },
        ANGLE: {
          dimensions: [0, 0, 0, 0, 0, 0, 0, 1, 0]
        },
        BIT: {
          dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 1]
        }
      };
      for (var key in BASE_UNITS) {
        BASE_UNITS[key].key = key;
      }
      var BASE_UNIT_NONE = {};
      var UNIT_NONE = { name: "", base: BASE_UNIT_NONE, value: 1, offset: 0, dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 0] };
      var UNITS = {
        // length
        meter: {
          name: "meter",
          base: BASE_UNITS.LENGTH,
          prefixes: PREFIXES.LONG,
          value: 1,
          offset: 0
        },
        inch: {
          name: "inch",
          base: BASE_UNITS.LENGTH,
          prefixes: PREFIXES.NONE,
          value: 0.0254,
          offset: 0
        },
        foot: {
          name: "foot",
          base: BASE_UNITS.LENGTH,
          prefixes: PREFIXES.NONE,
          value: 0.3048,
          offset: 0
        },
        yard: {
          name: "yard",
          base: BASE_UNITS.LENGTH,
          prefixes: PREFIXES.NONE,
          value: 0.9144,
          offset: 0
        },
        mile: {
          name: "mile",
          base: BASE_UNITS.LENGTH,
          prefixes: PREFIXES.NONE,
          value: 1609.344,
          offset: 0
        },
        link: {
          name: "link",
          base: BASE_UNITS.LENGTH,
          prefixes: PREFIXES.NONE,
          value: 0.201168,
          offset: 0
        },
        rod: {
          name: "rod",
          base: BASE_UNITS.LENGTH,
          prefixes: PREFIXES.NONE,
          value: 5.02921,
          offset: 0
        },
        chain: {
          name: "chain",
          base: BASE_UNITS.LENGTH,
          prefixes: PREFIXES.NONE,
          value: 20.1168,
          offset: 0
        },
        angstrom: {
          name: "angstrom",
          base: BASE_UNITS.LENGTH,
          prefixes: PREFIXES.NONE,
          value: 1e-10,
          offset: 0
        },
        m: {
          name: "m",
          base: BASE_UNITS.LENGTH,
          prefixes: PREFIXES.SHORT,
          value: 1,
          offset: 0
        },
        "in": {
          name: "in",
          base: BASE_UNITS.LENGTH,
          prefixes: PREFIXES.NONE,
          value: 0.0254,
          offset: 0
        },
        ft: {
          name: "ft",
          base: BASE_UNITS.LENGTH,
          prefixes: PREFIXES.NONE,
          value: 0.3048,
          offset: 0
        },
        yd: {
          name: "yd",
          base: BASE_UNITS.LENGTH,
          prefixes: PREFIXES.NONE,
          value: 0.9144,
          offset: 0
        },
        mi: {
          name: "mi",
          base: BASE_UNITS.LENGTH,
          prefixes: PREFIXES.NONE,
          value: 1609.344,
          offset: 0
        },
        li: {
          name: "li",
          base: BASE_UNITS.LENGTH,
          prefixes: PREFIXES.NONE,
          value: 0.201168,
          offset: 0
        },
        rd: {
          name: "rd",
          base: BASE_UNITS.LENGTH,
          prefixes: PREFIXES.NONE,
          value: 5.02921,
          offset: 0
        },
        ch: {
          name: "ch",
          base: BASE_UNITS.LENGTH,
          prefixes: PREFIXES.NONE,
          value: 20.1168,
          offset: 0
        },
        mil: {
          name: "mil",
          base: BASE_UNITS.LENGTH,
          prefixes: PREFIXES.NONE,
          value: 254e-7,
          offset: 0
        },
        // 1/1000 inch
        // Surface
        m2: {
          name: "m2",
          base: BASE_UNITS.SURFACE,
          prefixes: PREFIXES.SQUARED,
          value: 1,
          offset: 0
        },
        sqin: {
          name: "sqin",
          base: BASE_UNITS.SURFACE,
          prefixes: PREFIXES.NONE,
          value: 64516e-8,
          offset: 0
        },
        // 645.16 mm2
        sqft: {
          name: "sqft",
          base: BASE_UNITS.SURFACE,
          prefixes: PREFIXES.NONE,
          value: 0.09290304,
          offset: 0
        },
        // 0.09290304 m2
        sqyd: {
          name: "sqyd",
          base: BASE_UNITS.SURFACE,
          prefixes: PREFIXES.NONE,
          value: 0.83612736,
          offset: 0
        },
        // 0.83612736 m2
        sqmi: {
          name: "sqmi",
          base: BASE_UNITS.SURFACE,
          prefixes: PREFIXES.NONE,
          value: 2589988110336e-6,
          offset: 0
        },
        // 2.589988110336 km2
        sqrd: {
          name: "sqrd",
          base: BASE_UNITS.SURFACE,
          prefixes: PREFIXES.NONE,
          value: 25.29295,
          offset: 0
        },
        // 25.29295 m2
        sqch: {
          name: "sqch",
          base: BASE_UNITS.SURFACE,
          prefixes: PREFIXES.NONE,
          value: 404.6873,
          offset: 0
        },
        // 404.6873 m2
        sqmil: {
          name: "sqmil",
          base: BASE_UNITS.SURFACE,
          prefixes: PREFIXES.NONE,
          value: 64516e-14,
          offset: 0
        },
        // 6.4516 * 10^-10 m2
        acre: {
          name: "acre",
          base: BASE_UNITS.SURFACE,
          prefixes: PREFIXES.NONE,
          value: 4046.86,
          offset: 0
        },
        // 4046.86 m2
        hectare: {
          name: "hectare",
          base: BASE_UNITS.SURFACE,
          prefixes: PREFIXES.NONE,
          value: 1e4,
          offset: 0
        },
        // 10000 m2
        // Volume
        m3: {
          name: "m3",
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.CUBIC,
          value: 1,
          offset: 0
        },
        L: {
          name: "L",
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.SHORT,
          value: 1e-3,
          offset: 0
        },
        // litre
        l: {
          name: "l",
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.SHORT,
          value: 1e-3,
          offset: 0
        },
        // litre
        litre: {
          name: "litre",
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.LONG,
          value: 1e-3,
          offset: 0
        },
        cuin: {
          name: "cuin",
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 16387064e-12,
          offset: 0
        },
        // 1.6387064e-5 m3
        cuft: {
          name: "cuft",
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 0.028316846592,
          offset: 0
        },
        // 28.316 846 592 L
        cuyd: {
          name: "cuyd",
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 0.764554857984,
          offset: 0
        },
        // 764.554 857 984 L
        teaspoon: {
          name: "teaspoon",
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 5e-6,
          offset: 0
        },
        // 5 mL
        tablespoon: {
          name: "tablespoon",
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 15e-6,
          offset: 0
        },
        // 15 mL
        //{name: 'cup', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.000240, offset: 0}, // 240 mL  // not possible, we have already another cup
        drop: {
          name: "drop",
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 5e-8,
          offset: 0
        },
        // 0.05 mL = 5e-8 m3
        gtt: {
          name: "gtt",
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 5e-8,
          offset: 0
        },
        // 0.05 mL = 5e-8 m3
        // Liquid volume
        minim: {
          name: "minim",
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 6161152e-14,
          offset: 0
        },
        // 0.06161152 mL
        fluiddram: {
          name: "fluiddram",
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 36966911e-13,
          offset: 0
        },
        // 3.696691 mL
        fluidounce: {
          name: "fluidounce",
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 2957353e-11,
          offset: 0
        },
        // 29.57353 mL
        gill: {
          name: "gill",
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 1182941e-10,
          offset: 0
        },
        // 118.2941 mL
        cc: {
          name: "cc",
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 1e-6,
          offset: 0
        },
        // 1e-6 L
        cup: {
          name: "cup",
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 2365882e-10,
          offset: 0
        },
        // 236.5882 mL
        pint: {
          name: "pint",
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 4731765e-10,
          offset: 0
        },
        // 473.1765 mL
        quart: {
          name: "quart",
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 9463529e-10,
          offset: 0
        },
        // 946.3529 mL
        gallon: {
          name: "gallon",
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 3785412e-9,
          offset: 0
        },
        // 3.785412 L
        beerbarrel: {
          name: "beerbarrel",
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 0.1173478,
          offset: 0
        },
        // 117.3478 L
        oilbarrel: {
          name: "oilbarrel",
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 0.1589873,
          offset: 0
        },
        // 158.9873 L
        hogshead: {
          name: "hogshead",
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 0.238481,
          offset: 0
        },
        // 238.4810 L
        //{name: 'min', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.00000006161152, offset: 0}, // 0.06161152 mL // min is already in use as minute
        fldr: {
          name: "fldr",
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 36966911e-13,
          offset: 0
        },
        // 3.696691 mL
        floz: {
          name: "floz",
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 2957353e-11,
          offset: 0
        },
        // 29.57353 mL
        gi: {
          name: "gi",
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 1182941e-10,
          offset: 0
        },
        // 118.2941 mL
        cp: {
          name: "cp",
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 2365882e-10,
          offset: 0
        },
        // 236.5882 mL
        pt: {
          name: "pt",
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 4731765e-10,
          offset: 0
        },
        // 473.1765 mL
        qt: {
          name: "qt",
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 9463529e-10,
          offset: 0
        },
        // 946.3529 mL
        gal: {
          name: "gal",
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 3785412e-9,
          offset: 0
        },
        // 3.785412 L
        bbl: {
          name: "bbl",
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 0.1173478,
          offset: 0
        },
        // 117.3478 L
        obl: {
          name: "obl",
          base: BASE_UNITS.VOLUME,
          prefixes: PREFIXES.NONE,
          value: 0.1589873,
          offset: 0
        },
        // 158.9873 L
        //{name: 'hogshead', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.2384810, offset: 0}, // 238.4810 L // TODO: hh?
        // Mass
        g: {
          name: "g",
          base: BASE_UNITS.MASS,
          prefixes: PREFIXES.SHORT,
          value: 1e-3,
          offset: 0
        },
        gram: {
          name: "gram",
          base: BASE_UNITS.MASS,
          prefixes: PREFIXES.LONG,
          value: 1e-3,
          offset: 0
        },
        ton: {
          name: "ton",
          base: BASE_UNITS.MASS,
          prefixes: PREFIXES.SHORT,
          value: 907.18474,
          offset: 0
        },
        tonne: {
          name: "tonne",
          base: BASE_UNITS.MASS,
          prefixes: PREFIXES.SHORT,
          value: 1e3,
          offset: 0
        },
        grain: {
          name: "grain",
          base: BASE_UNITS.MASS,
          prefixes: PREFIXES.NONE,
          value: 6479891e-11,
          offset: 0
        },
        dram: {
          name: "dram",
          base: BASE_UNITS.MASS,
          prefixes: PREFIXES.NONE,
          value: 0.0017718451953125,
          offset: 0
        },
        ounce: {
          name: "ounce",
          base: BASE_UNITS.MASS,
          prefixes: PREFIXES.NONE,
          value: 0.028349523125,
          offset: 0
        },
        poundmass: {
          name: "poundmass",
          base: BASE_UNITS.MASS,
          prefixes: PREFIXES.NONE,
          value: 0.45359237,
          offset: 0
        },
        hundredweight: {
          name: "hundredweight",
          base: BASE_UNITS.MASS,
          prefixes: PREFIXES.NONE,
          value: 45.359237,
          offset: 0
        },
        stick: {
          name: "stick",
          base: BASE_UNITS.MASS,
          prefixes: PREFIXES.NONE,
          value: 0.115,
          offset: 0
        },
        stone: {
          name: "stone",
          base: BASE_UNITS.MASS,
          prefixes: PREFIXES.NONE,
          value: 6.35029318,
          offset: 0
        },
        gr: {
          name: "gr",
          base: BASE_UNITS.MASS,
          prefixes: PREFIXES.NONE,
          value: 6479891e-11,
          offset: 0
        },
        dr: {
          name: "dr",
          base: BASE_UNITS.MASS,
          prefixes: PREFIXES.NONE,
          value: 0.0017718451953125,
          offset: 0
        },
        oz: {
          name: "oz",
          base: BASE_UNITS.MASS,
          prefixes: PREFIXES.NONE,
          value: 0.028349523125,
          offset: 0
        },
        lbm: {
          name: "lbm",
          base: BASE_UNITS.MASS,
          prefixes: PREFIXES.NONE,
          value: 0.45359237,
          offset: 0
        },
        cwt: {
          name: "cwt",
          base: BASE_UNITS.MASS,
          prefixes: PREFIXES.NONE,
          value: 45.359237,
          offset: 0
        },
        // Time
        s: {
          name: "s",
          base: BASE_UNITS.TIME,
          prefixes: PREFIXES.SHORT,
          value: 1,
          offset: 0
        },
        min: {
          name: "min",
          base: BASE_UNITS.TIME,
          prefixes: PREFIXES.NONE,
          value: 60,
          offset: 0
        },
        h: {
          name: "h",
          base: BASE_UNITS.TIME,
          prefixes: PREFIXES.NONE,
          value: 3600,
          offset: 0
        },
        second: {
          name: "second",
          base: BASE_UNITS.TIME,
          prefixes: PREFIXES.LONG,
          value: 1,
          offset: 0
        },
        sec: {
          name: "sec",
          base: BASE_UNITS.TIME,
          prefixes: PREFIXES.LONG,
          value: 1,
          offset: 0
        },
        minute: {
          name: "minute",
          base: BASE_UNITS.TIME,
          prefixes: PREFIXES.NONE,
          value: 60,
          offset: 0
        },
        hour: {
          name: "hour",
          base: BASE_UNITS.TIME,
          prefixes: PREFIXES.NONE,
          value: 3600,
          offset: 0
        },
        day: {
          name: "day",
          base: BASE_UNITS.TIME,
          prefixes: PREFIXES.NONE,
          value: 86400,
          offset: 0
        },
        week: {
          name: "week",
          base: BASE_UNITS.TIME,
          prefixes: PREFIXES.NONE,
          value: 7 * 86400,
          offset: 0
        },
        month: {
          name: "month",
          base: BASE_UNITS.TIME,
          prefixes: PREFIXES.NONE,
          value: 2629800,
          //1/12th of Julian year
          offset: 0
        },
        year: {
          name: "year",
          base: BASE_UNITS.TIME,
          prefixes: PREFIXES.NONE,
          value: 31557600,
          //Julian year
          offset: 0
        },
        decade: {
          name: "year",
          base: BASE_UNITS.TIME,
          prefixes: PREFIXES.NONE,
          value: 315576e3,
          //Julian decade
          offset: 0
        },
        century: {
          name: "century",
          base: BASE_UNITS.TIME,
          prefixes: PREFIXES.NONE,
          value: 315576e4,
          //Julian century
          offset: 0
        },
        millennium: {
          name: "millennium",
          base: BASE_UNITS.TIME,
          prefixes: PREFIXES.NONE,
          value: 315576e5,
          //Julian millennium
          offset: 0
        },
        // Frequency
        hertz: {
          name: "Hertz",
          base: BASE_UNITS.FREQUENCY,
          prefixes: PREFIXES.LONG,
          value: 1,
          offset: 0,
          reciprocal: true
        },
        Hz: {
          name: "Hz",
          base: BASE_UNITS.FREQUENCY,
          prefixes: PREFIXES.SHORT,
          value: 1,
          offset: 0,
          reciprocal: true
        },
        // Angle
        rad: {
          name: "rad",
          base: BASE_UNITS.ANGLE,
          prefixes: PREFIXES.LONG,
          value: 1,
          offset: 0
        },
        // deg = rad / (2*pi) * 360 = rad / 0.017453292519943295769236907684888
        deg: {
          name: "deg",
          base: BASE_UNITS.ANGLE,
          prefixes: PREFIXES.LONG,
          value: null,
          // will be filled in by calculateAngleValues()
          offset: 0
        },
        // grad = rad / (2*pi) * 400  = rad / 0.015707963267948966192313216916399
        grad: {
          name: "grad",
          base: BASE_UNITS.ANGLE,
          prefixes: PREFIXES.LONG,
          value: null,
          // will be filled in by calculateAngleValues()
          offset: 0
        },
        // cycle = rad / (2*pi) = rad / 6.2831853071795864769252867665793
        cycle: {
          name: "cycle",
          base: BASE_UNITS.ANGLE,
          prefixes: PREFIXES.NONE,
          value: null,
          // will be filled in by calculateAngleValues()
          offset: 0
        },
        // arcsec = rad / (3600 * (360 / 2 * pi)) = rad / 0.0000048481368110953599358991410235795
        arcsec: {
          name: "arcsec",
          base: BASE_UNITS.ANGLE,
          prefixes: PREFIXES.NONE,
          value: null,
          // will be filled in by calculateAngleValues()
          offset: 0
        },
        // arcmin = rad / (60 * (360 / 2 * pi)) = rad / 0.00029088820866572159615394846141477
        arcmin: {
          name: "arcmin",
          base: BASE_UNITS.ANGLE,
          prefixes: PREFIXES.NONE,
          value: null,
          // will be filled in by calculateAngleValues()
          offset: 0
        },
        // Electric current
        A: {
          name: "A",
          base: BASE_UNITS.CURRENT,
          prefixes: PREFIXES.SHORT,
          value: 1,
          offset: 0
        },
        ampere: {
          name: "ampere",
          base: BASE_UNITS.CURRENT,
          prefixes: PREFIXES.LONG,
          value: 1,
          offset: 0
        },
        // Temperature
        // K(C) = °C + 273.15
        // K(F) = (°F + 459.67) / 1.8
        // K(R) = °R / 1.8
        K: {
          name: "K",
          base: BASE_UNITS.TEMPERATURE,
          prefixes: PREFIXES.NONE,
          value: 1,
          offset: 0
        },
        degC: {
          name: "degC",
          base: BASE_UNITS.TEMPERATURE,
          prefixes: PREFIXES.NONE,
          value: 1,
          offset: 273.15
        },
        degF: {
          name: "degF",
          base: BASE_UNITS.TEMPERATURE,
          prefixes: PREFIXES.NONE,
          value: 1 / 1.8,
          offset: 459.67
        },
        degR: {
          name: "degR",
          base: BASE_UNITS.TEMPERATURE,
          prefixes: PREFIXES.NONE,
          value: 1 / 1.8,
          offset: 0
        },
        kelvin: {
          name: "kelvin",
          base: BASE_UNITS.TEMPERATURE,
          prefixes: PREFIXES.NONE,
          value: 1,
          offset: 0
        },
        celsius: {
          name: "celsius",
          base: BASE_UNITS.TEMPERATURE,
          prefixes: PREFIXES.NONE,
          value: 1,
          offset: 273.15
        },
        fahrenheit: {
          name: "fahrenheit",
          base: BASE_UNITS.TEMPERATURE,
          prefixes: PREFIXES.NONE,
          value: 1 / 1.8,
          offset: 459.67
        },
        rankine: {
          name: "rankine",
          base: BASE_UNITS.TEMPERATURE,
          prefixes: PREFIXES.NONE,
          value: 1 / 1.8,
          offset: 0
        },
        // amount of substance
        mol: {
          name: "mol",
          base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,
          prefixes: PREFIXES.SHORT,
          value: 1,
          offset: 0
        },
        mole: {
          name: "mole",
          base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,
          prefixes: PREFIXES.LONG,
          value: 1,
          offset: 0
        },
        // luminous intensity
        cd: {
          name: "cd",
          base: BASE_UNITS.LUMINOUS_INTENSITY,
          prefixes: PREFIXES.NONE,
          value: 1,
          offset: 0
        },
        candela: {
          name: "candela",
          base: BASE_UNITS.LUMINOUS_INTENSITY,
          prefixes: PREFIXES.NONE,
          value: 1,
          offset: 0
        },
        // TODO: units STERADIAN
        //{name: 'sr', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},
        //{name: 'steradian', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},
        // Force
        N: {
          name: "N",
          base: BASE_UNITS.FORCE,
          prefixes: PREFIXES.SHORT,
          value: 1,
          offset: 0
        },
        newton: {
          name: "newton",
          base: BASE_UNITS.FORCE,
          prefixes: PREFIXES.LONG,
          value: 1,
          offset: 0
        },
        dyn: {
          name: "dyn",
          base: BASE_UNITS.FORCE,
          prefixes: PREFIXES.SHORT,
          value: 1e-5,
          offset: 0
        },
        dyne: {
          name: "dyne",
          base: BASE_UNITS.FORCE,
          prefixes: PREFIXES.LONG,
          value: 1e-5,
          offset: 0
        },
        lbf: {
          name: "lbf",
          base: BASE_UNITS.FORCE,
          prefixes: PREFIXES.NONE,
          value: 4.4482216152605,
          offset: 0
        },
        poundforce: {
          name: "poundforce",
          base: BASE_UNITS.FORCE,
          prefixes: PREFIXES.NONE,
          value: 4.4482216152605,
          offset: 0
        },
        kip: {
          name: "kip",
          base: BASE_UNITS.FORCE,
          prefixes: PREFIXES.LONG,
          value: 4448.2216,
          offset: 0
        },
        // Energy
        J: {
          name: "J",
          base: BASE_UNITS.ENERGY,
          prefixes: PREFIXES.SHORT,
          value: 1,
          offset: 0
        },
        joule: {
          name: "joule",
          base: BASE_UNITS.ENERGY,
          prefixes: PREFIXES.SHORT,
          value: 1,
          offset: 0
        },
        erg: {
          name: "erg",
          base: BASE_UNITS.ENERGY,
          prefixes: PREFIXES.NONE,
          value: 1e-5,
          offset: 0
        },
        Wh: {
          name: "Wh",
          base: BASE_UNITS.ENERGY,
          prefixes: PREFIXES.SHORT,
          value: 3600,
          offset: 0
        },
        BTU: {
          name: "BTU",
          base: BASE_UNITS.ENERGY,
          prefixes: PREFIXES.BTU,
          value: 1055.05585262,
          offset: 0
        },
        eV: {
          name: "eV",
          base: BASE_UNITS.ENERGY,
          prefixes: PREFIXES.SHORT,
          value: 1602176565e-28,
          offset: 0
        },
        electronvolt: {
          name: "electronvolt",
          base: BASE_UNITS.ENERGY,
          prefixes: PREFIXES.LONG,
          value: 1602176565e-28,
          offset: 0
        },
        // Power
        W: {
          name: "W",
          base: BASE_UNITS.POWER,
          prefixes: PREFIXES.SHORT,
          value: 1,
          offset: 0
        },
        watt: {
          name: "W",
          base: BASE_UNITS.POWER,
          prefixes: PREFIXES.LONG,
          value: 1,
          offset: 0
        },
        hp: {
          name: "hp",
          base: BASE_UNITS.POWER,
          prefixes: PREFIXES.NONE,
          value: 745.6998715386,
          offset: 0
        },
        // Electrical power units
        VAR: {
          name: "VAR",
          base: BASE_UNITS.POWER,
          prefixes: PREFIXES.SHORT,
          value: Complex.I,
          offset: 0
        },
        VA: {
          name: "VA",
          base: BASE_UNITS.POWER,
          prefixes: PREFIXES.SHORT,
          value: 1,
          offset: 0
        },
        // Pressure
        Pa: {
          name: "Pa",
          base: BASE_UNITS.PRESSURE,
          prefixes: PREFIXES.SHORT,
          value: 1,
          offset: 0
        },
        psi: {
          name: "psi",
          base: BASE_UNITS.PRESSURE,
          prefixes: PREFIXES.NONE,
          value: 6894.75729276459,
          offset: 0
        },
        atm: {
          name: "atm",
          base: BASE_UNITS.PRESSURE,
          prefixes: PREFIXES.NONE,
          value: 101325,
          offset: 0
        },
        bar: {
          name: "bar",
          base: BASE_UNITS.PRESSURE,
          prefixes: PREFIXES.NONE,
          value: 1e5,
          offset: 0
        },
        torr: {
          name: "torr",
          base: BASE_UNITS.PRESSURE,
          prefixes: PREFIXES.NONE,
          value: 133.322,
          offset: 0
        },
        mmHg: {
          name: "mmHg",
          base: BASE_UNITS.PRESSURE,
          prefixes: PREFIXES.NONE,
          value: 133.322,
          offset: 0
        },
        mmH2O: {
          name: "mmH2O",
          base: BASE_UNITS.PRESSURE,
          prefixes: PREFIXES.NONE,
          value: 9.80665,
          offset: 0
        },
        cmH2O: {
          name: "cmH2O",
          base: BASE_UNITS.PRESSURE,
          prefixes: PREFIXES.NONE,
          value: 98.0665,
          offset: 0
        },
        // Electric charge
        coulomb: {
          name: "coulomb",
          base: BASE_UNITS.ELECTRIC_CHARGE,
          prefixes: PREFIXES.LONG,
          value: 1,
          offset: 0
        },
        C: {
          name: "C",
          base: BASE_UNITS.ELECTRIC_CHARGE,
          prefixes: PREFIXES.SHORT,
          value: 1,
          offset: 0
        },
        // Electric capacitance
        farad: {
          name: "farad",
          base: BASE_UNITS.ELECTRIC_CAPACITANCE,
          prefixes: PREFIXES.LONG,
          value: 1,
          offset: 0
        },
        F: {
          name: "F",
          base: BASE_UNITS.ELECTRIC_CAPACITANCE,
          prefixes: PREFIXES.SHORT,
          value: 1,
          offset: 0
        },
        // Electric potential
        volt: {
          name: "volt",
          base: BASE_UNITS.ELECTRIC_POTENTIAL,
          prefixes: PREFIXES.LONG,
          value: 1,
          offset: 0
        },
        V: {
          name: "V",
          base: BASE_UNITS.ELECTRIC_POTENTIAL,
          prefixes: PREFIXES.SHORT,
          value: 1,
          offset: 0
        },
        // Electric resistance
        ohm: {
          name: "ohm",
          base: BASE_UNITS.ELECTRIC_RESISTANCE,
          prefixes: PREFIXES.SHORTLONG,
          // Both Mohm and megaohm are acceptable
          value: 1,
          offset: 0
        },
        /*
         * Unicode breaks in browsers if charset is not specified
        Ω: {
          name: 'Ω',
          base: BASE_UNITS.ELECTRIC_RESISTANCE,
          prefixes: PREFIXES.SHORT,
          value: 1,
          offset: 0
        },
        */
        // Electric inductance
        henry: {
          name: "henry",
          base: BASE_UNITS.ELECTRIC_INDUCTANCE,
          prefixes: PREFIXES.LONG,
          value: 1,
          offset: 0
        },
        H: {
          name: "H",
          base: BASE_UNITS.ELECTRIC_INDUCTANCE,
          prefixes: PREFIXES.SHORT,
          value: 1,
          offset: 0
        },
        // Electric conductance
        siemens: {
          name: "siemens",
          base: BASE_UNITS.ELECTRIC_CONDUCTANCE,
          prefixes: PREFIXES.LONG,
          value: 1,
          offset: 0
        },
        S: {
          name: "S",
          base: BASE_UNITS.ELECTRIC_CONDUCTANCE,
          prefixes: PREFIXES.SHORT,
          value: 1,
          offset: 0
        },
        // Magnetic flux
        weber: {
          name: "weber",
          base: BASE_UNITS.MAGNETIC_FLUX,
          prefixes: PREFIXES.LONG,
          value: 1,
          offset: 0
        },
        Wb: {
          name: "Wb",
          base: BASE_UNITS.MAGNETIC_FLUX,
          prefixes: PREFIXES.SHORT,
          value: 1,
          offset: 0
        },
        // Magnetic flux density
        tesla: {
          name: "tesla",
          base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,
          prefixes: PREFIXES.LONG,
          value: 1,
          offset: 0
        },
        T: {
          name: "T",
          base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,
          prefixes: PREFIXES.SHORT,
          value: 1,
          offset: 0
        },
        // Binary
        b: {
          name: "b",
          base: BASE_UNITS.BIT,
          prefixes: PREFIXES.BINARY_SHORT,
          value: 1,
          offset: 0
        },
        bits: {
          name: "bits",
          base: BASE_UNITS.BIT,
          prefixes: PREFIXES.BINARY_LONG,
          value: 1,
          offset: 0
        },
        B: {
          name: "B",
          base: BASE_UNITS.BIT,
          prefixes: PREFIXES.BINARY_SHORT,
          value: 8,
          offset: 0
        },
        bytes: {
          name: "bytes",
          base: BASE_UNITS.BIT,
          prefixes: PREFIXES.BINARY_LONG,
          value: 8,
          offset: 0
        }
      };
      var ALIASES = {
        meters: "meter",
        inches: "inch",
        feet: "foot",
        yards: "yard",
        miles: "mile",
        links: "link",
        rods: "rod",
        chains: "chain",
        angstroms: "angstrom",
        lt: "l",
        litres: "litre",
        liter: "litre",
        liters: "litre",
        teaspoons: "teaspoon",
        tablespoons: "tablespoon",
        minims: "minim",
        fluiddrams: "fluiddram",
        fluidounces: "fluidounce",
        gills: "gill",
        cups: "cup",
        pints: "pint",
        quarts: "quart",
        gallons: "gallon",
        beerbarrels: "beerbarrel",
        oilbarrels: "oilbarrel",
        hogsheads: "hogshead",
        gtts: "gtt",
        grams: "gram",
        tons: "ton",
        tonnes: "tonne",
        grains: "grain",
        drams: "dram",
        ounces: "ounce",
        poundmasses: "poundmass",
        hundredweights: "hundredweight",
        sticks: "stick",
        lb: "lbm",
        lbs: "lbm",
        kips: "kip",
        acres: "acre",
        hectares: "hectare",
        sqfeet: "sqft",
        sqyard: "sqyd",
        sqmile: "sqmi",
        sqmiles: "sqmi",
        mmhg: "mmHg",
        mmh2o: "mmH2O",
        cmh2o: "cmH2O",
        seconds: "second",
        secs: "second",
        minutes: "minute",
        mins: "minute",
        hours: "hour",
        hr: "hour",
        hrs: "hour",
        days: "day",
        weeks: "week",
        months: "month",
        years: "year",
        hertz: "hertz",
        radians: "rad",
        degree: "deg",
        degrees: "deg",
        gradian: "grad",
        gradians: "grad",
        cycles: "cycle",
        arcsecond: "arcsec",
        arcseconds: "arcsec",
        arcminute: "arcmin",
        arcminutes: "arcmin",
        BTUs: "BTU",
        watts: "watt",
        joules: "joule",
        amperes: "ampere",
        coulombs: "coulomb",
        volts: "volt",
        ohms: "ohm",
        farads: "farad",
        webers: "weber",
        teslas: "tesla",
        electronvolts: "electronvolt",
        moles: "mole"
      };
      function calculateAngleValues(config2) {
        if (config2.number === "BigNumber") {
          var pi2 = constants.pi(type.BigNumber);
          UNITS.rad.value = new type.BigNumber(1);
          UNITS.deg.value = pi2.div(180);
          UNITS.grad.value = pi2.div(200);
          UNITS.cycle.value = pi2.times(2);
          UNITS.arcsec.value = pi2.div(648e3);
          UNITS.arcmin.value = pi2.div(10800);
        } else {
          UNITS.rad.value = 1;
          UNITS.deg.value = Math.PI / 180;
          UNITS.grad.value = Math.PI / 200;
          UNITS.cycle.value = Math.PI * 2;
          UNITS.arcsec.value = Math.PI / 648e3;
          UNITS.arcmin.value = Math.PI / 10800;
        }
      }
      calculateAngleValues(config);
      math.on("config", function(curr, prev) {
        if (curr.number !== prev.number) {
          calculateAngleValues(curr);
        }
      });
      var UNIT_SYSTEMS = {
        si: {
          // Base units
          NONE: { unit: UNIT_NONE, prefix: PREFIXES.NONE[""] },
          LENGTH: { unit: UNITS.m, prefix: PREFIXES.SHORT[""] },
          MASS: { unit: UNITS.g, prefix: PREFIXES.SHORT["k"] },
          TIME: { unit: UNITS.s, prefix: PREFIXES.SHORT[""] },
          CURRENT: { unit: UNITS.A, prefix: PREFIXES.SHORT[""] },
          TEMPERATURE: { unit: UNITS.K, prefix: PREFIXES.SHORT[""] },
          LUMINOUS_INTENSITY: { unit: UNITS.cd, prefix: PREFIXES.SHORT[""] },
          AMOUNT_OF_SUBSTANCE: { unit: UNITS.mol, prefix: PREFIXES.SHORT[""] },
          ANGLE: { unit: UNITS.rad, prefix: PREFIXES.SHORT[""] },
          BIT: { unit: UNITS.bit, prefix: PREFIXES.SHORT[""] },
          // Derived units
          FORCE: { unit: UNITS.N, prefix: PREFIXES.SHORT[""] },
          ENERGY: { unit: UNITS.J, prefix: PREFIXES.SHORT[""] },
          POWER: { unit: UNITS.W, prefix: PREFIXES.SHORT[""] },
          PRESSURE: { unit: UNITS.Pa, prefix: PREFIXES.SHORT[""] },
          ELECTRIC_CHARGE: { unit: UNITS.C, prefix: PREFIXES.SHORT[""] },
          ELECTRIC_CAPACITANCE: { unit: UNITS.F, prefix: PREFIXES.SHORT[""] },
          ELECTRIC_POTENTIAL: { unit: UNITS.V, prefix: PREFIXES.SHORT[""] },
          ELECTRIC_RESISTANCE: { unit: UNITS.ohm, prefix: PREFIXES.SHORT[""] },
          ELECTRIC_INDUCTANCE: { unit: UNITS.H, prefix: PREFIXES.SHORT[""] },
          ELECTRIC_CONDUCTANCE: { unit: UNITS.S, prefix: PREFIXES.SHORT[""] },
          MAGNETIC_FLUX: { unit: UNITS.Wb, prefix: PREFIXES.SHORT[""] },
          MAGNETIC_FLUX_DENSITY: { unit: UNITS.T, prefix: PREFIXES.SHORT[""] },
          FREQUENCY: { unit: UNITS.Hz, prefix: PREFIXES.SHORT[""] }
        }
      };
      UNIT_SYSTEMS.cgs = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));
      UNIT_SYSTEMS.cgs.LENGTH = { unit: UNITS.m, prefix: PREFIXES.SHORT["c"] };
      UNIT_SYSTEMS.cgs.MASS = { unit: UNITS.g, prefix: PREFIXES.SHORT[""] };
      UNIT_SYSTEMS.cgs.FORCE = { unit: UNITS.dyn, prefix: PREFIXES.SHORT[""] };
      UNIT_SYSTEMS.cgs.ENERGY = { unit: UNITS.erg, prefix: PREFIXES.NONE[""] };
      UNIT_SYSTEMS.us = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));
      UNIT_SYSTEMS.us.LENGTH = { unit: UNITS.ft, prefix: PREFIXES.NONE[""] };
      UNIT_SYSTEMS.us.MASS = { unit: UNITS.lbm, prefix: PREFIXES.NONE[""] };
      UNIT_SYSTEMS.us.TEMPERATURE = { unit: UNITS.degF, prefix: PREFIXES.NONE[""] };
      UNIT_SYSTEMS.us.FORCE = { unit: UNITS.lbf, prefix: PREFIXES.NONE[""] };
      UNIT_SYSTEMS.us.ENERGY = { unit: UNITS.BTU, prefix: PREFIXES.BTU[""] };
      UNIT_SYSTEMS.us.POWER = { unit: UNITS.hp, prefix: PREFIXES.NONE[""] };
      UNIT_SYSTEMS.us.PRESSURE = { unit: UNITS.psi, prefix: PREFIXES.NONE[""] };
      UNIT_SYSTEMS.auto = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));
      var currentUnitSystem = UNIT_SYSTEMS.auto;
      Unit.setUnitSystem = function(name2) {
        if (UNIT_SYSTEMS.hasOwnProperty(name2)) {
          currentUnitSystem = UNIT_SYSTEMS[name2];
        } else {
          throw new Error("Unit system " + name2 + " does not exist. Choices are: " + Object.keys(UNIT_SYSTEMS).join(", "));
        }
      };
      Unit.getUnitSystem = function() {
        for (var key2 in UNIT_SYSTEMS) {
          if (UNIT_SYSTEMS[key2] === currentUnitSystem) {
            return key2;
          }
        }
      };
      Unit.typeConverters = {
        BigNumber: function(x) {
          return new type.BigNumber(x + "");
        },
        Fraction: function(x) {
          return new type.Fraction(x);
        },
        Complex: function(x) {
          return x;
        },
        number: function(x) {
          return x;
        }
      };
      Unit._getNumberConverter = function(type2) {
        if (!Unit.typeConverters[type2]) {
          throw new TypeError('Unsupported type "' + type2 + '"');
        }
        return Unit.typeConverters[type2];
      };
      for (var key in UNITS) {
        var unit = UNITS[key];
        unit.dimensions = unit.base.dimensions;
      }
      for (var name in ALIASES) {
        if (ALIASES.hasOwnProperty(name)) {
          var unit = UNITS[ALIASES[name]];
          var alias = {};
          for (var key in unit) {
            if (unit.hasOwnProperty(key)) {
              alias[key] = unit[key];
            }
          }
          alias.name = name;
          UNITS[name] = alias;
        }
      }
      function assertUnitNameIsValid(name2) {
        for (var i = 0; i < name2.length; i++) {
          var c2 = name2.charAt(i);
          var isValidAlpha = function(p) {
            return /^[a-zA-Z]$/.test(p);
          };
          var isDigit2 = function(c3) {
            return c3 >= "0" && c3 <= "9";
          };
          if (i === 0 && !isValidAlpha(c2))
            throw new Error('Invalid unit name (must begin with alpha character): "' + name2 + '"');
          if (i > 0 && !(isValidAlpha(c2) || isDigit2(c2)))
            throw new Error('Invalid unit name (only alphanumeric characters are allowed): "' + name2 + '"');
        }
      }
      Unit.createUnit = function(obj, options) {
        if (typeof obj !== "object") {
          throw new TypeError("createUnit expects first parameter to be of type 'Object'");
        }
        if (options && options.override) {
          for (var key2 in obj) {
            if (obj.hasOwnProperty(key2)) {
              Unit.deleteUnit(key2);
            }
            if (obj[key2].aliases) {
              for (var i = 0; i < obj[key2].aliases.length; i++) {
                Unit.deleteUnit(obj[key2].aliases[i]);
              }
            }
          }
        }
        var lastUnit;
        for (var key2 in obj) {
          if (obj.hasOwnProperty(key2)) {
            lastUnit = Unit.createUnitSingle(key2, obj[key2]);
          }
        }
        return lastUnit;
      };
      Unit.createUnitSingle = function(name2, obj, options) {
        if (typeof obj === "undefined" || obj === null) {
          obj = {};
        }
        if (typeof name2 !== "string") {
          throw new TypeError("createUnitSingle expects first parameter to be of type 'string'");
        }
        if (UNITS.hasOwnProperty(name2)) {
          throw new Error('Cannot create unit "' + name2 + '": a unit with that name already exists');
        }
        assertUnitNameIsValid(name2);
        var defUnit = null;
        var aliases = [];
        var offset = 0;
        var definition;
        var prefixes;
        if (obj && obj.type === "Unit") {
          defUnit = obj.clone();
        } else if (typeof obj === "string") {
          if (obj !== "") {
            definition = obj;
          }
        } else if (typeof obj === "object") {
          definition = obj.definition;
          prefixes = obj.prefixes;
          offset = obj.offset;
          aliases = obj.aliases;
        } else {
          throw new TypeError('Cannot create unit "' + name2 + '" from "' + obj.toString() + '": expecting "string" or "Unit" or "Object"');
        }
        if (aliases) {
          for (var i = 0; i < aliases.length; i++) {
            if (UNITS.hasOwnProperty(aliases[i])) {
              throw new Error('Cannot create alias "' + aliases[i] + '": a unit with that name already exists');
            }
          }
        }
        if (definition && typeof definition === "string" && !defUnit) {
          try {
            defUnit = Unit.parse(definition, { allowNoUnits: true });
          } catch (ex) {
            ex.message = 'Could not create unit "' + name2 + '" from "' + definition + '": ' + ex.message;
            throw ex;
          }
        } else if (definition && definition.type === "Unit") {
          defUnit = definition.clone();
        }
        aliases = aliases || [];
        offset = offset || 0;
        if (prefixes && prefixes.toUpperCase)
          prefixes = PREFIXES[prefixes.toUpperCase()] || PREFIXES.NONE;
        else
          prefixes = PREFIXES.NONE;
        var newUnit = {};
        if (!defUnit) {
          var baseName = name2 + "_STUFF";
          if (BASE_DIMENSIONS.indexOf(baseName) >= 0) {
            throw new Error('Cannot create new base unit "' + name2 + '": a base unit with that name already exists (and cannot be overridden)');
          }
          BASE_DIMENSIONS.push(baseName);
          for (var b in BASE_UNITS) {
            if (BASE_UNITS.hasOwnProperty(b)) {
              BASE_UNITS[b].dimensions[BASE_DIMENSIONS.length - 1] = 0;
            }
          }
          var newBaseUnit = { dimensions: [] };
          for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
            newBaseUnit.dimensions[i] = 0;
          }
          newBaseUnit.dimensions[BASE_DIMENSIONS.length - 1] = 1;
          newBaseUnit.key = baseName;
          BASE_UNITS[baseName] = newBaseUnit;
          newUnit = {
            name: name2,
            value: 1,
            dimensions: BASE_UNITS[baseName].dimensions.slice(0),
            prefixes,
            offset,
            base: baseName
          };
          currentUnitSystem[baseName] = {
            unit: newUnit,
            prefix: PREFIXES.NONE[""]
          };
        } else {
          newUnit = {
            name: name2,
            value: defUnit.value,
            dimensions: defUnit.dimensions.slice(0),
            prefixes,
            offset
          };
          var anyMatch = false;
          for (var i in BASE_UNITS) {
            if (BASE_UNITS.hasOwnProperty(i)) {
              var match = true;
              for (var j = 0; j < BASE_DIMENSIONS.length; j++) {
                if (Math.abs((newUnit.dimensions[j] || 0) - (BASE_UNITS[i].dimensions[j] || 0)) > 1e-12) {
                  match = false;
                  break;
                }
              }
              if (match) {
                anyMatch = true;
                break;
              }
            }
          }
          if (!anyMatch) {
            var baseName = name2 + "_STUFF";
            var newBaseUnit = { dimensions: defUnit.dimensions.slice(0) };
            newBaseUnit.key = baseName;
            BASE_UNITS[baseName] = newBaseUnit;
            currentUnitSystem[baseName] = {
              unit: newUnit,
              prefix: PREFIXES.NONE[""]
            };
            newUnit.base = baseName;
          }
        }
        Unit.UNITS[name2] = newUnit;
        for (var i = 0; i < aliases.length; i++) {
          var aliasName = aliases[i];
          var alias2 = {};
          for (var key2 in newUnit) {
            if (newUnit.hasOwnProperty(key2)) {
              alias2[key2] = newUnit[key2];
            }
          }
          alias2.name = aliasName;
          Unit.UNITS[aliasName] = alias2;
        }
        return new Unit(null, name2);
      };
      Unit.deleteUnit = function(name2) {
        delete Unit.UNITS[name2];
      };
      Unit.PREFIXES = PREFIXES;
      Unit.BASE_UNITS = BASE_UNITS;
      Unit.UNITS = UNITS;
      Unit.UNIT_SYSTEMS = UNIT_SYSTEMS;
      return Unit;
    }
    exports.name = "Unit";
    exports.path = "type";
    exports.factory = factory;
    exports.math = true;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/type/unit/function/unit.js
var require_unit = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/type/unit/function/unit.js"(exports) {
    "use strict";
    var deepMap = require_deepMap();
    function factory(type, config, load, typed) {
      var unit = typed("unit", {
        "Unit": function(x) {
          return x.clone();
        },
        "string": function(x) {
          if (type.Unit.isValuelessUnit(x)) {
            return new type.Unit(null, x);
          }
          return type.Unit.parse(x);
        },
        "number | BigNumber | Fraction | Complex, string": function(value, unit2) {
          return new type.Unit(value, unit2);
        },
        "Array | Matrix": function(x) {
          return deepMap(x, unit);
        }
      });
      unit.toTex = {
        1: "\\left(${args[0]}\\right)",
        2: "\\left(\\left(${args[0]}\\right)${args[1]}\\right)"
      };
      return unit;
    }
    exports.name = "unit";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/type/unit/function/createUnit.js
var require_createUnit = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/type/unit/function/createUnit.js"(exports) {
    "use strict";
    var deepMap = require_deepMap();
    function factory(type, config, load, typed) {
      var createUnit = typed("createUnit", {
        // General function signature. First parameter is an object where each property is the definition of a new unit. The object keys are the unit names and the values are the definitions. The values can be objects, strings, or Units. If a property is an empty object or an empty string, a new base unit is created. The second parameter is the options.
        "Object, Object": function(obj, options) {
          return type.Unit.createUnit(obj, options);
        },
        // Same as above but without the options.
        "Object": function(obj) {
          return type.Unit.createUnit(obj, {});
        },
        // Shortcut method for creating one unit.
        "string, Unit | string | Object, Object": function(name, def, options) {
          var obj = {};
          obj[name] = def;
          return type.Unit.createUnit(obj, options);
        },
        // Same as above but without the options.
        "string, Unit | string | Object": function(name, def) {
          var obj = {};
          obj[name] = def;
          return type.Unit.createUnit(obj, {});
        },
        // Without a definition, creates a base unit.
        "string": function(name) {
          var obj = {};
          obj[name] = {};
          return type.Unit.createUnit(obj, {});
        }
      });
      return createUnit;
    }
    exports.name = "createUnit";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/type/unit/function/splitUnit.js
var require_splitUnit = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/type/unit/function/splitUnit.js"(exports) {
    "use strict";
    var deepMap = require_deepMap();
    function factory(type, config, load, typed) {
      var splitUnit = typed("splitUnit", {
        "Unit, Array": function(unit, parts) {
          return unit.splitUnit(parts);
        }
      });
      return splitUnit;
    }
    exports.name = "splitUnit";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/type/unit/physicalConstants.js
var require_physicalConstants = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/type/unit/physicalConstants.js"(exports) {
    var lazy = require_object().lazy;
    function factory(type, config, load, typed, math) {
      function fixedUnit(str) {
        var unit = type.Unit.parse(str);
        unit.fixPrefix = true;
        return unit;
      }
      lazy(math, "speedOfLight", function() {
        return fixedUnit("299792458 m s^-1");
      });
      lazy(math, "gravitationConstant", function() {
        return fixedUnit("6.6738480e-11 m^3 kg^-1 s^-2");
      });
      lazy(math, "planckConstant", function() {
        return fixedUnit("6.626069311e-34 J s");
      });
      lazy(math, "reducedPlanckConstant", function() {
        return fixedUnit("1.05457172647e-34 J s");
      });
      lazy(math, "magneticConstant", function() {
        return fixedUnit("1.2566370614e-6 N A^-2");
      });
      lazy(math, "electricConstant", function() {
        return fixedUnit("8.854187817e-12 F m^-1");
      });
      lazy(math, "vacuumImpedance", function() {
        return fixedUnit("376.730313461 ohm");
      });
      lazy(math, "coulomb", function() {
        return fixedUnit("8.9875517873681764e9 N m^2 C^-2");
      });
      lazy(math, "elementaryCharge", function() {
        return fixedUnit("1.60217656535e-19 C");
      });
      lazy(math, "bohrMagneton", function() {
        return fixedUnit("9.2740096820e-24 J T^-1");
      });
      lazy(math, "conductanceQuantum", function() {
        return fixedUnit("7.748091734625e-5 S");
      });
      lazy(math, "inverseConductanceQuantum", function() {
        return fixedUnit("12906.403721742 ohm");
      });
      lazy(math, "magneticFluxQuantum", function() {
        return fixedUnit("2.06783375846e-15 Wb");
      });
      lazy(math, "nuclearMagneton", function() {
        return fixedUnit("5.0507835311e-27 J T^-1");
      });
      lazy(math, "klitzing", function() {
        return fixedUnit("25812.807443484 ohm");
      });
      lazy(math, "bohrRadius", function() {
        return fixedUnit("5.291772109217e-11 m");
      });
      lazy(math, "classicalElectronRadius", function() {
        return fixedUnit("2.817940326727e-15 m");
      });
      lazy(math, "electronMass", function() {
        return fixedUnit("9.1093829140e-31 kg");
      });
      lazy(math, "fermiCoupling", function() {
        return fixedUnit("1.1663645e-5 GeV^-2");
      });
      lazy(math, "fineStructure", function() {
        return 0.007297352569824;
      });
      lazy(math, "hartreeEnergy", function() {
        return fixedUnit("4.3597443419e-18 J");
      });
      lazy(math, "protonMass", function() {
        return fixedUnit("1.67262177774e-27 kg");
      });
      lazy(math, "deuteronMass", function() {
        return fixedUnit("3.3435830926e-27 kg");
      });
      lazy(math, "neutronMass", function() {
        return fixedUnit("1.6749271613e-27 kg");
      });
      lazy(math, "quantumOfCirculation", function() {
        return fixedUnit("3.636947552024e-4 m^2 s^-1");
      });
      lazy(math, "rydberg", function() {
        return fixedUnit("10973731.56853955 m^-1");
      });
      lazy(math, "thomsonCrossSection", function() {
        return fixedUnit("6.65245873413e-29 m^2");
      });
      lazy(math, "weakMixingAngle", function() {
        return 0.222321;
      });
      lazy(math, "efimovFactor", function() {
        return 22.7;
      });
      lazy(math, "atomicMass", function() {
        return fixedUnit("1.66053892173e-27 kg");
      });
      lazy(math, "avogadro", function() {
        return fixedUnit("6.0221412927e23 mol^-1");
      });
      lazy(math, "boltzmann", function() {
        return fixedUnit("1.380648813e-23 J K^-1");
      });
      lazy(math, "faraday", function() {
        return fixedUnit("96485.336521 C mol^-1");
      });
      lazy(math, "firstRadiation", function() {
        return fixedUnit("3.7417715317e-16 W m^2");
      });
      lazy(math, "loschmidt", function() {
        return fixedUnit("2.686780524e25 m^-3");
      });
      lazy(math, "gasConstant", function() {
        return fixedUnit("8.314462175 J K^-1 mol^-1");
      });
      lazy(math, "molarPlanckConstant", function() {
        return fixedUnit("3.990312717628e-10 J s mol^-1");
      });
      lazy(math, "molarVolume", function() {
        return fixedUnit("2.241396820e-10 m^3 mol^-1");
      });
      lazy(math, "sackurTetrode", function() {
        return -1.164870823;
      });
      lazy(math, "secondRadiation", function() {
        return fixedUnit("1.438777013e-2 m K");
      });
      lazy(math, "stefanBoltzmann", function() {
        return fixedUnit("5.67037321e-8 W m^-2 K^-4");
      });
      lazy(math, "wienDisplacement", function() {
        return fixedUnit("2.897772126e-3 m K");
      });
      lazy(math, "molarMass", function() {
        return fixedUnit("1e-3 kg mol^-1");
      });
      lazy(math, "molarMassC12", function() {
        return fixedUnit("1.2e-2 kg mol^-1");
      });
      lazy(math, "gravity", function() {
        return fixedUnit("9.80665 m s^-2");
      });
      lazy(math, "planckLength", function() {
        return fixedUnit("1.61619997e-35 m");
      });
      lazy(math, "planckMass", function() {
        return fixedUnit("2.1765113e-8 kg");
      });
      lazy(math, "planckTime", function() {
        return fixedUnit("5.3910632e-44 s");
      });
      lazy(math, "planckCharge", function() {
        return fixedUnit("1.87554595641e-18 C");
      });
      lazy(math, "planckTemperature", function() {
        return fixedUnit("1.41683385e+32 K");
      });
    }
    exports.factory = factory;
    exports.lazy = false;
    exports.math = true;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/type/unit/index.js
var require_unit2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/type/unit/index.js"(exports, module) {
    module.exports = [
      // type
      require_Unit(),
      // construction function
      require_unit(),
      // create new units
      require_createUnit(),
      // split units
      require_splitUnit(),
      // physical constants
      require_physicalConstants()
    ];
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/type/index.js
var require_type = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/type/index.js"(exports, module) {
    module.exports = [
      require_bignumber2(),
      require_boolean(),
      require_chain2(),
      require_complex3(),
      require_fraction3(),
      require_matrix2(),
      require_number2(),
      require_resultset(),
      require_string2(),
      require_unit2()
    ];
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/version.js
var require_version = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/version.js"(exports, module) {
    module.exports = "3.11.2";
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/constants.js
var require_constants2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/constants.js"(exports) {
    "use strict";
    var object = require_object();
    var bigConstants = require_constants();
    function factory(type, config, load, typed, math) {
      math.on("config", function(curr, prev) {
        if (curr.number !== prev.number) {
          factory(type, config, load, typed, math);
        }
      });
      math["true"] = true;
      math["false"] = false;
      math["null"] = null;
      math["uninitialized"] = require_array().UNINITIALIZED;
      if (config.number === "BigNumber") {
        math["Infinity"] = new type.BigNumber(Infinity);
        math["NaN"] = new type.BigNumber(NaN);
        object.lazy(math, "pi", function() {
          return bigConstants.pi(type.BigNumber);
        });
        object.lazy(math, "tau", function() {
          return bigConstants.tau(type.BigNumber);
        });
        object.lazy(math, "e", function() {
          return bigConstants.e(type.BigNumber);
        });
        object.lazy(math, "phi", function() {
          return bigConstants.phi(type.BigNumber);
        });
        object.lazy(math, "E", function() {
          return math.e;
        });
        object.lazy(math, "LN2", function() {
          return new type.BigNumber(2).ln();
        });
        object.lazy(math, "LN10", function() {
          return new type.BigNumber(10).ln();
        });
        object.lazy(math, "LOG2E", function() {
          return new type.BigNumber(1).div(new type.BigNumber(2).ln());
        });
        object.lazy(math, "LOG10E", function() {
          return new type.BigNumber(1).div(new type.BigNumber(10).ln());
        });
        object.lazy(math, "PI", function() {
          return math.pi;
        });
        object.lazy(math, "SQRT1_2", function() {
          return new type.BigNumber("0.5").sqrt();
        });
        object.lazy(math, "SQRT2", function() {
          return new type.BigNumber(2).sqrt();
        });
      } else {
        math["Infinity"] = Infinity;
        math["NaN"] = NaN;
        math.pi = Math.PI;
        math.tau = Math.PI * 2;
        math.e = Math.E;
        math.phi = 1.618033988749895;
        math.E = math.e;
        math.LN2 = Math.LN2;
        math.LN10 = Math.LN10;
        math.LOG2E = Math.LOG2E;
        math.LOG10E = Math.LOG10E;
        math.PI = math.pi;
        math.SQRT1_2 = Math.SQRT1_2;
        math.SQRT2 = Math.SQRT2;
      }
      math.i = type.Complex.I;
      math.version = require_version();
    }
    exports.factory = factory;
    exports.lazy = false;
    exports.math = true;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/construction/bignumber.js
var require_bignumber3 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/construction/bignumber.js"(exports, module) {
    module.exports = {
      "name": "bignumber",
      "category": "Construction",
      "syntax": [
        "bignumber(x)"
      ],
      "description": "Create a big number from a number or string.",
      "examples": [
        "0.1 + 0.2",
        "bignumber(0.1) + bignumber(0.2)",
        'bignumber("7.2")',
        'bignumber("7.2e500")',
        "bignumber([0.1, 0.2, 0.3])"
      ],
      "seealso": [
        "boolean",
        "complex",
        "fraction",
        "index",
        "matrix",
        "string",
        "unit"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/construction/boolean.js
var require_boolean3 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/construction/boolean.js"(exports, module) {
    module.exports = {
      "name": "boolean",
      "category": "Construction",
      "syntax": [
        "x",
        "boolean(x)"
      ],
      "description": "Convert a string or number into a boolean.",
      "examples": [
        "boolean(0)",
        "boolean(1)",
        "boolean(3)",
        'boolean("true")',
        'boolean("false")',
        "boolean([1, 0, 1, 1])"
      ],
      "seealso": [
        "bignumber",
        "complex",
        "index",
        "matrix",
        "number",
        "string",
        "unit"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/construction/complex.js
var require_complex4 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/construction/complex.js"(exports, module) {
    module.exports = {
      "name": "complex",
      "category": "Construction",
      "syntax": [
        "complex()",
        "complex(re, im)",
        "complex(string)"
      ],
      "description": "Create a complex number.",
      "examples": [
        "complex()",
        "complex(2, 3)",
        'complex("7 - 2i")'
      ],
      "seealso": [
        "bignumber",
        "boolean",
        "index",
        "matrix",
        "number",
        "string",
        "unit"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/construction/createUnit.js
var require_createUnit2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/construction/createUnit.js"(exports, module) {
    module.exports = {
      "name": "createUnit",
      "category": "Construction",
      "syntax": [
        "createUnit(definitions)",
        "createUnit(name, definition)"
      ],
      "description": "Create a user-defined unit and register it with the Unit type.",
      "examples": [
        'createUnit("foo")',
        'createUnit("knot", {definition: "0.514444444 m/s", aliases: ["knots", "kt", "kts"]})',
        'createUnit("mph", "1 mile/hour")'
      ],
      "seealso": [
        "unit",
        "splitUnit"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/construction/fraction.js
var require_fraction4 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/construction/fraction.js"(exports, module) {
    module.exports = {
      "name": "fraction",
      "category": "Construction",
      "syntax": [
        "fraction(num)",
        "fraction(num,den)"
      ],
      "description": "Create a fraction from a number or from a numerator and denominator.",
      "examples": [
        "fraction(0.125)",
        "fraction(1, 3) + fraction(2, 5)"
      ],
      "seealso": [
        "bignumber",
        "boolean",
        "complex",
        "index",
        "matrix",
        "string",
        "unit"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/construction/index.js
var require_construction = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/construction/index.js"(exports, module) {
    module.exports = {
      "name": "index",
      "category": "Construction",
      "syntax": [
        "[start]",
        "[start:end]",
        "[start:step:end]",
        "[start1, start 2, ...]",
        "[start1:end1, start2:end2, ...]",
        "[start1:step1:end1, start2:step2:end2, ...]"
      ],
      "description": "Create an index to get or replace a subset of a matrix",
      "examples": [
        "[]",
        "[1, 2, 3]",
        "A = [1, 2, 3; 4, 5, 6]",
        "A[1, :]",
        "A[1, 2] = 50",
        "A[0:2, 0:2] = ones(2, 2)"
      ],
      "seealso": [
        "bignumber",
        "boolean",
        "complex",
        "matrix,",
        "number",
        "range",
        "string",
        "unit"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/construction/matrix.js
var require_matrix3 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/construction/matrix.js"(exports, module) {
    module.exports = {
      "name": "matrix",
      "category": "Construction",
      "syntax": [
        "[]",
        "[a1, b1, ...; a2, b2, ...]",
        "matrix()",
        'matrix("dense")',
        "matrix([...])"
      ],
      "description": "Create a matrix.",
      "examples": [
        "[]",
        "[1, 2, 3]",
        "[1, 2, 3; 4, 5, 6]",
        "matrix()",
        "matrix([3, 4])",
        'matrix([3, 4; 5, 6], "sparse")',
        'matrix([3, 4; 5, 6], "sparse", "number")'
      ],
      "seealso": [
        "bignumber",
        "boolean",
        "complex",
        "index",
        "number",
        "string",
        "unit",
        "sparse"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/construction/number.js
var require_number3 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/construction/number.js"(exports, module) {
    module.exports = {
      "name": "number",
      "category": "Construction",
      "syntax": [
        "x",
        "number(x)"
      ],
      "description": "Create a number or convert a string or boolean into a number.",
      "examples": [
        "2",
        "2e3",
        "4.05",
        "number(2)",
        'number("7.2")',
        "number(true)",
        "number([true, false, true, true])",
        'number("52cm", "m")'
      ],
      "seealso": [
        "bignumber",
        "boolean",
        "complex",
        "fraction",
        "index",
        "matrix",
        "string",
        "unit"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/construction/sparse.js
var require_sparse2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/construction/sparse.js"(exports, module) {
    module.exports = {
      "name": "sparse",
      "category": "Construction",
      "syntax": [
        "sparse()",
        "sparse([a1, b1, ...; a1, b2, ...])",
        'sparse([a1, b1, ...; a1, b2, ...], "number")'
      ],
      "description": "Create a sparse matrix.",
      "examples": [
        "sparse()",
        "sparse([3, 4; 5, 6])",
        'sparse([3, 0; 5, 0], "number")'
      ],
      "seealso": [
        "bignumber",
        "boolean",
        "complex",
        "index",
        "number",
        "string",
        "unit",
        "matrix"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/construction/splitUnit.js
var require_splitUnit2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/construction/splitUnit.js"(exports, module) {
    module.exports = {
      "name": "splitUnit",
      "category": "Construction",
      "syntax": [
        "splitUnit(unit: Unit, parts: Unit[])"
      ],
      "description": "Split a unit in an array of units whose sum is equal to the original unit.",
      "examples": [
        'splitUnit(1 m, ["feet", "inch"])'
      ],
      "seealso": [
        "unit",
        "createUnit"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/construction/string.js
var require_string3 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/construction/string.js"(exports, module) {
    module.exports = {
      "name": "string",
      "category": "Construction",
      "syntax": [
        '"text"',
        "string(x)"
      ],
      "description": "Create a string or convert a value to a string",
      "examples": [
        '"Hello World!"',
        "string(4.2)",
        "string(3 + 2i)"
      ],
      "seealso": [
        "bignumber",
        "boolean",
        "complex",
        "index",
        "matrix",
        "number",
        "unit"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/construction/unit.js
var require_unit3 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/construction/unit.js"(exports, module) {
    module.exports = {
      "name": "unit",
      "category": "Construction",
      "syntax": [
        "value unit",
        "unit(value, unit)",
        "unit(string)"
      ],
      "description": "Create a unit.",
      "examples": [
        "5.5 mm",
        "3 inch",
        'unit(7.1, "kilogram")',
        'unit("23 deg")'
      ],
      "seealso": [
        "bignumber",
        "boolean",
        "complex",
        "index",
        "matrix",
        "number",
        "string"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/constants/e.js
var require_e = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/constants/e.js"(exports, module) {
    module.exports = {
      "name": "e",
      "category": "Constants",
      "syntax": [
        "e"
      ],
      "description": "Euler's number, the base of the natural logarithm. Approximately equal to 2.71828",
      "examples": [
        "e",
        "e ^ 2",
        "exp(2)",
        "log(e)"
      ],
      "seealso": ["exp"]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/constants/false.js
var require_false = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/constants/false.js"(exports, module) {
    module.exports = {
      "name": "false",
      "category": "Constants",
      "syntax": [
        "false"
      ],
      "description": "Boolean value false",
      "examples": [
        "false"
      ],
      "seealso": ["true"]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/constants/i.js
var require_i = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/constants/i.js"(exports, module) {
    module.exports = {
      "name": "i",
      "category": "Constants",
      "syntax": [
        "i"
      ],
      "description": "Imaginary unit, defined as i*i=-1. A complex number is described as a + b*i, where a is the real part, and b is the imaginary part.",
      "examples": [
        "i",
        "i * i",
        "sqrt(-1)"
      ],
      "seealso": []
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/constants/Infinity.js
var require_Infinity = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/constants/Infinity.js"(exports, module) {
    module.exports = {
      "name": "Infinity",
      "category": "Constants",
      "syntax": [
        "Infinity"
      ],
      "description": "Infinity, a number which is larger than the maximum number that can be handled by a floating point number.",
      "examples": [
        "Infinity",
        "1 / 0"
      ],
      "seealso": []
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/constants/LN2.js
var require_LN2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/constants/LN2.js"(exports, module) {
    module.exports = {
      "name": "LN2",
      "category": "Constants",
      "syntax": [
        "LN2"
      ],
      "description": "Returns the natural logarithm of 2, approximately equal to 0.693",
      "examples": [
        "LN2",
        "log(2)"
      ],
      "seealso": []
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/constants/LN10.js
var require_LN10 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/constants/LN10.js"(exports, module) {
    module.exports = {
      "name": "LN10",
      "category": "Constants",
      "syntax": [
        "LN10"
      ],
      "description": "Returns the natural logarithm of 10, approximately equal to 2.302",
      "examples": [
        "LN10",
        "log(10)"
      ],
      "seealso": []
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/constants/LOG2E.js
var require_LOG2E = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/constants/LOG2E.js"(exports, module) {
    module.exports = {
      "name": "LOG2E",
      "category": "Constants",
      "syntax": [
        "LOG2E"
      ],
      "description": "Returns the base-2 logarithm of E, approximately equal to 1.442",
      "examples": [
        "LOG2E",
        "log(e, 2)"
      ],
      "seealso": []
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/constants/LOG10E.js
var require_LOG10E = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/constants/LOG10E.js"(exports, module) {
    module.exports = {
      "name": "LOG10E",
      "category": "Constants",
      "syntax": [
        "LOG10E"
      ],
      "description": "Returns the base-10 logarithm of E, approximately equal to 0.434",
      "examples": [
        "LOG10E",
        "log(e, 10)"
      ],
      "seealso": []
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/constants/NaN.js
var require_NaN = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/constants/NaN.js"(exports, module) {
    module.exports = {
      "name": "NaN",
      "category": "Constants",
      "syntax": [
        "NaN"
      ],
      "description": "Not a number",
      "examples": [
        "NaN",
        "0 / 0"
      ],
      "seealso": []
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/constants/null.js
var require_null = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/constants/null.js"(exports, module) {
    module.exports = {
      "name": "null",
      "category": "Constants",
      "syntax": [
        "null"
      ],
      "description": "Value null",
      "examples": [
        "null"
      ],
      "seealso": ["true", "false"]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/constants/pi.js
var require_pi = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/constants/pi.js"(exports, module) {
    module.exports = {
      "name": "pi",
      "category": "Constants",
      "syntax": [
        "pi"
      ],
      "description": "The number pi is a mathematical constant that is the ratio of a circle's circumference to its diameter, and is approximately equal to 3.14159",
      "examples": [
        "pi",
        "sin(pi/2)"
      ],
      "seealso": ["tau"]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/constants/phi.js
var require_phi = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/constants/phi.js"(exports, module) {
    module.exports = {
      "name": "phi",
      "category": "Constants",
      "syntax": [
        "phi"
      ],
      "description": "Phi is the golden ratio. Two quantities are in the golden ratio if their ratio is the same as the ratio of their sum to the larger of the two quantities. Phi is defined as `(1 + sqrt(5)) / 2` and is approximately 1.618034...",
      "examples": [
        "tau"
      ],
      "seealso": []
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/constants/SQRT1_2.js
var require_SQRT1_2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/constants/SQRT1_2.js"(exports, module) {
    module.exports = {
      "name": "SQRT1_2",
      "category": "Constants",
      "syntax": [
        "SQRT1_2"
      ],
      "description": "Returns the square root of 1/2, approximately equal to 0.707",
      "examples": [
        "SQRT1_2",
        "sqrt(1/2)"
      ],
      "seealso": []
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/constants/SQRT2.js
var require_SQRT2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/constants/SQRT2.js"(exports, module) {
    module.exports = {
      "name": "SQRT2",
      "category": "Constants",
      "syntax": [
        "SQRT2"
      ],
      "description": "Returns the square root of 2, approximately equal to 1.414",
      "examples": [
        "SQRT2",
        "sqrt(2)"
      ],
      "seealso": []
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/constants/tau.js
var require_tau = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/constants/tau.js"(exports, module) {
    module.exports = {
      "name": "tau",
      "category": "Constants",
      "syntax": [
        "tau"
      ],
      "description": "Tau is the ratio constant of a circle's circumference to radius, equal to 2 * pi, approximately 6.2832.",
      "examples": [
        "tau",
        "2 * pi"
      ],
      "seealso": ["pi"]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/constants/true.js
var require_true = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/constants/true.js"(exports, module) {
    module.exports = {
      "name": "true",
      "category": "Constants",
      "syntax": [
        "true"
      ],
      "description": "Boolean value true",
      "examples": [
        "true"
      ],
      "seealso": ["false"]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/constants/version.js
var require_version2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/constants/version.js"(exports, module) {
    module.exports = {
      "name": "version",
      "category": "Constants",
      "syntax": [
        "version"
      ],
      "description": "A string with the version number of math.js",
      "examples": [
        "version"
      ],
      "seealso": []
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/algebra/derivative.js
var require_derivative = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/algebra/derivative.js"(exports, module) {
    module.exports = {
      "name": "derivative",
      "category": "Algebra",
      "syntax": [
        "derivative(expr)",
        "derivative(expr, {simplify: boolean})"
      ],
      "description": "Takes the derivative of an expression expressed in parser Nodes. The derivative will be taken over the supplied variable in the second parameter. If there are multiple variables in the expression, it will return a partial derivative.",
      "examples": [
        'derivative("2x^3", "x")',
        'derivative("2x^3", "x", {simplify: false})',
        'derivative("2x^2 + 3x + 4", "x")',
        'derivative("sin(2x)", "x")',
        'f = parse("x^2 + x")',
        'x = parse("x")',
        "df = derivative(f, x)",
        "df.eval({x: 3})"
      ],
      "seealso": [
        "simplify",
        "parse",
        "eval"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/algebra/lsolve.js
var require_lsolve = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/algebra/lsolve.js"(exports, module) {
    module.exports = {
      "name": "lsolve",
      "category": "Algebra",
      "syntax": [
        "x=lsolve(L, b)"
      ],
      "description": "Solves the linear system L * x = b where L is an [n x n] lower triangular matrix and b is a [n] column vector.",
      "examples": [
        "a = [-2, 3; 2, 1]",
        "b = [11, 9]",
        "x = lsolve(a, b)"
      ],
      "seealso": [
        "lup",
        "lusolve",
        "usolve",
        "matrix",
        "sparse"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/algebra/lup.js
var require_lup = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/algebra/lup.js"(exports, module) {
    module.exports = {
      "name": "lup",
      "category": "Algebra",
      "syntax": [
        "lup(m)"
      ],
      "description": "Calculate the Matrix LU decomposition with partial pivoting. Matrix A is decomposed in three matrices (L, U, P) where P * A = L * U",
      "examples": [
        "lup([[2, 1], [1, 4]])",
        "lup(matrix([[2, 1], [1, 4]]))",
        "lup(sparse([[2, 1], [1, 4]]))"
      ],
      "seealso": [
        "lusolve",
        "lsolve",
        "usolve",
        "matrix",
        "sparse",
        "slu"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/algebra/lusolve.js
var require_lusolve = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/algebra/lusolve.js"(exports, module) {
    module.exports = {
      "name": "lusolve",
      "category": "Algebra",
      "syntax": [
        "x=lusolve(A, b)",
        "x=lusolve(lu, b)"
      ],
      "description": "Solves the linear system A * x = b where A is an [n x n] matrix and b is a [n] column vector.",
      "examples": [
        "a = [-2, 3; 2, 1]",
        "b = [11, 9]",
        "x = lusolve(a, b)"
      ],
      "seealso": [
        "lup",
        "slu",
        "lsolve",
        "usolve",
        "matrix",
        "sparse"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/algebra/simplify.js
var require_simplify = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/algebra/simplify.js"(exports, module) {
    module.exports = {
      "name": "simplify",
      "category": "Algebra",
      "syntax": [
        "simplify(expr)",
        "simplify(expr, rules)"
      ],
      "description": "Simplify an expression tree.",
      "examples": [
        'simplify("3 + 2 / 4")',
        'simplify("2x + x")',
        'f = parse("x * (x + 2 + x)")',
        "simplified = simplify(f)",
        "simplified.eval({x: 2})"
      ],
      "seealso": [
        "derivative",
        "parse",
        "eval"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/algebra/slu.js
var require_slu = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/algebra/slu.js"(exports, module) {
    module.exports = {
      "name": "slu",
      "category": "Algebra",
      "syntax": [
        "slu(A, order, threshold)"
      ],
      "description": "Calculate the Matrix LU decomposition with full pivoting. Matrix A is decomposed in two matrices (L, U) and two permutation vectors (pinv, q) where P * A * Q = L * U",
      "examples": [
        "slu(sparse([4.5, 0, 3.2, 0; 3.1, 2.9, 0, 0.9; 0, 1.7, 3, 0; 3.5, 0.4, 0, 1]), 1, 0.001)"
      ],
      "seealso": [
        "lusolve",
        "lsolve",
        "usolve",
        "matrix",
        "sparse",
        "lup"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/algebra/usolve.js
var require_usolve = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/algebra/usolve.js"(exports, module) {
    module.exports = {
      "name": "usolve",
      "category": "Algebra",
      "syntax": [
        "x=usolve(U, b)"
      ],
      "description": "Solves the linear system U * x = b where U is an [n x n] upper triangular matrix and b is a [n] column vector.",
      "examples": [
        "x=usolve(sparse([1, 1, 1, 1; 0, 1, 1, 1; 0, 0, 1, 1; 0, 0, 0, 1]), [1; 2; 3; 4])"
      ],
      "seealso": [
        "lup",
        "lusolve",
        "lsolve",
        "matrix",
        "sparse"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/arithmetic/abs.js
var require_abs2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/arithmetic/abs.js"(exports, module) {
    module.exports = {
      "name": "abs",
      "category": "Arithmetic",
      "syntax": [
        "abs(x)"
      ],
      "description": "Compute the absolute value.",
      "examples": [
        "abs(3.5)",
        "abs(-4.2)"
      ],
      "seealso": ["sign"]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/arithmetic/add.js
var require_add2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/arithmetic/add.js"(exports, module) {
    module.exports = {
      "name": "add",
      "category": "Operators",
      "syntax": [
        "x + y",
        "add(x, y)"
      ],
      "description": "Add two values.",
      "examples": [
        "a = 2.1 + 3.6",
        "a - 3.6",
        "3 + 2i",
        "3 cm + 2 inch",
        '"2.3" + "4"'
      ],
      "seealso": [
        "subtract"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/arithmetic/cbrt.js
var require_cbrt = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/arithmetic/cbrt.js"(exports, module) {
    module.exports = {
      "name": "cbrt",
      "category": "Arithmetic",
      "syntax": [
        "cbrt(x)",
        "cbrt(x, allRoots)"
      ],
      "description": "Compute the cubic root value. If x = y * y * y, then y is the cubic root of x. When `x` is a number or complex number, an optional second argument `allRoots` can be provided to return all three cubic roots. If not provided, the principal root is returned",
      "examples": [
        "cbrt(64)",
        "cube(4)",
        "cbrt(-8)",
        "cbrt(2 + 3i)",
        "cbrt(8i)",
        "cbrt(8i, true)",
        "cbrt(27 m^3)"
      ],
      "seealso": [
        "square",
        "sqrt",
        "cube",
        "multiply"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/arithmetic/ceil.js
var require_ceil = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/arithmetic/ceil.js"(exports, module) {
    module.exports = {
      "name": "ceil",
      "category": "Arithmetic",
      "syntax": [
        "ceil(x)"
      ],
      "description": "Round a value towards plus infinity. If x is complex, both real and imaginary part are rounded towards plus infinity.",
      "examples": [
        "ceil(3.2)",
        "ceil(3.8)",
        "ceil(-4.2)"
      ],
      "seealso": ["floor", "fix", "round"]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/arithmetic/cube.js
var require_cube = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/arithmetic/cube.js"(exports, module) {
    module.exports = {
      "name": "cube",
      "category": "Arithmetic",
      "syntax": [
        "cube(x)"
      ],
      "description": "Compute the cube of a value. The cube of x is x * x * x.",
      "examples": [
        "cube(2)",
        "2^3",
        "2 * 2 * 2"
      ],
      "seealso": [
        "multiply",
        "square",
        "pow"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/arithmetic/divide.js
var require_divide = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/arithmetic/divide.js"(exports, module) {
    module.exports = {
      "name": "divide",
      "category": "Operators",
      "syntax": [
        "x / y",
        "divide(x, y)"
      ],
      "description": "Divide two values.",
      "examples": [
        "a = 2 / 3",
        "a * 3",
        "4.5 / 2",
        "3 + 4 / 2",
        "(3 + 4) / 2",
        "18 km / 4.5"
      ],
      "seealso": [
        "multiply"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/arithmetic/dotDivide.js
var require_dotDivide = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/arithmetic/dotDivide.js"(exports, module) {
    module.exports = {
      "name": "dotDivide",
      "category": "Operators",
      "syntax": [
        "x ./ y",
        "dotDivide(x, y)"
      ],
      "description": "Divide two values element wise.",
      "examples": [
        "a = [1, 2, 3; 4, 5, 6]",
        "b = [2, 1, 1; 3, 2, 5]",
        "a ./ b"
      ],
      "seealso": [
        "multiply",
        "dotMultiply",
        "divide"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/arithmetic/dotMultiply.js
var require_dotMultiply = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/arithmetic/dotMultiply.js"(exports, module) {
    module.exports = {
      "name": "dotMultiply",
      "category": "Operators",
      "syntax": [
        "x .* y",
        "dotMultiply(x, y)"
      ],
      "description": "Multiply two values element wise.",
      "examples": [
        "a = [1, 2, 3; 4, 5, 6]",
        "b = [2, 1, 1; 3, 2, 5]",
        "a .* b"
      ],
      "seealso": [
        "multiply",
        "divide",
        "dotDivide"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/arithmetic/dotPow.js
var require_dotPow = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/arithmetic/dotPow.js"(exports, module) {
    module.exports = {
      "name": "dotpow",
      "category": "Operators",
      "syntax": [
        "x .^ y",
        "dotpow(x, y)"
      ],
      "description": "Calculates the power of x to y element wise.",
      "examples": [
        "a = [1, 2, 3; 4, 5, 6]",
        "a .^ 2"
      ],
      "seealso": [
        "pow"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/arithmetic/exp.js
var require_exp = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/arithmetic/exp.js"(exports, module) {
    module.exports = {
      "name": "exp",
      "category": "Arithmetic",
      "syntax": [
        "exp(x)"
      ],
      "description": "Calculate the exponent of a value.",
      "examples": [
        "exp(1.3)",
        "e ^ 1.3",
        "log(exp(1.3))",
        "x = 2.4",
        "(exp(i*x) == cos(x) + i*sin(x))   # Euler's formula"
      ],
      "seealso": [
        "pow",
        "log"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/arithmetic/fix.js
var require_fix2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/arithmetic/fix.js"(exports, module) {
    module.exports = {
      "name": "fix",
      "category": "Arithmetic",
      "syntax": [
        "fix(x)"
      ],
      "description": "Round a value towards zero. If x is complex, both real and imaginary part are rounded towards zero.",
      "examples": [
        "fix(3.2)",
        "fix(3.8)",
        "fix(-4.2)",
        "fix(-4.8)"
      ],
      "seealso": ["ceil", "floor", "round"]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/arithmetic/floor.js
var require_floor = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/arithmetic/floor.js"(exports, module) {
    module.exports = {
      "name": "floor",
      "category": "Arithmetic",
      "syntax": [
        "floor(x)"
      ],
      "description": "Round a value towards minus infinity.If x is complex, both real and imaginary part are rounded towards minus infinity.",
      "examples": [
        "floor(3.2)",
        "floor(3.8)",
        "floor(-4.2)"
      ],
      "seealso": ["ceil", "fix", "round"]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/arithmetic/gcd.js
var require_gcd = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/arithmetic/gcd.js"(exports, module) {
    module.exports = {
      "name": "gcd",
      "category": "Arithmetic",
      "syntax": [
        "gcd(a, b)",
        "gcd(a, b, c, ...)"
      ],
      "description": "Compute the greatest common divisor.",
      "examples": [
        "gcd(8, 12)",
        "gcd(-4, 6)",
        "gcd(25, 15, -10)"
      ],
      "seealso": ["lcm", "xgcd"]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/arithmetic/hypot.js
var require_hypot = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/arithmetic/hypot.js"(exports, module) {
    module.exports = {
      "name": "hypot",
      "category": "Arithmetic",
      "syntax": [
        "hypot(a, b, c, ...)",
        "hypot([a, b, c, ...])"
      ],
      "description": "Calculate the hypotenusa of a list with values. ",
      "examples": [
        "hypot(3, 4)",
        "sqrt(3^2 + 4^2)",
        "hypot(-2)",
        "hypot([3, 4, 5])"
      ],
      "seealso": ["abs", "norm"]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/arithmetic/lcm.js
var require_lcm = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/arithmetic/lcm.js"(exports, module) {
    module.exports = {
      "name": "lcm",
      "category": "Arithmetic",
      "syntax": [
        "lcm(x, y)"
      ],
      "description": "Compute the least common multiple.",
      "examples": [
        "lcm(4, 6)",
        "lcm(6, 21)",
        "lcm(6, 21, 5)"
      ],
      "seealso": ["gcd"]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/arithmetic/log.js
var require_log = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/arithmetic/log.js"(exports, module) {
    module.exports = {
      "name": "log",
      "category": "Arithmetic",
      "syntax": [
        "log(x)",
        "log(x, base)"
      ],
      "description": "Compute the logarithm of a value. If no base is provided, the natural logarithm of x is calculated. If base if provided, the logarithm is calculated for the specified base. log(x, base) is defined as log(x) / log(base).",
      "examples": [
        "log(3.5)",
        "a = log(2.4)",
        "exp(a)",
        "10 ^ 4",
        "log(10000, 10)",
        "log(10000) / log(10)",
        "b = log(1024, 2)",
        "2 ^ b"
      ],
      "seealso": [
        "exp",
        "log10"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/arithmetic/log10.js
var require_log10 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/arithmetic/log10.js"(exports, module) {
    module.exports = {
      "name": "log10",
      "category": "Arithmetic",
      "syntax": [
        "log10(x)"
      ],
      "description": "Compute the 10-base logarithm of a value.",
      "examples": [
        "log10(0.00001)",
        "log10(10000)",
        "10 ^ 4",
        "log(10000) / log(10)",
        "log(10000, 10)"
      ],
      "seealso": [
        "exp",
        "log"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/arithmetic/mod.js
var require_mod = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/arithmetic/mod.js"(exports, module) {
    module.exports = {
      "name": "mod",
      "category": "Operators",
      "syntax": [
        "x % y",
        "x mod y",
        "mod(x, y)"
      ],
      "description": "Calculates the modulus, the remainder of an integer division.",
      "examples": [
        "7 % 3",
        "11 % 2",
        "10 mod 4",
        "function isOdd(x) = x % 2",
        "isOdd(2)",
        "isOdd(3)"
      ],
      "seealso": ["divide"]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/arithmetic/multiply.js
var require_multiply2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/arithmetic/multiply.js"(exports, module) {
    module.exports = {
      "name": "multiply",
      "category": "Operators",
      "syntax": [
        "x * y",
        "multiply(x, y)"
      ],
      "description": "multiply two values.",
      "examples": [
        "a = 2.1 * 3.4",
        "a / 3.4",
        "2 * 3 + 4",
        "2 * (3 + 4)",
        "3 * 2.1 km"
      ],
      "seealso": [
        "divide"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/arithmetic/norm.js
var require_norm = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/arithmetic/norm.js"(exports, module) {
    module.exports = {
      "name": "norm",
      "category": "Arithmetic",
      "syntax": [
        "norm(x)",
        "norm(x, p)"
      ],
      "description": "Calculate the norm of a number, vector or matrix.",
      "examples": [
        "abs(-3.5)",
        "norm(-3.5)",
        "norm(3 - 4i))",
        "norm([1, 2, -3], Infinity)",
        "norm([1, 2, -3], -Infinity)",
        "norm([3, 4], 2)",
        "norm([[1, 2], [3, 4]], 1)",
        "norm([[1, 2], [3, 4]], 'inf')",
        "norm([[1, 2], [3, 4]], 'fro')"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/arithmetic/nthRoot.js
var require_nthRoot = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/arithmetic/nthRoot.js"(exports, module) {
    module.exports = {
      "name": "nthRoot",
      "category": "Arithmetic",
      "syntax": [
        "nthRoot(a)",
        "nthRoot(a, root)"
      ],
      "description": 'Calculate the nth root of a value. The principal nth root of a positive real number A, is the positive real solution of the equation "x^root = A".',
      "examples": [
        "4 ^ 3",
        "nthRoot(64, 3)",
        "nthRoot(9, 2)",
        "sqrt(9)"
      ],
      "seealso": [
        "sqrt",
        "pow"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/arithmetic/pow.js
var require_pow2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/arithmetic/pow.js"(exports, module) {
    module.exports = {
      "name": "pow",
      "category": "Operators",
      "syntax": [
        "x ^ y",
        "pow(x, y)"
      ],
      "description": "Calculates the power of x to y, x^y.",
      "examples": [
        "2^3 = 8",
        "2*2*2",
        "1 + e ^ (pi * i)"
      ],
      "seealso": ["multiply"]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/arithmetic/round.js
var require_round = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/arithmetic/round.js"(exports, module) {
    module.exports = {
      "name": "round",
      "category": "Arithmetic",
      "syntax": [
        "round(x)",
        "round(x, n)"
      ],
      "description": "round a value towards the nearest integer.If x is complex, both real and imaginary part are rounded towards the nearest integer. When n is specified, the value is rounded to n decimals.",
      "examples": [
        "round(3.2)",
        "round(3.8)",
        "round(-4.2)",
        "round(-4.8)",
        "round(pi, 3)",
        "round(123.45678, 2)"
      ],
      "seealso": ["ceil", "floor", "fix"]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/arithmetic/sign.js
var require_sign = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/arithmetic/sign.js"(exports, module) {
    module.exports = {
      "name": "sign",
      "category": "Arithmetic",
      "syntax": [
        "sign(x)"
      ],
      "description": "Compute the sign of a value. The sign of a value x is 1 when x>1, -1 when x<0, and 0 when x=0.",
      "examples": [
        "sign(3.5)",
        "sign(-4.2)",
        "sign(0)"
      ],
      "seealso": [
        "abs"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/arithmetic/sqrt.js
var require_sqrt = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/arithmetic/sqrt.js"(exports, module) {
    module.exports = {
      "name": "sqrt",
      "category": "Arithmetic",
      "syntax": [
        "sqrt(x)"
      ],
      "description": "Compute the square root value. If x = y * y, then y is the square root of x.",
      "examples": [
        "sqrt(25)",
        "5 * 5",
        "sqrt(-1)"
      ],
      "seealso": [
        "square",
        "multiply"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/arithmetic/square.js
var require_square = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/arithmetic/square.js"(exports, module) {
    module.exports = {
      "name": "square",
      "category": "Arithmetic",
      "syntax": [
        "square(x)"
      ],
      "description": "Compute the square of a value. The square of x is x * x.",
      "examples": [
        "square(3)",
        "sqrt(9)",
        "3^2",
        "3 * 3"
      ],
      "seealso": [
        "multiply",
        "pow",
        "sqrt",
        "cube"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/arithmetic/subtract.js
var require_subtract2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/arithmetic/subtract.js"(exports, module) {
    module.exports = {
      "name": "subtract",
      "category": "Operators",
      "syntax": [
        "x - y",
        "subtract(x, y)"
      ],
      "description": "subtract two values.",
      "examples": [
        "a = 5.3 - 2",
        "a + 2",
        "2/3 - 1/6",
        "2 * 3 - 3",
        "2.1 km - 500m"
      ],
      "seealso": [
        "add"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/arithmetic/unaryMinus.js
var require_unaryMinus2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/arithmetic/unaryMinus.js"(exports, module) {
    module.exports = {
      "name": "unaryMinus",
      "category": "Operators",
      "syntax": [
        "-x",
        "unaryMinus(x)"
      ],
      "description": "Inverse the sign of a value. Converts booleans and strings to numbers.",
      "examples": [
        "-4.5",
        "-(-5.6)",
        '-"22"'
      ],
      "seealso": [
        "add",
        "subtract",
        "unaryPlus"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/arithmetic/unaryPlus.js
var require_unaryPlus = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/arithmetic/unaryPlus.js"(exports, module) {
    module.exports = {
      "name": "unaryPlus",
      "category": "Operators",
      "syntax": [
        "+x",
        "unaryPlus(x)"
      ],
      "description": "Converts booleans and strings to numbers.",
      "examples": [
        "+true",
        '+"2"'
      ],
      "seealso": [
        "add",
        "subtract",
        "unaryMinus"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/arithmetic/xgcd.js
var require_xgcd = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/arithmetic/xgcd.js"(exports, module) {
    module.exports = {
      "name": "xgcd",
      "category": "Arithmetic",
      "syntax": [
        "xgcd(a, b)"
      ],
      "description": "Calculate the extended greatest common divisor for two values",
      "examples": [
        "xgcd(8, 12)",
        "gcd(8, 12)",
        "xgcd(36163, 21199)"
      ],
      "seealso": ["gcd", "lcm"]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/bitwise/bitAnd.js
var require_bitAnd = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/bitwise/bitAnd.js"(exports, module) {
    module.exports = {
      "name": "bitAnd",
      "category": "Bitwise",
      "syntax": [
        "x & y",
        "bitAnd(x, y)"
      ],
      "description": "Bitwise AND operation. Performs the logical AND operation on each pair of the corresponding bits of the two given values by multiplying them. If both bits in the compared position are 1, the bit in the resulting binary representation is 1, otherwise, the result is 0",
      "examples": [
        "5 & 3",
        "bitAnd(53, 131)",
        "[1, 12, 31] & 42"
      ],
      "seealso": [
        "bitNot",
        "bitOr",
        "bitXor",
        "leftShift",
        "rightArithShift",
        "rightLogShift"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/bitwise/bitNot.js
var require_bitNot = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/bitwise/bitNot.js"(exports, module) {
    module.exports = {
      "name": "bitNot",
      "category": "Bitwise",
      "syntax": [
        "~x",
        "bitNot(x)"
      ],
      "description": "Bitwise NOT operation. Performs a logical negation on each bit of the given value. Bits that are 0 become 1, and those that are 1 become 0.",
      "examples": [
        "~1",
        "~2",
        "bitNot([2, -3, 4])"
      ],
      "seealso": [
        "bitAnd",
        "bitOr",
        "bitXor",
        "leftShift",
        "rightArithShift",
        "rightLogShift"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/bitwise/bitOr.js
var require_bitOr = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/bitwise/bitOr.js"(exports, module) {
    module.exports = {
      "name": "bitOr",
      "category": "Bitwise",
      "syntax": [
        "x | y",
        "bitOr(x, y)"
      ],
      "description": "Bitwise OR operation. Performs the logical inclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if the first bit is 1 or the second bit is 1 or both bits are 1, otherwise, the result is 0.",
      "examples": [
        "5 | 3",
        "bitOr([1, 2, 3], 4)"
      ],
      "seealso": [
        "bitAnd",
        "bitNot",
        "bitXor",
        "leftShift",
        "rightArithShift",
        "rightLogShift"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/bitwise/bitXor.js
var require_bitXor = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/bitwise/bitXor.js"(exports, module) {
    module.exports = {
      "name": "bitXor",
      "category": "Bitwise",
      "syntax": [
        "bitXor(x, y)"
      ],
      "description": "Bitwise XOR operation, exclusive OR. Performs the logical exclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if only the first bit is 1 or only the second bit is 1, but will be 0 if both are 0 or both are 1.",
      "examples": [
        "bitOr(1, 2)",
        "bitXor([2, 3, 4], 4)"
      ],
      "seealso": [
        "bitAnd",
        "bitNot",
        "bitOr",
        "leftShift",
        "rightArithShift",
        "rightLogShift"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/bitwise/leftShift.js
var require_leftShift = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/bitwise/leftShift.js"(exports, module) {
    module.exports = {
      "name": "leftShift",
      "category": "Bitwise",
      "syntax": [
        "x << y",
        "leftShift(x, y)"
      ],
      "description": "Bitwise left logical shift of a value x by y number of bits.",
      "examples": [
        "4 << 1",
        "8 >> 1"
      ],
      "seealso": [
        "bitAnd",
        "bitNot",
        "bitOr",
        "bitXor",
        "rightArithShift",
        "rightLogShift"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/bitwise/rightArithShift.js
var require_rightArithShift = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/bitwise/rightArithShift.js"(exports, module) {
    module.exports = {
      "name": "rightArithShift",
      "category": "Bitwise",
      "syntax": [
        "x >> y",
        "leftShift(x, y)"
      ],
      "description": "Bitwise right arithmetic shift of a value x by y number of bits.",
      "examples": [
        "8 >> 1",
        "4 << 1",
        "-12 >> 2"
      ],
      "seealso": [
        "bitAnd",
        "bitNot",
        "bitOr",
        "bitXor",
        "leftShift",
        "rightLogShift"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/bitwise/rightLogShift.js
var require_rightLogShift = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/bitwise/rightLogShift.js"(exports, module) {
    module.exports = {
      "name": "rightLogShift",
      "category": "Bitwise",
      "syntax": [
        "x >> y",
        "leftShift(x, y)"
      ],
      "description": "Bitwise right logical shift of a value x by y number of bits.",
      "examples": [
        "8 >>> 1",
        "4 << 1",
        "-12 >>> 2"
      ],
      "seealso": [
        "bitAnd",
        "bitNot",
        "bitOr",
        "bitXor",
        "leftShift",
        "rightArithShift"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/combinatorics/bellNumbers.js
var require_bellNumbers = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/combinatorics/bellNumbers.js"(exports, module) {
    module.exports = {
      "name": "bellNumbers",
      "category": "Combinatorics",
      "syntax": [
        "bellNumbers(n)"
      ],
      "description": "The Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S. `bellNumbers` only takes integer arguments. The following condition must be enforced: n >= 0.",
      "examples": [
        "bellNumbers(3)",
        "bellNumbers(8)"
      ],
      "seealso": ["stirlingS2"]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/combinatorics/catalan.js
var require_catalan = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/combinatorics/catalan.js"(exports, module) {
    module.exports = {
      "name": "catalan",
      "category": "Combinatorics",
      "syntax": [
        "catalan(n)"
      ],
      "description": "The Catalan Numbers enumerate combinatorial structures of many different types. catalan only takes integer arguments. The following condition must be enforced: n >= 0.",
      "examples": [
        "catalan(3)",
        "catalan(8)"
      ],
      "seealso": ["bellNumbers"]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/combinatorics/composition.js
var require_composition = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/combinatorics/composition.js"(exports, module) {
    module.exports = {
      "name": "composition",
      "category": "Combinatorics",
      "syntax": [
        "composition(n, k)"
      ],
      "description": "The composition counts of n into k parts. composition only takes integer arguments. The following condition must be enforced: k <= n.",
      "examples": [
        "composition(5, 3)"
      ],
      "seealso": ["combinations"]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/combinatorics/stirlingS2.js
var require_stirlingS2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/combinatorics/stirlingS2.js"(exports, module) {
    module.exports = {
      "name": "stirlingS2",
      "category": "Combinatorics",
      "syntax": [
        "stirlingS2(n, k)"
      ],
      "description": "he Stirling numbers of the second kind, counts the number of ways to partition a set of n labelled objects into k nonempty unlabelled subsets. `stirlingS2` only takes integer arguments. The following condition must be enforced: k <= n. If n = k or k = 1, then s(n,k) = 1.",
      "examples": [
        "stirlingS2(5, 3)"
      ],
      "seealso": ["bellNumbers"]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/core/config.js
var require_config2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/core/config.js"(exports, module) {
    module.exports = {
      "name": "config",
      "category": "Core",
      "syntax": [
        "config()",
        "config(options)"
      ],
      "description": "Get configuration or change configuration.",
      "examples": [
        "config()",
        "1/3 + 1/4",
        'config({number: "Fraction"})',
        "1/3 + 1/4"
      ],
      "seealso": []
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/core/import.js
var require_import2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/core/import.js"(exports, module) {
    module.exports = {
      "name": "import",
      "category": "Core",
      "syntax": [
        "import(functions)",
        "import(functions, options)"
      ],
      "description": "Import functions or constants from an object.",
      "examples": [
        "import({myFn: f(x)=x^2, myConstant: 32 })",
        "myFn(2)",
        "myConstant"
      ],
      "seealso": []
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/core/typed.js
var require_typed2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/core/typed.js"(exports, module) {
    module.exports = {
      "name": "typed",
      "category": "Core",
      "syntax": [
        "typed(signatures)",
        "typed(name, signatures)"
      ],
      "description": "Create a typed function.",
      "examples": [
        'double = typed({ "number, number": f(x)=x+x })',
        "double(2)",
        'double("hello")'
      ],
      "seealso": []
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/complex/arg.js
var require_arg = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/complex/arg.js"(exports, module) {
    module.exports = {
      "name": "arg",
      "category": "Complex",
      "syntax": [
        "arg(x)"
      ],
      "description": "Compute the argument of a complex value. If x = a+bi, the argument is computed as atan2(b, a).",
      "examples": [
        "arg(2 + 2i)",
        "atan2(3, 2)",
        "arg(2 + 3i)"
      ],
      "seealso": [
        "re",
        "im",
        "conj",
        "abs"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/complex/conj.js
var require_conj = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/complex/conj.js"(exports, module) {
    module.exports = {
      "name": "conj",
      "category": "Complex",
      "syntax": [
        "conj(x)"
      ],
      "description": "Compute the complex conjugate of a complex value. If x = a+bi, the complex conjugate is a-bi.",
      "examples": [
        "conj(2 + 3i)",
        "conj(2 - 3i)",
        "conj(-5.2i)"
      ],
      "seealso": [
        "re",
        "im",
        "abs",
        "arg"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/complex/re.js
var require_re = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/complex/re.js"(exports, module) {
    module.exports = {
      "name": "re",
      "category": "Complex",
      "syntax": [
        "re(x)"
      ],
      "description": "Get the real part of a complex number.",
      "examples": [
        "re(2 + 3i)",
        "im(2 + 3i)",
        "re(-5.2i)",
        "re(2.4)"
      ],
      "seealso": [
        "im",
        "conj",
        "abs",
        "arg"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/complex/im.js
var require_im = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/complex/im.js"(exports, module) {
    module.exports = {
      "name": "im",
      "category": "Complex",
      "syntax": [
        "im(x)"
      ],
      "description": "Get the imaginary part of a complex number.",
      "examples": [
        "im(2 + 3i)",
        "re(2 + 3i)",
        "im(-5.2i)",
        "im(2.4)"
      ],
      "seealso": [
        "re",
        "conj",
        "abs",
        "arg"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/expression/eval.js
var require_eval = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/expression/eval.js"(exports, module) {
    module.exports = {
      "name": "eval",
      "category": "Expression",
      "syntax": [
        "eval(expression)",
        "eval([expr1, expr2, expr3, ...])"
      ],
      "description": "Evaluate an expression or an array with expressions.",
      "examples": [
        'eval("2 + 3")',
        'eval("sqrt(" + 4 + ")")'
      ],
      "seealso": []
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/expression/help.js
var require_help = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/expression/help.js"(exports, module) {
    module.exports = {
      "name": "help",
      "category": "Expression",
      "syntax": [
        "help(object)",
        "help(string)"
      ],
      "description": "Display documentation on a function or data type.",
      "examples": [
        "help(sqrt)",
        'help("complex")'
      ],
      "seealso": []
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/geometry/distance.js
var require_distance = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/geometry/distance.js"(exports, module) {
    module.exports = {
      "name": "distance",
      "category": "Geometry",
      "syntax": [
        "distance([x1, y1], [x2, y2])",
        "distance([[x1, y1], [x2, y2])"
      ],
      "description": "Calculates the Euclidean distance between two points.",
      "examples": [
        "distance([0,0], [4,4])",
        "distance([[0,0], [4,4]])"
      ],
      "seealso": []
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/geometry/intersect.js
var require_intersect = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/geometry/intersect.js"(exports, module) {
    module.exports = {
      "name": "intersect",
      "category": "Geometry",
      "syntax": [
        "intersect(expr1, expr2, expr3, expr4)",
        "intersect(expr1, expr2, expr3)"
      ],
      "description": "Computes the intersection point of lines and/or planes.",
      "examples": [
        "intersect([0, 0], [10, 10], [10, 0], [0, 10])",
        "intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6])"
      ],
      "seealso": []
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/logical/and.js
var require_and = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/logical/and.js"(exports, module) {
    module.exports = {
      "name": "and",
      "category": "Logical",
      "syntax": [
        "x and y",
        "and(x, y)"
      ],
      "description": "Logical and. Test whether two values are both defined with a nonzero/nonempty value.",
      "examples": [
        "true and false",
        "true and true",
        "2 and 4"
      ],
      "seealso": [
        "not",
        "or",
        "xor"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/logical/not.js
var require_not = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/logical/not.js"(exports, module) {
    module.exports = {
      "name": "not",
      "category": "Logical",
      "syntax": [
        "not x",
        "not(x)"
      ],
      "description": "Logical not. Flips the boolean value of given argument.",
      "examples": [
        "not true",
        "not false",
        "not 2",
        "not 0"
      ],
      "seealso": [
        "and",
        "or",
        "xor"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/logical/or.js
var require_or = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/logical/or.js"(exports, module) {
    module.exports = {
      "name": "or",
      "category": "Logical",
      "syntax": [
        "x or y",
        "or(x, y)"
      ],
      "description": "Logical or. Test if at least one value is defined with a nonzero/nonempty value.",
      "examples": [
        "true or false",
        "false or false",
        "0 or 4"
      ],
      "seealso": [
        "not",
        "and",
        "xor"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/logical/xor.js
var require_xor = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/logical/xor.js"(exports, module) {
    module.exports = {
      "name": "xor",
      "category": "Logical",
      "syntax": [
        "x or y",
        "or(x, y)"
      ],
      "description": "Logical exclusive or, xor. Test whether one and only one value is defined with a nonzero/nonempty value.",
      "examples": [
        "true xor false",
        "false xor false",
        "true xor true",
        "0 or 4"
      ],
      "seealso": [
        "not",
        "and",
        "or"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/matrix/concat.js
var require_concat = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/matrix/concat.js"(exports, module) {
    module.exports = {
      "name": "concat",
      "category": "Matrix",
      "syntax": [
        "concat(A, B, C, ...)",
        "concat(A, B, C, ..., dim)"
      ],
      "description": "Concatenate matrices. By default, the matrices are concatenated by the last dimension. The dimension on which to concatenate can be provided as last argument.",
      "examples": [
        "A = [1, 2; 5, 6]",
        "B = [3, 4; 7, 8]",
        "concat(A, B)",
        "concat(A, B, 1)",
        "concat(A, B, 2)"
      ],
      "seealso": [
        "det",
        "diag",
        "eye",
        "inv",
        "ones",
        "range",
        "size",
        "squeeze",
        "subset",
        "trace",
        "transpose",
        "zeros"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/matrix/cross.js
var require_cross = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/matrix/cross.js"(exports, module) {
    module.exports = {
      "name": "cross",
      "category": "Matrix",
      "syntax": [
        "cross(A, B)"
      ],
      "description": "Calculate the cross product for two vectors in three dimensional space.",
      "examples": [
        "cross([1, 1, 0],  [0, 1, 1])",
        "cross([3, -3, 1], [4, 9, 2])",
        "cross([2, 3, 4],  [5, 6, 7])"
      ],
      "seealso": [
        "multiply",
        "dot"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/matrix/det.js
var require_det = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/matrix/det.js"(exports, module) {
    module.exports = {
      "name": "det",
      "category": "Matrix",
      "syntax": [
        "det(x)"
      ],
      "description": "Calculate the determinant of a matrix",
      "examples": [
        "det([1, 2; 3, 4])",
        "det([-2, 2, 3; -1, 1, 3; 2, 0, -1])"
      ],
      "seealso": [
        "concat",
        "diag",
        "eye",
        "inv",
        "ones",
        "range",
        "size",
        "squeeze",
        "subset",
        "trace",
        "transpose",
        "zeros"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/matrix/diag.js
var require_diag = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/matrix/diag.js"(exports, module) {
    module.exports = {
      "name": "diag",
      "category": "Matrix",
      "syntax": [
        "diag(x)",
        "diag(x, k)"
      ],
      "description": "Create a diagonal matrix or retrieve the diagonal of a matrix. When x is a vector, a matrix with the vector values on the diagonal will be returned. When x is a matrix, a vector with the diagonal values of the matrix is returned. When k is provided, the k-th diagonal will be filled in or retrieved, if k is positive, the values are placed on the super diagonal. When k is negative, the values are placed on the sub diagonal.",
      "examples": [
        "diag(1:3)",
        "diag(1:3, 1)",
        "a = [1, 2, 3; 4, 5, 6; 7, 8, 9]",
        "diag(a)"
      ],
      "seealso": [
        "concat",
        "det",
        "eye",
        "inv",
        "ones",
        "range",
        "size",
        "squeeze",
        "subset",
        "trace",
        "transpose",
        "zeros"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/matrix/dot.js
var require_dot = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/matrix/dot.js"(exports, module) {
    module.exports = {
      "name": "dot",
      "category": "Matrix",
      "syntax": [
        "dot(A, B)"
      ],
      "description": "Calculate the dot product of two vectors. The dot product of A = [a1, a2, a3, ..., an] and B = [b1, b2, b3, ..., bn] is defined as dot(A, B) = a1 * b1 + a2 * b2 + a3 * b3 + ... + an * bn",
      "examples": [
        "dot([2, 4, 1], [2, 2, 3])",
        "[2, 4, 1] * [2, 2, 3]"
      ],
      "seealso": [
        "multiply",
        "cross"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/matrix/eye.js
var require_eye2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/matrix/eye.js"(exports, module) {
    module.exports = {
      "name": "eye",
      "category": "Matrix",
      "syntax": [
        "eye(n)",
        "eye(m, n)",
        "eye([m, n])",
        "eye"
      ],
      "description": "Returns the identity matrix with size m-by-n. The matrix has ones on the diagonal and zeros elsewhere.",
      "examples": [
        "eye(3)",
        "eye(3, 5)",
        "a = [1, 2, 3; 4, 5, 6]",
        "eye(size(a))"
      ],
      "seealso": [
        "concat",
        "det",
        "diag",
        "inv",
        "ones",
        "range",
        "size",
        "squeeze",
        "subset",
        "trace",
        "transpose",
        "zeros"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/matrix/filter.js
var require_filter = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/matrix/filter.js"(exports, module) {
    module.exports = {
      "name": "filter",
      "category": "Matrix",
      "syntax": [
        "filter(x, test)"
      ],
      "description": "Filter items in a matrix.",
      "examples": [
        "isPositive(x) = x > 0",
        "filter([6, -2, -1, 4, 3], isPositive)",
        "filter([6, -2, 0, 1, 0], x != 0)"
      ],
      "seealso": ["sort", "map", "forEach"]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/matrix/flatten.js
var require_flatten = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/matrix/flatten.js"(exports, module) {
    module.exports = {
      "name": "flatten",
      "category": "Matrix",
      "syntax": [
        "flatten(x)"
      ],
      "description": "Flatten a multi dimensional matrix into a single dimensional matrix.",
      "examples": [
        "a = [1, 2, 3; 4, 5, 6]",
        "size(a)",
        "b = flatten(a)",
        "size(b)"
      ],
      "seealso": [
        "concat",
        "resize",
        "size",
        "squeeze"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/matrix/forEach.js
var require_forEach = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/matrix/forEach.js"(exports, module) {
    module.exports = {
      "name": "forEach",
      "category": "Matrix",
      "syntax": [
        "forEach(x, callback)"
      ],
      "description": "Iterates over all elements of a matrix/array, and executes the given callback function.",
      "examples": [
        "forEach([1, 2, 3], function(val) { console.log(val) })"
      ],
      "seealso": ["map", "sort", "filter"]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/matrix/inv.js
var require_inv = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/matrix/inv.js"(exports, module) {
    module.exports = {
      "name": "inv",
      "category": "Matrix",
      "syntax": [
        "inv(x)"
      ],
      "description": "Calculate the inverse of a matrix",
      "examples": [
        "inv([1, 2; 3, 4])",
        "inv(4)",
        "1 / 4"
      ],
      "seealso": [
        "concat",
        "det",
        "diag",
        "eye",
        "ones",
        "range",
        "size",
        "squeeze",
        "subset",
        "trace",
        "transpose",
        "zeros"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/matrix/kron.js
var require_kron = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/matrix/kron.js"(exports, module) {
    module.exports = {
      "name": "kron",
      "category": "Matrix",
      "syntax": [
        "math.kron(x, y)"
      ],
      "description": "Calculates the kronecker product of 2 matrices or vectors.",
      "examples": [
        "kron([[1, 0], [0, 1]], [[1, 2], [3, 4]])",
        "kron([1,1], [2,3,4])"
      ],
      "seealso": [
        "multiply",
        "dot",
        "cross"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/matrix/map.js
var require_map = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/matrix/map.js"(exports, module) {
    module.exports = {
      "name": "map",
      "category": "Matrix",
      "syntax": [
        "map(x, callback)"
      ],
      "description": "Create a new matrix or array with the results of the callback function executed on each entry of the matrix/array.",
      "examples": [
        "map([1, 2, 3], function(val) { return value * value })"
      ],
      "seealso": ["filter", "forEach"]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/matrix/ones.js
var require_ones = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/matrix/ones.js"(exports, module) {
    module.exports = {
      "name": "ones",
      "category": "Matrix",
      "syntax": [
        "ones(m)",
        "ones(m, n)",
        "ones(m, n, p, ...)",
        "ones([m])",
        "ones([m, n])",
        "ones([m, n, p, ...])",
        "ones"
      ],
      "description": "Create a matrix containing ones.",
      "examples": [
        "ones(3)",
        "ones(3, 5)",
        "ones([2,3]) * 4.5",
        "a = [1, 2, 3; 4, 5, 6]",
        "ones(size(a))"
      ],
      "seealso": [
        "concat",
        "det",
        "diag",
        "eye",
        "inv",
        "range",
        "size",
        "squeeze",
        "subset",
        "trace",
        "transpose",
        "zeros"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/matrix/partitionSelect.js
var require_partitionSelect = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/matrix/partitionSelect.js"(exports, module) {
    module.exports = {
      "name": "partitionSelect",
      "category": "Matrix",
      "syntax": [
        "partitionSelect(x, k)",
        "partitionSelect(x, k, compare)"
      ],
      "description": "Partition-based selection of an array or 1D matrix. Will find the kth smallest value, and mutates the input array. Uses Quickselect.",
      "examples": [
        "partitionSelect([5, 10, 1], 2)",
        'partitionSelect(["C", "B", "A", "D"], 1)'
      ],
      "seealso": ["sort"]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/matrix/range.js
var require_range = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/matrix/range.js"(exports, module) {
    module.exports = {
      "name": "range",
      "category": "Type",
      "syntax": [
        "start:end",
        "start:step:end",
        "range(start, end)",
        "range(start, end, step)",
        "range(string)"
      ],
      "description": "Create a range. Lower bound of the range is included, upper bound is excluded.",
      "examples": [
        "1:5",
        "3:-1:-3",
        "range(3, 7)",
        "range(0, 12, 2)",
        'range("4:10")',
        "a = [1, 2, 3, 4; 5, 6, 7, 8]",
        "a[1:2, 1:2]"
      ],
      "seealso": [
        "concat",
        "det",
        "diag",
        "eye",
        "inv",
        "ones",
        "size",
        "squeeze",
        "subset",
        "trace",
        "transpose",
        "zeros"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/matrix/resize.js
var require_resize = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/matrix/resize.js"(exports, module) {
    module.exports = {
      "name": "resize",
      "category": "Matrix",
      "syntax": [
        "resize(x, size)",
        "resize(x, size, defaultValue)"
      ],
      "description": "Resize a matrix.",
      "examples": [
        "resize([1,2,3,4,5], [3])",
        "resize([1,2,3], [5])",
        "resize([1,2,3], [5], -1)",
        "resize(2, [2, 3])",
        'resize("hello", [8], "!")'
      ],
      "seealso": [
        "size",
        "subset",
        "squeeze",
        "reshape"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/matrix/reshape.js
var require_reshape = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/matrix/reshape.js"(exports, module) {
    module.exports = {
      "name": "reshape",
      "category": "Matrix",
      "syntax": [
        "reshape(x, sizes)"
      ],
      "description": "Reshape a multi dimensional array to fit the specified dimensions.",
      "examples": [
        "reshape([1, 2, 3, 4, 5, 6], [2, 3])",
        "reshape([[1, 2], [3, 4]], [1, 4])",
        "reshape([[1, 2], [3, 4]], [4])"
      ],
      "seealso": [
        "size",
        "squeeze",
        "resize"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/matrix/size.js
var require_size = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/matrix/size.js"(exports, module) {
    module.exports = {
      "name": "size",
      "category": "Matrix",
      "syntax": [
        "size(x)"
      ],
      "description": "Calculate the size of a matrix.",
      "examples": [
        "size(2.3)",
        'size("hello world")',
        "a = [1, 2; 3, 4; 5, 6]",
        "size(a)",
        "size(1:6)"
      ],
      "seealso": [
        "concat",
        "det",
        "diag",
        "eye",
        "inv",
        "ones",
        "range",
        "squeeze",
        "subset",
        "trace",
        "transpose",
        "zeros"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/matrix/sort.js
var require_sort = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/matrix/sort.js"(exports, module) {
    module.exports = {
      "name": "sort",
      "category": "Matrix",
      "syntax": [
        "sort(x)",
        "sort(x, compare)"
      ],
      "description": 'Sort the items in a matrix. Compare can be a string "asc" or "desc", or a custom sort function.',
      "examples": [
        "sort([5, 10, 1])",
        'sort(["C", "B", "A", "D"])',
        "sortByLength(a, b) = size(a)[1] - size(b)[1]",
        'sort(["Langdon", "Tom", "Sara"], sortByLength)'
      ],
      "seealso": ["map", "filter", "forEach"]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/matrix/squeeze.js
var require_squeeze = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/matrix/squeeze.js"(exports, module) {
    module.exports = {
      "name": "squeeze",
      "category": "Matrix",
      "syntax": [
        "squeeze(x)"
      ],
      "description": "Remove inner and outer singleton dimensions from a matrix.",
      "examples": [
        "a = zeros(3,2,1)",
        "size(squeeze(a))",
        "b = zeros(1,1,3)",
        "size(squeeze(b))"
      ],
      "seealso": [
        "concat",
        "det",
        "diag",
        "eye",
        "inv",
        "ones",
        "range",
        "size",
        "subset",
        "trace",
        "transpose",
        "zeros"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/matrix/subset.js
var require_subset = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/matrix/subset.js"(exports, module) {
    module.exports = {
      "name": "subset",
      "category": "Matrix",
      "syntax": [
        "value(index)",
        "value(index) = replacement",
        "subset(value, [index])",
        "subset(value, [index], replacement)"
      ],
      "description": "Get or set a subset of a matrix or string. Indexes are one-based. Both the ranges lower-bound and upper-bound are included.",
      "examples": [
        "d = [1, 2; 3, 4]",
        "e = []",
        "e[1, 1:2] = [5, 6]",
        "e[2, :] = [7, 8]",
        "f = d * e",
        "f[2, 1]",
        "f[:, 1]"
      ],
      "seealso": [
        "concat",
        "det",
        "diag",
        "eye",
        "inv",
        "ones",
        "range",
        "size",
        "squeeze",
        "trace",
        "transpose",
        "zeros"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/matrix/trace.js
var require_trace = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/matrix/trace.js"(exports, module) {
    module.exports = {
      "name": "trace",
      "category": "Matrix",
      "syntax": [
        "trace(A)"
      ],
      "description": "Calculate the trace of a matrix: the sum of the elements on the main diagonal of a square matrix.",
      "examples": [
        "A = [1, 2, 3; -1, 2, 3; 2, 0, 3]",
        "trace(A)"
      ],
      "seealso": [
        "concat",
        "det",
        "diag",
        "eye",
        "inv",
        "ones",
        "range",
        "size",
        "squeeze",
        "subset",
        "transpose",
        "zeros"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/matrix/transpose.js
var require_transpose = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/matrix/transpose.js"(exports, module) {
    module.exports = {
      "name": "transpose",
      "category": "Matrix",
      "syntax": [
        "x'",
        "transpose(x)"
      ],
      "description": "Transpose a matrix",
      "examples": [
        "a = [1, 2, 3; 4, 5, 6]",
        "a'",
        "transpose(a)"
      ],
      "seealso": [
        "concat",
        "det",
        "diag",
        "eye",
        "inv",
        "ones",
        "range",
        "size",
        "squeeze",
        "subset",
        "trace",
        "zeros"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/matrix/zeros.js
var require_zeros = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/matrix/zeros.js"(exports, module) {
    module.exports = {
      "name": "zeros",
      "category": "Matrix",
      "syntax": [
        "zeros(m)",
        "zeros(m, n)",
        "zeros(m, n, p, ...)",
        "zeros([m])",
        "zeros([m, n])",
        "zeros([m, n, p, ...])",
        "zeros"
      ],
      "description": "Create a matrix containing zeros.",
      "examples": [
        "zeros(3)",
        "zeros(3, 5)",
        "a = [1, 2, 3; 4, 5, 6]",
        "zeros(size(a))"
      ],
      "seealso": [
        "concat",
        "det",
        "diag",
        "eye",
        "inv",
        "ones",
        "range",
        "size",
        "squeeze",
        "subset",
        "trace",
        "transpose"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/probability/combinations.js
var require_combinations = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/probability/combinations.js"(exports, module) {
    module.exports = {
      "name": "combinations",
      "category": "Probability",
      "syntax": [
        "combinations(n, k)"
      ],
      "description": "Compute the number of combinations of n items taken k at a time",
      "examples": [
        "combinations(7, 5)"
      ],
      "seealso": ["permutations", "factorial"]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/probability/factorial.js
var require_factorial = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/probability/factorial.js"(exports, module) {
    module.exports = {
      "name": "factorial",
      "category": "Probability",
      "syntax": [
        "kldivergence(x, y)"
      ],
      "description": "Compute the factorial of a value",
      "examples": [
        "5!",
        "5 * 4 * 3 * 2 * 1",
        "3!"
      ],
      "seealso": ["combinations", "permutations", "gamma"]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/probability/gamma.js
var require_gamma = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/probability/gamma.js"(exports, module) {
    module.exports = {
      "name": "gamma",
      "category": "Probability",
      "syntax": [
        "gamma(n)"
      ],
      "description": "Compute the gamma function. For small values, the Lanczos approximation is used, and for large values the extended Stirling approximation.",
      "examples": [
        "gamma(4)",
        "3!",
        "gamma(1/2)",
        "sqrt(pi)"
      ],
      "seealso": ["factorial"]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/probability/kldivergence.js
var require_kldivergence = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/probability/kldivergence.js"(exports, module) {
    module.exports = {
      "name": "kldivergence",
      "category": "Probability",
      "syntax": [
        "n!",
        "factorial(n)"
      ],
      "description": "Calculate the Kullback-Leibler (KL) divergence  between two distributions.",
      "examples": [
        "math.kldivergence([0.7,0.5,0.4], [0.2,0.9,0.5])"
      ],
      "seealso": []
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/probability/multinomial.js
var require_multinomial = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/probability/multinomial.js"(exports, module) {
    module.exports = {
      "name": "multinomial",
      "category": "Probability",
      "syntax": [
        "multinomial(A)"
      ],
      "description": "Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities. multinomial takes one array of integers as an argument. The following condition must be enforced: every ai <= 0.",
      "examples": [
        "multinomial([1, 2, 1])"
      ],
      "seealso": ["combinations", "factorial"]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/probability/permutations.js
var require_permutations = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/probability/permutations.js"(exports, module) {
    module.exports = {
      "name": "permutations",
      "category": "Probability",
      "syntax": [
        "permutations(n)",
        "permutations(n, k)"
      ],
      "description": "Compute the number of permutations of n items taken k at a time",
      "examples": [
        "permutations(5)",
        "permutations(5, 3)"
      ],
      "seealso": ["combinations", "factorial"]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/probability/pickRandom.js
var require_pickRandom = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/probability/pickRandom.js"(exports, module) {
    module.exports = {
      "name": "pickRandom",
      "category": "Probability",
      "syntax": [
        "pickRandom(array)",
        "pickRandom(array, number)",
        "pickRandom(array, weights)",
        "pickRandom(array, number, weights)",
        "pickRandom(array, weights, number)"
      ],
      "description": "Pick a random entry from a given array.",
      "examples": [
        "pickRandom(0:10)",
        "pickRandom([1, 3, 1, 6])",
        "pickRandom([1, 3, 1, 6], 2)",
        "pickRandom([1, 3, 1, 6], [2, 3, 2, 1])",
        "pickRandom([1, 3, 1, 6], 2, [2, 3, 2, 1])",
        "pickRandom([1, 3, 1, 6], [2, 3, 2, 1], 2)"
      ],
      "seealso": ["random", "randomInt"]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/probability/random.js
var require_random = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/probability/random.js"(exports, module) {
    module.exports = {
      "name": "random",
      "category": "Probability",
      "syntax": [
        "random()",
        "random(max)",
        "random(min, max)",
        "random(size)",
        "random(size, max)",
        "random(size, min, max)"
      ],
      "description": "Return a random number.",
      "examples": [
        "random()",
        "random(10, 20)",
        "random([2, 3])"
      ],
      "seealso": ["pickRandom", "randomInt"]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/probability/randomInt.js
var require_randomInt = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/probability/randomInt.js"(exports, module) {
    module.exports = {
      "name": "randInt",
      "category": "Probability",
      "syntax": [
        "randInt(max)",
        "randInt(min, max)",
        "randInt(size)",
        "randInt(size, max)",
        "randInt(size, min, max)"
      ],
      "description": "Return a random integer number",
      "examples": [
        "randInt(10, 20)",
        "randInt([2, 3], 10)"
      ],
      "seealso": ["pickRandom", "random"]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/relational/compare.js
var require_compare = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/relational/compare.js"(exports, module) {
    module.exports = {
      "name": "compare",
      "category": "Relational",
      "syntax": [
        "compare(x, y)"
      ],
      "description": "Compare two values. Returns 1 if x is larger than y, -1 if x is smaller than y, and 0 if x and y are equal.",
      "examples": [
        "compare(2, 3)",
        "compare(3, 2)",
        "compare(2, 2)",
        "compare(5cm, 40mm)",
        "compare(2, [1, 2, 3])"
      ],
      "seealso": [
        "equal",
        "unequal",
        "smaller",
        "smallerEq",
        "largerEq"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/relational/deepEqual.js
var require_deepEqual = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/relational/deepEqual.js"(exports, module) {
    module.exports = {
      "name": "deepEqual",
      "category": "Relational",
      "syntax": [
        "deepEqual(x, y)"
      ],
      "description": "Check equality of two matrices element wise. Returns true if the size of both matrices is equal and when and each of the elements are equal.",
      "examples": [
        "[1,3,4] == [1,3,4]",
        "[1,3,4] == [1,3]"
      ],
      "seealso": [
        "equal",
        "unequal",
        "smaller",
        "larger",
        "smallerEq",
        "largerEq",
        "compare"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/relational/equal.js
var require_equal2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/relational/equal.js"(exports, module) {
    module.exports = {
      "name": "equal",
      "category": "Relational",
      "syntax": [
        "x == y",
        "equal(x, y)"
      ],
      "description": "Check equality of two values. Returns true if the values are equal, and false if not.",
      "examples": [
        "2+2 == 3",
        "2+2 == 4",
        "a = 3.2",
        "b = 6-2.8",
        "a == b",
        "50cm == 0.5m"
      ],
      "seealso": [
        "unequal",
        "smaller",
        "larger",
        "smallerEq",
        "largerEq",
        "compare",
        "deepEqual"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/relational/larger.js
var require_larger2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/relational/larger.js"(exports, module) {
    module.exports = {
      "name": "larger",
      "category": "Relational",
      "syntax": [
        "x > y",
        "larger(x, y)"
      ],
      "description": "Check if value x is larger than y. Returns true if x is larger than y, and false if not.",
      "examples": [
        "2 > 3",
        "5 > 2*2",
        "a = 3.3",
        "b = 6-2.8",
        "(a > b)",
        "(b < a)",
        "5 cm > 2 inch"
      ],
      "seealso": [
        "equal",
        "unequal",
        "smaller",
        "smallerEq",
        "largerEq",
        "compare"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/relational/largerEq.js
var require_largerEq = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/relational/largerEq.js"(exports, module) {
    module.exports = {
      "name": "largerEq",
      "category": "Relational",
      "syntax": [
        "x >= y",
        "largerEq(x, y)"
      ],
      "description": "Check if value x is larger or equal to y. Returns true if x is larger or equal to y, and false if not.",
      "examples": [
        "2 > 1+1",
        "2 >= 1+1",
        "a = 3.2",
        "b = 6-2.8",
        "(a > b)"
      ],
      "seealso": [
        "equal",
        "unequal",
        "smallerEq",
        "smaller",
        "largerEq",
        "compare"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/relational/smaller.js
var require_smaller2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/relational/smaller.js"(exports, module) {
    module.exports = {
      "name": "smaller",
      "category": "Relational",
      "syntax": [
        "x < y",
        "smaller(x, y)"
      ],
      "description": "Check if value x is smaller than value y. Returns true if x is smaller than y, and false if not.",
      "examples": [
        "2 < 3",
        "5 < 2*2",
        "a = 3.3",
        "b = 6-2.8",
        "(a < b)",
        "5 cm < 2 inch"
      ],
      "seealso": [
        "equal",
        "unequal",
        "larger",
        "smallerEq",
        "largerEq",
        "compare"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/relational/smallerEq.js
var require_smallerEq = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/relational/smallerEq.js"(exports, module) {
    module.exports = {
      "name": "smallerEq",
      "category": "Relational",
      "syntax": [
        "x <= y",
        "smallerEq(x, y)"
      ],
      "description": "Check if value x is smaller or equal to value y. Returns true if x is smaller than y, and false if not.",
      "examples": [
        "2 < 1+1",
        "2 <= 1+1",
        "a = 3.2",
        "b = 6-2.8",
        "(a < b)"
      ],
      "seealso": [
        "equal",
        "unequal",
        "larger",
        "smaller",
        "largerEq",
        "compare"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/relational/unequal.js
var require_unequal = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/relational/unequal.js"(exports, module) {
    module.exports = {
      "name": "unequal",
      "category": "Relational",
      "syntax": [
        "x != y",
        "unequal(x, y)"
      ],
      "description": "Check unequality of two values. Returns true if the values are unequal, and false if they are equal.",
      "examples": [
        "2+2 != 3",
        "2+2 != 4",
        "a = 3.2",
        "b = 6-2.8",
        "a != b",
        "50cm != 0.5m",
        "5 cm != 2 inch"
      ],
      "seealso": [
        "equal",
        "smaller",
        "larger",
        "smallerEq",
        "largerEq",
        "compare",
        "deepEqual"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/special/erf.js
var require_erf = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/special/erf.js"(exports, module) {
    module.exports = {
      "name": "erf",
      "category": "Special",
      "syntax": [
        "erf(x)"
      ],
      "description": "Compute the erf function of a value using a rational Chebyshev approximations for different intervals of x",
      "examples": [
        "erf(0.2)",
        "erf(-0.5)",
        "erf(4)"
      ],
      "seealso": []
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/statistics/mad.js
var require_mad = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/statistics/mad.js"(exports, module) {
    module.exports = {
      "name": "mad",
      "category": "Statistics",
      "syntax": [
        "mad(a, b, c, ...)",
        "mad(A)"
      ],
      "description": "Compute the median absolute deviation of a matrix or a list with values. The median absolute deviation is defined as the median of the absolute deviations from the median.",
      "examples": [
        "mad(10, 20, 30)",
        "mad([1, 2, 3])",
        "mad(10, 20, 30)"
      ],
      "seealso": [
        "mean",
        "median",
        "std",
        "abs"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/statistics/max.js
var require_max = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/statistics/max.js"(exports, module) {
    module.exports = {
      "name": "max",
      "category": "Statistics",
      "syntax": [
        "max(a, b, c, ...)",
        "max(A)",
        "max(A, dim)"
      ],
      "description": "Compute the maximum value of a list of values.",
      "examples": [
        "max(2, 3, 4, 1)",
        "max([2, 3, 4, 1])",
        "max([2, 5; 4, 3])",
        "max([2, 5; 4, 3], 1)",
        "max([2, 5; 4, 3], 2)",
        "max(2.7, 7.1, -4.5, 2.0, 4.1)",
        "min(2.7, 7.1, -4.5, 2.0, 4.1)"
      ],
      "seealso": [
        "mean",
        "median",
        "min",
        "prod",
        "std",
        "sum",
        "var"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/statistics/mean.js
var require_mean = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/statistics/mean.js"(exports, module) {
    module.exports = {
      "name": "mean",
      "category": "Statistics",
      "syntax": [
        "mean(a, b, c, ...)",
        "mean(A)",
        "mean(A, dim)"
      ],
      "description": "Compute the arithmetic mean of a list of values.",
      "examples": [
        "mean(2, 3, 4, 1)",
        "mean([2, 3, 4, 1])",
        "mean([2, 5; 4, 3])",
        "mean([2, 5; 4, 3], 1)",
        "mean([2, 5; 4, 3], 2)",
        "mean([1.0, 2.7, 3.2, 4.0])"
      ],
      "seealso": [
        "max",
        "median",
        "min",
        "prod",
        "std",
        "sum",
        "var"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/statistics/median.js
var require_median = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/statistics/median.js"(exports, module) {
    module.exports = {
      "name": "median",
      "category": "Statistics",
      "syntax": [
        "median(a, b, c, ...)",
        "median(A)"
      ],
      "description": "Compute the median of all values. The values are sorted and the middle value is returned. In case of an even number of values, the average of the two middle values is returned.",
      "examples": [
        "median(5, 2, 7)",
        "median([3, -1, 5, 7])"
      ],
      "seealso": [
        "max",
        "mean",
        "min",
        "prod",
        "std",
        "sum",
        "var",
        "quantileSeq"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/statistics/min.js
var require_min = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/statistics/min.js"(exports, module) {
    module.exports = {
      "name": "min",
      "category": "Statistics",
      "syntax": [
        "min(a, b, c, ...)",
        "min(A)",
        "min(A, dim)"
      ],
      "description": "Compute the minimum value of a list of values.",
      "examples": [
        "min(2, 3, 4, 1)",
        "min([2, 3, 4, 1])",
        "min([2, 5; 4, 3])",
        "min([2, 5; 4, 3], 1)",
        "min([2, 5; 4, 3], 2)",
        "min(2.7, 7.1, -4.5, 2.0, 4.1)",
        "max(2.7, 7.1, -4.5, 2.0, 4.1)"
      ],
      "seealso": [
        "max",
        "mean",
        "median",
        "prod",
        "std",
        "sum",
        "var"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/statistics/mode.js
var require_mode = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/statistics/mode.js"(exports, module) {
    module.exports = {
      "name": "mode",
      "category": "Statistics",
      "syntax": [
        "mode(a, b, c, ...)",
        "mode(A)",
        "mode(A, a, b, B, c, ...)"
      ],
      "description": "Computes the mode of all values as an array. In case mode being more than one, multiple values are returned in an array.",
      "examples": [
        "mode(5, 2, 7)",
        "mode([3, -1, 5, 7])"
      ],
      "seealso": [
        "max",
        "mean",
        "min",
        "median",
        "prod",
        "std",
        "sum",
        "var"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/statistics/prod.js
var require_prod = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/statistics/prod.js"(exports, module) {
    module.exports = {
      "name": "prod",
      "category": "Statistics",
      "syntax": [
        "prod(a, b, c, ...)",
        "prod(A)"
      ],
      "description": "Compute the product of all values.",
      "examples": [
        "prod(2, 3, 4)",
        "prod([2, 3, 4])",
        "prod([2, 5; 4, 3])"
      ],
      "seealso": [
        "max",
        "mean",
        "min",
        "median",
        "min",
        "std",
        "sum",
        "var"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/statistics/quantileSeq.js
var require_quantileSeq = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/statistics/quantileSeq.js"(exports, module) {
    module.exports = {
      "name": "quantileSeq",
      "category": "Statistics",
      "syntax": [
        "quantileSeq(A, prob[, sorted])",
        "quantileSeq(A, [prob1, prob2, ...][, sorted])",
        "quantileSeq(A, N[, sorted])"
      ],
      "description": "Compute the prob order quantile of a matrix or a list with values. The sequence is sorted and the middle value is returned. Supported types of sequence values are: Number, BigNumber, Unit Supported types of probablity are: Number, BigNumber. \n\nIn case of a (multi dimensional) array or matrix, the prob order quantile of all elements will be calculated.",
      "examples": [
        "quantileSeq([3, -1, 5, 7], 0.5)",
        "quantileSeq([3, -1, 5, 7], [1/3, 2/3])",
        "quantileSeq([3, -1, 5, 7], 2)",
        "quantileSeq([-1, 3, 5, 7], 0.5, true)"
      ],
      "seealso": [
        "mean",
        "median",
        "min",
        "max",
        "prod",
        "std",
        "sum",
        "var"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/statistics/std.js
var require_std = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/statistics/std.js"(exports, module) {
    module.exports = {
      "name": "std",
      "category": "Statistics",
      "syntax": [
        "std(a, b, c, ...)",
        "std(A)",
        "std(A, normalization)"
      ],
      "description": 'Compute the standard deviation of all values, defined as std(A) = sqrt(var(A)). Optional parameter normalization can be "unbiased" (default), "uncorrected", or "biased".',
      "examples": [
        "std(2, 4, 6)",
        "std([2, 4, 6, 8])",
        'std([2, 4, 6, 8], "uncorrected")',
        'std([2, 4, 6, 8], "biased")',
        "std([1, 2, 3; 4, 5, 6])"
      ],
      "seealso": [
        "max",
        "mean",
        "min",
        "median",
        "min",
        "prod",
        "sum",
        "var"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/statistics/sum.js
var require_sum = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/statistics/sum.js"(exports, module) {
    module.exports = {
      "name": "sum",
      "category": "Statistics",
      "syntax": [
        "sum(a, b, c, ...)",
        "sum(A)"
      ],
      "description": "Compute the sum of all values.",
      "examples": [
        "sum(2, 3, 4, 1)",
        "sum([2, 3, 4, 1])",
        "sum([2, 5; 4, 3])"
      ],
      "seealso": [
        "max",
        "mean",
        "median",
        "min",
        "prod",
        "std",
        "sum",
        "var"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/statistics/var.js
var require_var = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/statistics/var.js"(exports, module) {
    module.exports = {
      "name": "var",
      "category": "Statistics",
      "syntax": [
        "var(a, b, c, ...)",
        "var(A)",
        "var(A, normalization)"
      ],
      "description": 'Compute the variance of all values. Optional parameter normalization can be "unbiased" (default), "uncorrected", or "biased".',
      "examples": [
        "var(2, 4, 6)",
        "var([2, 4, 6, 8])",
        'var([2, 4, 6, 8], "uncorrected")',
        'var([2, 4, 6, 8], "biased")',
        "var([1, 2, 3; 4, 5, 6])"
      ],
      "seealso": [
        "max",
        "mean",
        "min",
        "median",
        "min",
        "prod",
        "std",
        "sum"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/trigonometry/acos.js
var require_acos = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/trigonometry/acos.js"(exports, module) {
    module.exports = {
      "name": "acos",
      "category": "Trigonometry",
      "syntax": [
        "acos(x)"
      ],
      "description": "Compute the inverse cosine of a value in radians.",
      "examples": [
        "acos(0.5)",
        "acos(cos(2.3))"
      ],
      "seealso": [
        "cos",
        "atan",
        "asin"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/trigonometry/acosh.js
var require_acosh = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/trigonometry/acosh.js"(exports, module) {
    module.exports = {
      "name": "acosh",
      "category": "Trigonometry",
      "syntax": [
        "acosh(x)"
      ],
      "description": "Calculate the hyperbolic arccos of a value, defined as `acosh(x) = ln(sqrt(x^2 - 1) + x)`.",
      "examples": [
        "acosh(1.5)"
      ],
      "seealso": [
        "cosh",
        "asinh",
        "atanh"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/trigonometry/acot.js
var require_acot = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/trigonometry/acot.js"(exports, module) {
    module.exports = {
      "name": "acot",
      "category": "Trigonometry",
      "syntax": [
        "acot(x)"
      ],
      "description": "Calculate the inverse cotangent of a value.",
      "examples": [
        "acot(0.5)",
        "acot(cot(0.5))",
        "acot(2)"
      ],
      "seealso": [
        "cot",
        "atan"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/trigonometry/acoth.js
var require_acoth = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/trigonometry/acoth.js"(exports, module) {
    module.exports = {
      "name": "acoth",
      "category": "Trigonometry",
      "syntax": [
        "acoth(x)"
      ],
      "description": "Calculate the hyperbolic arccotangent of a value, defined as `acoth(x) = (ln((x+1)/x) + ln(x/(x-1))) / 2`.",
      "examples": [
        "acoth(0.5)"
      ],
      "seealso": [
        "acsch",
        "asech"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/trigonometry/acsc.js
var require_acsc = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/trigonometry/acsc.js"(exports, module) {
    module.exports = {
      "name": "acsc",
      "category": "Trigonometry",
      "syntax": [
        "acsc(x)"
      ],
      "description": "Calculate the inverse cotangent of a value.",
      "examples": [
        "acsc(0.5)",
        "acsc(csc(0.5))",
        "acsc(2)"
      ],
      "seealso": [
        "csc",
        "asin",
        "asec"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/trigonometry/acsch.js
var require_acsch = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/trigonometry/acsch.js"(exports, module) {
    module.exports = {
      "name": "acsch",
      "category": "Trigonometry",
      "syntax": [
        "acsch(x)"
      ],
      "description": "Calculate the hyperbolic arccosecant of a value, defined as `acsch(x) = ln(1/x + sqrt(1/x^2 + 1))`.",
      "examples": [
        "acsch(0.5)"
      ],
      "seealso": [
        "asech",
        "acoth"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/trigonometry/asec.js
var require_asec = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/trigonometry/asec.js"(exports, module) {
    module.exports = {
      "name": "asec",
      "category": "Trigonometry",
      "syntax": [
        "asec(x)"
      ],
      "description": "Calculate the inverse secant of a value.",
      "examples": [
        "asec(0.5)",
        "asec(sec(0.5))",
        "asec(2)"
      ],
      "seealso": [
        "acos",
        "acot",
        "acsc"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/trigonometry/asech.js
var require_asech = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/trigonometry/asech.js"(exports, module) {
    module.exports = {
      "name": "asech",
      "category": "Trigonometry",
      "syntax": [
        "asech(x)"
      ],
      "description": "Calculate the inverse secant of a value.",
      "examples": [
        "asech(0.5)"
      ],
      "seealso": [
        "acsch",
        "acoth"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/trigonometry/asin.js
var require_asin = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/trigonometry/asin.js"(exports, module) {
    module.exports = {
      "name": "asin",
      "category": "Trigonometry",
      "syntax": [
        "asin(x)"
      ],
      "description": "Compute the inverse sine of a value in radians.",
      "examples": [
        "asin(0.5)",
        "asin(sin(2.3))"
      ],
      "seealso": [
        "sin",
        "acos",
        "atan"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/trigonometry/asinh.js
var require_asinh = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/trigonometry/asinh.js"(exports, module) {
    module.exports = {
      "name": "asinh",
      "category": "Trigonometry",
      "syntax": [
        "asinh(x)"
      ],
      "description": "Calculate the hyperbolic arcsine of a value, defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.",
      "examples": [
        "asinh(0.5)"
      ],
      "seealso": [
        "acosh",
        "atanh"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/trigonometry/atan.js
var require_atan = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/trigonometry/atan.js"(exports, module) {
    module.exports = {
      "name": "atan",
      "category": "Trigonometry",
      "syntax": [
        "atan(x)"
      ],
      "description": "Compute the inverse tangent of a value in radians.",
      "examples": [
        "atan(0.5)",
        "atan(tan(2.3))"
      ],
      "seealso": [
        "tan",
        "acos",
        "asin"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/trigonometry/atanh.js
var require_atanh = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/trigonometry/atanh.js"(exports, module) {
    module.exports = {
      "name": "atanh",
      "category": "Trigonometry",
      "syntax": [
        "atanh(x)"
      ],
      "description": "Calculate the hyperbolic arctangent of a value, defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.",
      "examples": [
        "atanh(0.5)"
      ],
      "seealso": [
        "acosh",
        "asinh"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/trigonometry/atan2.js
var require_atan2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/trigonometry/atan2.js"(exports, module) {
    module.exports = {
      "name": "atan2",
      "category": "Trigonometry",
      "syntax": [
        "atan2(y, x)"
      ],
      "description": "Computes the principal value of the arc tangent of y/x in radians.",
      "examples": [
        "atan2(2, 2) / pi",
        "angle = 60 deg in rad",
        "x = cos(angle)",
        "y = sin(angle)",
        "atan2(y, x)"
      ],
      "seealso": [
        "sin",
        "cos",
        "tan"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/trigonometry/cos.js
var require_cos = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/trigonometry/cos.js"(exports, module) {
    module.exports = {
      "name": "cos",
      "category": "Trigonometry",
      "syntax": [
        "cos(x)"
      ],
      "description": "Compute the cosine of x in radians.",
      "examples": [
        "cos(2)",
        "cos(pi / 4) ^ 2",
        "cos(180 deg)",
        "cos(60 deg)",
        "sin(0.2)^2 + cos(0.2)^2"
      ],
      "seealso": [
        "acos",
        "sin",
        "tan"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/trigonometry/cosh.js
var require_cosh = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/trigonometry/cosh.js"(exports, module) {
    module.exports = {
      "name": "cosh",
      "category": "Trigonometry",
      "syntax": [
        "cosh(x)"
      ],
      "description": "Compute the hyperbolic cosine of x in radians.",
      "examples": [
        "cosh(0.5)"
      ],
      "seealso": [
        "sinh",
        "tanh",
        "coth"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/trigonometry/cot.js
var require_cot = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/trigonometry/cot.js"(exports, module) {
    module.exports = {
      "name": "cot",
      "category": "Trigonometry",
      "syntax": [
        "cot(x)"
      ],
      "description": "Compute the cotangent of x in radians. Defined as 1/tan(x)",
      "examples": [
        "cot(2)",
        "1 / tan(2)"
      ],
      "seealso": [
        "sec",
        "csc",
        "tan"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/trigonometry/coth.js
var require_coth = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/trigonometry/coth.js"(exports, module) {
    module.exports = {
      "name": "coth",
      "category": "Trigonometry",
      "syntax": [
        "coth(x)"
      ],
      "description": "Compute the hyperbolic cotangent of x in radians.",
      "examples": [
        "coth(2)",
        "1 / tanh(2)"
      ],
      "seealso": [
        "sech",
        "csch",
        "tanh"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/trigonometry/csc.js
var require_csc = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/trigonometry/csc.js"(exports, module) {
    module.exports = {
      "name": "csc",
      "category": "Trigonometry",
      "syntax": [
        "csc(x)"
      ],
      "description": "Compute the cosecant of x in radians. Defined as 1/sin(x)",
      "examples": [
        "csc(2)",
        "1 / sin(2)"
      ],
      "seealso": [
        "sec",
        "cot",
        "sin"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/trigonometry/csch.js
var require_csch = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/trigonometry/csch.js"(exports, module) {
    module.exports = {
      "name": "csch",
      "category": "Trigonometry",
      "syntax": [
        "csch(x)"
      ],
      "description": "Compute the hyperbolic cosecant of x in radians. Defined as 1/sinh(x)",
      "examples": [
        "csch(2)",
        "1 / sinh(2)"
      ],
      "seealso": [
        "sech",
        "coth",
        "sinh"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/trigonometry/sec.js
var require_sec = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/trigonometry/sec.js"(exports, module) {
    module.exports = {
      "name": "sec",
      "category": "Trigonometry",
      "syntax": [
        "sec(x)"
      ],
      "description": "Compute the secant of x in radians. Defined as 1/cos(x)",
      "examples": [
        "sec(2)",
        "1 / cos(2)"
      ],
      "seealso": [
        "cot",
        "csc",
        "cos"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/trigonometry/sech.js
var require_sech = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/trigonometry/sech.js"(exports, module) {
    module.exports = {
      "name": "sech",
      "category": "Trigonometry",
      "syntax": [
        "sech(x)"
      ],
      "description": "Compute the hyperbolic secant of x in radians. Defined as 1/cosh(x)",
      "examples": [
        "sech(2)",
        "1 / cosh(2)"
      ],
      "seealso": [
        "coth",
        "csch",
        "cosh"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/trigonometry/sin.js
var require_sin = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/trigonometry/sin.js"(exports, module) {
    module.exports = {
      "name": "sin",
      "category": "Trigonometry",
      "syntax": [
        "sin(x)"
      ],
      "description": "Compute the sine of x in radians.",
      "examples": [
        "sin(2)",
        "sin(pi / 4) ^ 2",
        "sin(90 deg)",
        "sin(30 deg)",
        "sin(0.2)^2 + cos(0.2)^2"
      ],
      "seealso": [
        "asin",
        "cos",
        "tan"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/trigonometry/sinh.js
var require_sinh = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/trigonometry/sinh.js"(exports, module) {
    module.exports = {
      "name": "sinh",
      "category": "Trigonometry",
      "syntax": [
        "sinh(x)"
      ],
      "description": "Compute the hyperbolic sine of x in radians.",
      "examples": [
        "sinh(0.5)"
      ],
      "seealso": [
        "cosh",
        "tanh"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/trigonometry/tan.js
var require_tan = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/trigonometry/tan.js"(exports, module) {
    module.exports = {
      "name": "tan",
      "category": "Trigonometry",
      "syntax": [
        "tan(x)"
      ],
      "description": "Compute the tangent of x in radians.",
      "examples": [
        "tan(0.5)",
        "sin(0.5) / cos(0.5)",
        "tan(pi / 4)",
        "tan(45 deg)"
      ],
      "seealso": [
        "atan",
        "sin",
        "cos"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/trigonometry/tanh.js
var require_tanh = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/trigonometry/tanh.js"(exports, module) {
    module.exports = {
      "name": "tanh",
      "category": "Trigonometry",
      "syntax": [
        "tanh(x)"
      ],
      "description": "Compute the hyperbolic tangent of x in radians.",
      "examples": [
        "tanh(0.5)",
        "sinh(0.5) / cosh(0.5)"
      ],
      "seealso": [
        "sinh",
        "cosh"
      ]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/units/to.js
var require_to = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/units/to.js"(exports, module) {
    module.exports = {
      "name": "to",
      "category": "Units",
      "syntax": [
        "x to unit",
        "to(x, unit)"
      ],
      "description": "Change the unit of a value.",
      "examples": [
        "5 inch to cm",
        "3.2kg to g",
        "16 bytes in bits"
      ],
      "seealso": []
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/utils/clone.js
var require_clone = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/utils/clone.js"(exports, module) {
    module.exports = {
      "name": "clone",
      "category": "Utils",
      "syntax": [
        "clone(x)"
      ],
      "description": "Clone a variable. Creates a copy of primitive variables,and a deep copy of matrices",
      "examples": [
        "clone(3.5)",
        "clone(2 - 4i)",
        "clone(45 deg)",
        "clone([1, 2; 3, 4])",
        'clone("hello world")'
      ],
      "seealso": []
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/utils/format.js
var require_format2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/utils/format.js"(exports, module) {
    module.exports = {
      "name": "format",
      "category": "Utils",
      "syntax": [
        "format(value)",
        "format(value, precision)"
      ],
      "description": "Format a value of any type as string.",
      "examples": [
        "format(2.3)",
        "format(3 - 4i)",
        "format([])",
        "format(pi, 3)"
      ],
      "seealso": ["print"]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/utils/isNaN.js
var require_isNaN = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/utils/isNaN.js"(exports, module) {
    module.exports = {
      "name": "isNaN",
      "category": "Utils",
      "syntax": [
        "isNaN(x)"
      ],
      "description": "Test whether a value is NaN (not a number)",
      "examples": [
        "isNaN(2)",
        "isNaN(0 / 0)",
        "isNaN(NaN)",
        "isNaN(Infinity)"
      ],
      "seealso": ["isNegative", "isNumeric", "isPositive", "isZero"]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/utils/isInteger.js
var require_isInteger = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/utils/isInteger.js"(exports, module) {
    module.exports = {
      "name": "isInteger",
      "category": "Utils",
      "syntax": [
        "isInteger(x)"
      ],
      "description": "Test whether a value is an integer number.",
      "examples": [
        "isInteger(2)",
        "isInteger(3.5)",
        "isInteger([3, 0.5, -2])"
      ],
      "seealso": ["isNegative", "isNumeric", "isPositive", "isZero"]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/utils/isNegative.js
var require_isNegative = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/utils/isNegative.js"(exports, module) {
    module.exports = {
      "name": "isNegative",
      "category": "Utils",
      "syntax": [
        "isNegative(x)"
      ],
      "description": "Test whether a value is negative: smaller than zero.",
      "examples": [
        "isNegative(2)",
        "isNegative(0)",
        "isNegative(-4)",
        "isNegative([3, 0.5, -2])"
      ],
      "seealso": ["isInteger", "isNumeric", "isPositive", "isZero"]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/utils/isNumeric.js
var require_isNumeric2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/utils/isNumeric.js"(exports, module) {
    module.exports = {
      "name": "isNumeric",
      "category": "Utils",
      "syntax": [
        "isNumeric(x)"
      ],
      "description": "Test whether a value is a numeric value. Returns true when the input is a number, BigNumber, Fraction, or boolean.",
      "examples": [
        "isNumeric(2)",
        "isNumeric(0)",
        "isNumeric(bignumber(500))",
        "isNumeric(fraction(0.125))",
        'isNumeric("3")',
        "isNumeric(2 + 3i)",
        'isNumeric([2.3, "foo", false])'
      ],
      "seealso": ["isInteger", "isZero", "isNegative", "isPositive", "isNaN"]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/utils/isPositive.js
var require_isPositive = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/utils/isPositive.js"(exports, module) {
    module.exports = {
      "name": "isPositive",
      "category": "Utils",
      "syntax": [
        "isPositive(x)"
      ],
      "description": "Test whether a value is positive: larger than zero.",
      "examples": [
        "isPositive(2)",
        "isPositive(0)",
        "isPositive(-4)",
        "isPositive([3, 0.5, -2])"
      ],
      "seealso": ["isInteger", "isNumeric", "isNegative", "isZero"]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/utils/isPrime.js
var require_isPrime = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/utils/isPrime.js"(exports, module) {
    module.exports = {
      "name": "isPrime",
      "category": "Utils",
      "syntax": [
        "isPrime(x)"
      ],
      "description": "Test whether a value is prime: has no divisors other than itself and one.",
      "examples": [
        "isPrime(3)",
        "isPrime(-2)",
        "isPrime([2, 17, 100])"
      ],
      "seealso": ["isInteger", "isNumeric", "isNegative", "isZero"]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/utils/isZero.js
var require_isZero = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/utils/isZero.js"(exports, module) {
    module.exports = {
      "name": "isZero",
      "category": "Utils",
      "syntax": [
        "isZero(x)"
      ],
      "description": "Test whether a value is zero.",
      "examples": [
        "isZero(2)",
        "isZero(0)",
        "isZero(-4)",
        "isZero([3, 0, -2, 0])"
      ],
      "seealso": ["isInteger", "isNumeric", "isNegative", "isPositive"]
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/utils/typeof.js
var require_typeof2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/function/utils/typeof.js"(exports, module) {
    module.exports = {
      "name": "typeof",
      "category": "Utils",
      "syntax": [
        "typeof(x)"
      ],
      "description": "Get the type of a variable.",
      "examples": [
        "typeof(3.5)",
        "typeof(2 - 4i)",
        "typeof(45 deg)",
        'typeof("hello world")'
      ],
      "seealso": []
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/index.js
var require_docs = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/docs/index.js"(exports) {
    function factory(construction, config, load, typed) {
      var docs = {};
      docs.bignumber = require_bignumber3();
      docs["boolean"] = require_boolean3();
      docs.complex = require_complex4();
      docs.createUnit = require_createUnit2();
      docs.fraction = require_fraction4();
      docs.index = require_construction();
      docs.matrix = require_matrix3();
      docs.number = require_number3();
      docs.sparse = require_sparse2();
      docs.splitUnit = require_splitUnit2();
      docs.string = require_string3();
      docs.unit = require_unit3();
      docs.e = require_e();
      docs.E = require_e();
      docs["false"] = require_false();
      docs.i = require_i();
      docs["Infinity"] = require_Infinity();
      docs.LN2 = require_LN2();
      docs.LN10 = require_LN10();
      docs.LOG2E = require_LOG2E();
      docs.LOG10E = require_LOG10E();
      docs.NaN = require_NaN();
      docs["null"] = require_null();
      docs.pi = require_pi();
      docs.PI = require_pi();
      docs.phi = require_phi();
      docs.SQRT1_2 = require_SQRT1_2();
      docs.SQRT2 = require_SQRT2();
      docs.tau = require_tau();
      docs["true"] = require_true();
      docs.version = require_version2();
      docs.speedOfLight = { description: "Speed of light in vacuum", examples: ["speedOfLight"] };
      docs.gravitationConstant = { description: "Newtonian constant of gravitation", examples: ["gravitationConstant"] };
      docs.planckConstant = { description: "Planck constant", examples: ["planckConstant"] };
      docs.reducedPlanckConstant = { description: "Reduced Planck constant", examples: ["reducedPlanckConstant"] };
      docs.magneticConstant = { description: "Magnetic constant (vacuum permeability)", examples: ["magneticConstant"] };
      docs.electricConstant = { description: "Electric constant (vacuum permeability)", examples: ["electricConstant"] };
      docs.vacuumImpedance = { description: "Characteristic impedance of vacuum", examples: ["vacuumImpedance"] };
      docs.coulomb = { description: "Coulomb's constant", examples: ["coulomb"] };
      docs.elementaryCharge = { description: "Elementary charge", examples: ["elementaryCharge"] };
      docs.bohrMagneton = { description: "Borh magneton", examples: ["bohrMagneton"] };
      docs.conductanceQuantum = { description: "Conductance quantum", examples: ["conductanceQuantum"] };
      docs.inverseConductanceQuantum = { description: "Inverse conductance quantum", examples: ["inverseConductanceQuantum"] };
      docs.magneticFluxQuantum = { description: "Magnetic flux quantum", examples: ["magneticFluxQuantum"] };
      docs.nuclearMagneton = { description: "Nuclear magneton", examples: ["nuclearMagneton"] };
      docs.klitzing = { description: "Von Klitzing constant", examples: ["klitzing"] };
      docs.bohrRadius = { description: "Borh radius", examples: ["bohrRadius"] };
      docs.classicalElectronRadius = { description: "Classical electron radius", examples: ["classicalElectronRadius"] };
      docs.electronMass = { description: "Electron mass", examples: ["electronMass"] };
      docs.fermiCoupling = { description: "Fermi coupling constant", examples: ["fermiCoupling"] };
      docs.fineStructure = { description: "Fine-structure constant", examples: ["fineStructure"] };
      docs.hartreeEnergy = { description: "Hartree energy", examples: ["hartreeEnergy"] };
      docs.protonMass = { description: "Proton mass", examples: ["protonMass"] };
      docs.deuteronMass = { description: "Deuteron Mass", examples: ["deuteronMass"] };
      docs.neutronMass = { description: "Neutron mass", examples: ["neutronMass"] };
      docs.quantumOfCirculation = { description: "Quantum of circulation", examples: ["quantumOfCirculation"] };
      docs.rydberg = { description: "Rydberg constant", examples: ["rydberg"] };
      docs.thomsonCrossSection = { description: "Thomson cross section", examples: ["thomsonCrossSection"] };
      docs.weakMixingAngle = { description: "Weak mixing angle", examples: ["weakMixingAngle"] };
      docs.efimovFactor = { description: "Efimov factor", examples: ["efimovFactor"] };
      docs.atomicMass = { description: "Atomic mass constant", examples: ["atomicMass"] };
      docs.avogadro = { description: "Avogadro's number", examples: ["avogadro"] };
      docs.boltzmann = { description: "Boltzmann constant", examples: ["boltzmann"] };
      docs.faraday = { description: "Faraday constant", examples: ["faraday"] };
      docs.firstRadiation = { description: "First radiation constant", examples: ["firstRadiation"] };
      docs.loschmidt = { description: "Loschmidt constant at T=273.15 K and p=101.325 kPa", examples: ["loschmidt"] };
      docs.gasConstant = { description: "Gas constant", examples: ["gasConstant"] };
      docs.molarPlanckConstant = { description: "Molar Planck constant", examples: ["molarPlanckConstant"] };
      docs.molarVolume = { description: "Molar volume of an ideal gas at T=273.15 K and p=101.325 kPa", examples: ["molarVolume"] };
      docs.sackurTetrode = { description: "Sackur-Tetrode constant at T=1 K and p=101.325 kPa", examples: ["sackurTetrode"] };
      docs.secondRadiation = { description: "Second radiation constant", examples: ["secondRadiation"] };
      docs.stefanBoltzmann = { description: "Stefan-Boltzmann constant", examples: ["stefanBoltzmann"] };
      docs.wienDisplacement = { description: "Wien displacement law constant", examples: ["wienDisplacement"] };
      docs.molarMass = { description: "Molar mass constant", examples: ["molarMass"] };
      docs.molarMassC12 = { description: "Molar mass constant of carbon-12", examples: ["molarMassC12"] };
      docs.gravity = { description: "Standard acceleration of gravity (standard acceleration of free-fall on Earth)", examples: ["gravity"] };
      docs.planckLength = { description: "Planck length", examples: ["planckLength"] };
      docs.planckMass = { description: "Planck mass", examples: ["planckMass"] };
      docs.planckTime = { description: "Planck time", examples: ["planckTime"] };
      docs.planckCharge = { description: "Planck charge", examples: ["planckCharge"] };
      docs.planckTemperature = { description: "Planck temperature", examples: ["planckTemperature"] };
      docs.derivative = require_derivative();
      docs.lsolve = require_lsolve();
      docs.lup = require_lup();
      docs.lusolve = require_lusolve();
      docs.simplify = require_simplify();
      docs.slu = require_slu();
      docs.usolve = require_usolve();
      docs.abs = require_abs2();
      docs.add = require_add2();
      docs.cbrt = require_cbrt();
      docs.ceil = require_ceil();
      docs.cube = require_cube();
      docs.divide = require_divide();
      docs.dotDivide = require_dotDivide();
      docs.dotMultiply = require_dotMultiply();
      docs.dotPow = require_dotPow();
      docs.exp = require_exp();
      docs.fix = require_fix2();
      docs.floor = require_floor();
      docs.gcd = require_gcd();
      docs.hypot = require_hypot();
      docs.lcm = require_lcm();
      docs.log = require_log();
      docs.log10 = require_log10();
      docs.mod = require_mod();
      docs.multiply = require_multiply2();
      docs.norm = require_norm();
      docs.nthRoot = require_nthRoot();
      docs.pow = require_pow2();
      docs.round = require_round();
      docs.sign = require_sign();
      docs.sqrt = require_sqrt();
      docs.square = require_square();
      docs.subtract = require_subtract2();
      docs.unaryMinus = require_unaryMinus2();
      docs.unaryPlus = require_unaryPlus();
      docs.xgcd = require_xgcd();
      docs.bitAnd = require_bitAnd();
      docs.bitNot = require_bitNot();
      docs.bitOr = require_bitOr();
      docs.bitXor = require_bitXor();
      docs.leftShift = require_leftShift();
      docs.rightArithShift = require_rightArithShift();
      docs.rightLogShift = require_rightLogShift();
      docs.bellNumbers = require_bellNumbers();
      docs.catalan = require_catalan();
      docs.composition = require_composition();
      docs.stirlingS2 = require_stirlingS2();
      docs["config"] = require_config2();
      docs["import"] = require_import2();
      docs["typed"] = require_typed2();
      docs.arg = require_arg();
      docs.conj = require_conj();
      docs.re = require_re();
      docs.im = require_im();
      docs["eval"] = require_eval();
      docs.help = require_help();
      docs.distance = require_distance();
      docs.intersect = require_intersect();
      docs["and"] = require_and();
      docs["not"] = require_not();
      docs["or"] = require_or();
      docs["xor"] = require_xor();
      docs["concat"] = require_concat();
      docs.cross = require_cross();
      docs.det = require_det();
      docs.diag = require_diag();
      docs.dot = require_dot();
      docs.eye = require_eye2();
      docs.filter = require_filter();
      docs.flatten = require_flatten();
      docs.forEach = require_forEach();
      docs.inv = require_inv();
      docs.kron = require_kron();
      docs.map = require_map();
      docs.ones = require_ones();
      docs.partitionSelect = require_partitionSelect();
      docs.range = require_range();
      docs.resize = require_resize();
      docs.reshape = require_reshape();
      docs.size = require_size();
      docs.sort = require_sort();
      docs.squeeze = require_squeeze();
      docs.subset = require_subset();
      docs.trace = require_trace();
      docs.transpose = require_transpose();
      docs.zeros = require_zeros();
      docs.combinations = require_combinations();
      docs.factorial = require_factorial();
      docs.gamma = require_gamma();
      docs.kldivergence = require_kldivergence();
      docs.multinomial = require_multinomial();
      docs.permutations = require_permutations();
      docs.pickRandom = require_pickRandom();
      docs.random = require_random();
      docs.randomInt = require_randomInt();
      docs.compare = require_compare();
      docs.deepEqual = require_deepEqual();
      docs["equal"] = require_equal2();
      docs.larger = require_larger2();
      docs.largerEq = require_largerEq();
      docs.smaller = require_smaller2();
      docs.smallerEq = require_smallerEq();
      docs.unequal = require_unequal();
      docs.erf = require_erf();
      docs.mad = require_mad();
      docs.max = require_max();
      docs.mean = require_mean();
      docs.median = require_median();
      docs.min = require_min();
      docs.mode = require_mode();
      docs.prod = require_prod();
      docs.quantileSeq = require_quantileSeq();
      docs.std = require_std();
      docs.sum = require_sum();
      docs["var"] = require_var();
      docs.acos = require_acos();
      docs.acosh = require_acosh();
      docs.acot = require_acot();
      docs.acoth = require_acoth();
      docs.acsc = require_acsc();
      docs.acsch = require_acsch();
      docs.asec = require_asec();
      docs.asech = require_asech();
      docs.asin = require_asin();
      docs.asinh = require_asinh();
      docs.atan = require_atan();
      docs.atanh = require_atanh();
      docs.atan2 = require_atan2();
      docs.cos = require_cos();
      docs.cosh = require_cosh();
      docs.cot = require_cot();
      docs.coth = require_coth();
      docs.csc = require_csc();
      docs.csch = require_csch();
      docs.sec = require_sec();
      docs.sech = require_sech();
      docs.sin = require_sin();
      docs.sinh = require_sinh();
      docs.tan = require_tan();
      docs.tanh = require_tanh();
      docs.to = require_to();
      docs.clone = require_clone();
      docs.format = require_format2();
      docs.isNaN = require_isNaN();
      docs.isInteger = require_isInteger();
      docs.isNegative = require_isNegative();
      docs.isNumeric = require_isNumeric2();
      docs.isPositive = require_isPositive();
      docs.isPrime = require_isPrime();
      docs.isZero = require_isZero();
      docs["typeof"] = require_typeof2();
      return docs;
    }
    exports.name = "docs";
    exports.path = "expression";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/utils/customs.js
var require_customs = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/utils/customs.js"(exports) {
    function getSafeValue(value) {
      if (value === Function) {
        throw new Error('Access to "Function" is disabled');
      }
      return value;
    }
    exports.getSafeValue = getSafeValue;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/keywords.js
var require_keywords = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/keywords.js"(exports, module) {
    "use strict";
    module.exports = {
      end: true
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/node/Node.js
var require_Node = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/node/Node.js"(exports) {
    "use strict";
    var keywords = require_keywords();
    var extend = require_object().extend;
    var deepEqual = require_object().deepEqual;
    function factory(type, config, load, typed, math) {
      function Node() {
        if (!(this instanceof Node)) {
          throw new SyntaxError("Constructor must be called with the new operator");
        }
      }
      Node.prototype.eval = function(scope) {
        return this.compile().eval(scope);
      };
      Node.prototype.type = "Node";
      Node.prototype.isNode = true;
      Node.prototype.comment = "";
      Node.prototype.compile = function() {
        if (arguments.length > 0) {
          throw new Error("Calling compile(math) is deprecated. Call the function as compile() instead.");
        }
        var defs = {
          math: math.expression.transform,
          args: {},
          // can be filled with names of FunctionAssignment arguments
          _validateScope
        };
        var args = {};
        var code = this._compile(defs, args);
        var defsCode = Object.keys(defs).map(function(name) {
          return "    var " + name + ' = defs["' + name + '"];';
        });
        var factoryCode = defsCode.join(" ") + 'return {  "eval": function (scope) {    if (scope) _validateScope(scope);    scope = scope || {};    return ' + code + ";  }};";
        var factory2 = new Function("defs", factoryCode);
        return factory2(defs);
      };
      Node.prototype._compile = function(defs, args) {
        throw new Error("Cannot compile a Node interface");
      };
      Node.prototype.forEach = function(callback) {
        throw new Error("Cannot run forEach on a Node interface");
      };
      Node.prototype.map = function(callback) {
        throw new Error("Cannot run map on a Node interface");
      };
      Node.prototype._ifNode = function(node) {
        if (!(node && node.isNode)) {
          throw new TypeError("Callback function must return a Node");
        }
        return node;
      };
      Node.prototype.traverse = function(callback) {
        callback(this, null, null);
        function _traverse(node, callback2) {
          node.forEach(function(child, path, parent) {
            callback2(child, path, parent);
            _traverse(child, callback2);
          });
        }
        _traverse(this, callback);
      };
      Node.prototype.transform = function(callback) {
        function _transform(node, callback2) {
          return node.map(function(child, path, parent) {
            var replacement2 = callback2(child, path, parent);
            return _transform(replacement2, callback2);
          });
        }
        var replacement = callback(this, null, null);
        return _transform(replacement, callback);
      };
      Node.prototype.filter = function(callback) {
        var nodes = [];
        this.traverse(function(node, path, parent) {
          if (callback(node, path, parent)) {
            nodes.push(node);
          }
        });
        return nodes;
      };
      Node.prototype.find = function() {
        throw new Error("Function Node.find is deprecated. Use Node.filter instead.");
      };
      Node.prototype.match = function() {
        throw new Error("Function Node.match is deprecated. See functions Node.filter, Node.transform, Node.traverse.");
      };
      Node.prototype.clone = function() {
        throw new Error("Cannot clone a Node interface");
      };
      Node.prototype.cloneDeep = function() {
        return this.map(function(node) {
          return node.cloneDeep();
        });
      };
      Node.prototype.equals = function(other) {
        return other ? deepEqual(this, other) : false;
      };
      Node.prototype.toString = function(options) {
        var customString;
        if (options && typeof options == "object") {
          switch (typeof options.handler) {
            case "object":
            case "undefined":
              break;
            case "function":
              customString = options.handler(this, options);
              break;
            default:
              throw new TypeError("Object or function expected as callback");
          }
        }
        if (typeof customString !== "undefined") {
          return customString;
        }
        return this._toString(options);
      };
      Node.prototype._toString = function() {
        throw new Error("_toString not implemented for " + this.type);
      };
      Node.prototype.toTex = function(options) {
        var customTex;
        if (options && typeof options == "object") {
          switch (typeof options.handler) {
            case "object":
            case "undefined":
              break;
            case "function":
              customTex = options.handler(this, options);
              break;
            default:
              throw new TypeError("Object or function expected as callback");
          }
        }
        if (typeof customTex !== "undefined") {
          return customTex;
        }
        return this._toTex(options);
      };
      Node.prototype._toTex = function(options) {
        throw new Error("_toTex not implemented for " + this.type);
      };
      Node.prototype.getIdentifier = function() {
        return this.type;
      };
      Node.prototype.getContent = function() {
        return this;
      };
      function _validateScope(scope) {
        for (var symbol in scope) {
          if (scope.hasOwnProperty(symbol)) {
            if (symbol in keywords) {
              throw new Error('Scope contains an illegal symbol, "' + symbol + '" is a reserved keyword');
            }
          }
        }
      }
      return Node;
    }
    exports.name = "Node";
    exports.path = "expression.node";
    exports.math = true;
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/transform/error.transform.js
var require_error_transform = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/transform/error.transform.js"(exports) {
    var IndexError = require_IndexError();
    exports.transform = function(err) {
      if (err && err.isIndexError) {
        return new IndexError(
          err.index + 1,
          err.min + 1,
          err.max !== void 0 ? err.max + 1 : void 0
        );
      }
      return err;
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/matrix/subset.js
var require_subset2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/matrix/subset.js"(exports) {
    "use strict";
    var clone = require_object().clone;
    var validateIndex = require_array().validateIndex;
    var DimensionError = require_DimensionError();
    function factory(type, config, load, typed) {
      var matrix = load(require_matrix());
      var subset = typed("subset", {
        // get subset
        "Array, Index": function(value, index) {
          var m = matrix(value);
          var subset2 = m.subset(index);
          return subset2 && subset2.valueOf();
        },
        "Matrix, Index": function(value, index) {
          return value.subset(index);
        },
        "Object, Index": _getObjectProperty,
        "string, Index": _getSubstring,
        // set subset
        "Array, Index, any": function(value, index, replacement) {
          return matrix(clone(value)).subset(index, replacement, void 0).valueOf();
        },
        "Array, Index, any, any": function(value, index, replacement, defaultValue) {
          return matrix(clone(value)).subset(index, replacement, defaultValue).valueOf();
        },
        "Matrix, Index, any": function(value, index, replacement) {
          return value.clone().subset(index, replacement);
        },
        "Matrix, Index, any, any": function(value, index, replacement, defaultValue) {
          return value.clone().subset(index, replacement, defaultValue);
        },
        "string, Index, string": _setSubstring,
        "string, Index, string, string": _setSubstring,
        "Object, Index, any": _setObjectProperty
      });
      subset.toTex = void 0;
      return subset;
      function _getSubstring(str, index) {
        if (!index || index.isIndex !== true) {
          throw new TypeError("Index expected");
        }
        if (index.size().length != 1) {
          throw new DimensionError(index.size().length, 1);
        }
        var strLen = str.length;
        validateIndex(index.min()[0], strLen);
        validateIndex(index.max()[0], strLen);
        var range = index.dimension(0);
        var substr = "";
        range.forEach(function(v) {
          substr += str.charAt(v);
        });
        return substr;
      }
      function _setSubstring(str, index, replacement, defaultValue) {
        if (!index || index.isIndex !== true) {
          throw new TypeError("Index expected");
        }
        if (index.size().length != 1) {
          throw new DimensionError(index.size().length, 1);
        }
        if (defaultValue !== void 0) {
          if (typeof defaultValue !== "string" || defaultValue.length !== 1) {
            throw new TypeError("Single character expected as defaultValue");
          }
        } else {
          defaultValue = " ";
        }
        var range = index.dimension(0);
        var len = range.size()[0];
        if (len != replacement.length) {
          throw new DimensionError(range.size()[0], replacement.length);
        }
        var strLen = str.length;
        validateIndex(index.min()[0]);
        validateIndex(index.max()[0]);
        var chars = [];
        for (var i = 0; i < strLen; i++) {
          chars[i] = str.charAt(i);
        }
        range.forEach(function(v, i2) {
          chars[v] = replacement.charAt(i2[0]);
        });
        if (chars.length > strLen) {
          for (i = strLen - 1, len = chars.length; i < len; i++) {
            if (!chars[i]) {
              chars[i] = defaultValue;
            }
          }
        }
        return chars.join("");
      }
    }
    function _getObjectProperty(object, index) {
      if (index.size().length !== 1) {
        throw new DimensionError(index.size(), 1);
      }
      var key = index.dimension(0);
      if (typeof key !== "string") {
        throw new TypeError("String expected as index to retrieve an object property");
      }
      return object[key];
    }
    function _setObjectProperty(object, index, replacement) {
      if (index.size().length !== 1) {
        throw new DimensionError(index.size(), 1);
      }
      var key = index.dimension(0);
      if (typeof key !== "string") {
        throw new TypeError("String expected as index to retrieve an object property");
      }
      var updated = clone(object);
      updated[key] = replacement;
      return updated;
    }
    exports.name = "subset";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/node/utils/access.js
var require_access = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/node/utils/access.js"(exports) {
    "use strict";
    var errorTransform = require_error_transform().transform;
    var getSafeValue = require_customs().getSafeValue;
    function factory(type, config, load, typed) {
      var subset = load(require_subset2());
      var matrix = load(require_matrix());
      return function access(object, index) {
        try {
          if (Array.isArray(object)) {
            return matrix(object).subset(index).valueOf();
          } else if (object && typeof object.subset === "function") {
            return object.subset(index);
          } else if (typeof object === "string") {
            return subset(object, index);
          } else if (typeof object === "object" || typeof object === "function") {
            if (!index.isObjectProperty()) {
              throw new TypeError("Cannot apply a numeric index as object property");
            }
            return getSafeValue(object[index.getObjectProperty()]);
          } else {
            throw new TypeError("Cannot apply index: unsupported type of object");
          }
        } catch (err) {
          throw errorTransform(err);
        }
      };
    }
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/node/AccessorNode.js
var require_AccessorNode = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/node/AccessorNode.js"(exports) {
    "use strict";
    var getSafeValue = require_customs().getSafeValue;
    function factory(type, config, load, typed) {
      var Node = load(require_Node());
      var access = load(require_access());
      function AccessorNode(object, index) {
        if (!(this instanceof AccessorNode)) {
          throw new SyntaxError("Constructor must be called with the new operator");
        }
        if (!(object && object.isNode)) {
          throw new TypeError('Node expected for parameter "object"');
        }
        if (!(index && index.isIndexNode)) {
          throw new TypeError('IndexNode expected for parameter "index"');
        }
        this.object = object || null;
        this.index = index;
        Object.defineProperty(this, "name", {
          get: (function() {
            if (this.index) {
              return this.index.isObjectProperty() ? this.index.getObjectProperty() : "";
            } else {
              return this.object.name || "";
            }
          }).bind(this),
          set: function() {
            throw new Error("Cannot assign a new name, name is read-only");
          }
        });
      }
      AccessorNode.prototype = new Node();
      AccessorNode.prototype.type = "AccessorNode";
      AccessorNode.prototype.isAccessorNode = true;
      AccessorNode.prototype._compile = function(defs, args) {
        defs.access = access;
        defs.getSafeValue = getSafeValue;
        var object = this.object._compile(defs, args);
        var index = this.index._compile(defs, args);
        if (this.index.isObjectProperty()) {
          var prop = this.index.getObjectProperty();
          return "getSafeValue(" + object + '["' + prop + '"])';
        } else if (this.index.needsSize()) {
          return "(function () {  var object = " + object + ";  var size = math.size(object).valueOf();  return access(object, " + index + ");})()";
        } else {
          return "access(" + object + ", " + index + ")";
        }
      };
      AccessorNode.prototype.forEach = function(callback) {
        callback(this.object, "object", this);
        callback(this.index, "index", this);
      };
      AccessorNode.prototype.map = function(callback) {
        return new AccessorNode(
          this._ifNode(callback(this.object, "object", this)),
          this._ifNode(callback(this.index, "index", this))
        );
      };
      AccessorNode.prototype.clone = function() {
        return new AccessorNode(this.object, this.index);
      };
      AccessorNode.prototype._toString = function(options) {
        var object = this.object.toString(options);
        if (needParenthesis(this.object)) {
          object = "(" + object + ")";
        }
        return object + this.index.toString(options);
      };
      AccessorNode.prototype._toTex = function(options) {
        var object = this.object.toTex(options);
        if (needParenthesis(this.object)) {
          object = "\\left(" + object + "\\right)";
        }
        return object + this.index.toTex(options);
      };
      function needParenthesis(node) {
        return !(node.isAccessorNode || node.isArrayNode || node.isConstantNode || node.isFunctionNode || node.isObjectNode || node.isParenthesisNode || node.isSymbolNode);
      }
      return AccessorNode;
    }
    exports.name = "AccessorNode";
    exports.path = "expression.node";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/node/ArrayNode.js
var require_ArrayNode = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/node/ArrayNode.js"(exports) {
    "use strict";
    function factory(type, config, load, typed) {
      var Node = load(require_Node());
      function ArrayNode(items) {
        if (!(this instanceof ArrayNode)) {
          throw new SyntaxError("Constructor must be called with the new operator");
        }
        this.items = items || [];
        if (!Array.isArray(this.items) || !this.items.every(function(item) {
          return item && item.isNode;
        })) {
          throw new TypeError("Array containing Nodes expected");
        }
        var deprecated = function() {
          throw new Error("Property `ArrayNode.nodes` is deprecated, use `ArrayNode.items` instead");
        };
        Object.defineProperty(this, "nodes", { get: deprecated, set: deprecated });
      }
      ArrayNode.prototype = new Node();
      ArrayNode.prototype.type = "ArrayNode";
      ArrayNode.prototype.isArrayNode = true;
      ArrayNode.prototype._compile = function(defs, args) {
        var asMatrix = defs.math.config().matrix !== "Array";
        var items = this.items.map(function(node) {
          return node._compile(defs, args);
        });
        return (asMatrix ? "math.matrix([" : "[") + items.join(",") + (asMatrix ? "])" : "]");
      };
      ArrayNode.prototype.forEach = function(callback) {
        for (var i = 0; i < this.items.length; i++) {
          var node = this.items[i];
          callback(node, "items[" + i + "]", this);
        }
      };
      ArrayNode.prototype.map = function(callback) {
        var items = [];
        for (var i = 0; i < this.items.length; i++) {
          items[i] = this._ifNode(callback(this.items[i], "items[" + i + "]", this));
        }
        return new ArrayNode(items);
      };
      ArrayNode.prototype.clone = function() {
        return new ArrayNode(this.items.slice(0));
      };
      ArrayNode.prototype._toString = function(options) {
        var items = this.items.map(function(node) {
          return node.toString(options);
        });
        return "[" + items.join(", ") + "]";
      };
      ArrayNode.prototype._toTex = function(options) {
        var s = "\\begin{bmatrix}";
        this.items.forEach(function(node) {
          if (node.items) {
            s += node.items.map(function(childNode) {
              return childNode.toTex(options);
            }).join("&");
          } else {
            s += node.toTex(options);
          }
          s += "\\\\";
        });
        s += "\\end{bmatrix}";
        return s;
      };
      return ArrayNode;
    }
    exports.name = "ArrayNode";
    exports.path = "expression.node";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/node/utils/assign.js
var require_assign = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/node/utils/assign.js"(exports) {
    "use strict";
    var errorTransform = require_error_transform().transform;
    function factory(type, config, load, typed) {
      var subset = load(require_subset2());
      var matrix = load(require_matrix());
      return function assign(object, index, value) {
        try {
          if (Array.isArray(object)) {
            return matrix(object).subset(index, value).valueOf();
          } else if (object && typeof object.subset === "function") {
            return object.subset(index, value);
          } else if (typeof object === "string") {
            return subset(object, index, value);
          } else if (typeof object === "object") {
            if (!index.isObjectProperty()) {
              throw TypeError("Cannot apply a numeric index as object property");
            }
            object[index.getObjectProperty()] = value;
            return object;
          } else {
            throw new TypeError("Cannot apply index: unsupported type of object");
          }
        } catch (err) {
          throw errorTransform(err);
        }
      };
    }
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/operators.js
var require_operators = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/operators.js"(exports, module) {
    "use strict";
    var properties = [
      {
        //assignment
        "AssignmentNode": {},
        "FunctionAssignmentNode": {}
      },
      {
        //conditional expression
        "ConditionalNode": {
          latexLeftParens: false,
          latexRightParens: false,
          latexParens: false
          //conditionals don't need parentheses in LaTeX because
          //they are 2 dimensional
        }
      },
      {
        //logical or
        "OperatorNode:or": {
          associativity: "left",
          associativeWith: []
        }
      },
      {
        //logical xor
        "OperatorNode:xor": {
          associativity: "left",
          associativeWith: []
        }
      },
      {
        //logical and
        "OperatorNode:and": {
          associativity: "left",
          associativeWith: []
        }
      },
      {
        //bitwise or
        "OperatorNode:bitOr": {
          associativity: "left",
          associativeWith: []
        }
      },
      {
        //bitwise xor
        "OperatorNode:bitXor": {
          associativity: "left",
          associativeWith: []
        }
      },
      {
        //bitwise and
        "OperatorNode:bitAnd": {
          associativity: "left",
          associativeWith: []
        }
      },
      {
        //relational operators
        "OperatorNode:equal": {
          associativity: "left",
          associativeWith: []
        },
        "OperatorNode:unequal": {
          associativity: "left",
          associativeWith: []
        },
        "OperatorNode:smaller": {
          associativity: "left",
          associativeWith: []
        },
        "OperatorNode:larger": {
          associativity: "left",
          associativeWith: []
        },
        "OperatorNode:smallerEq": {
          associativity: "left",
          associativeWith: []
        },
        "OperatorNode:largerEq": {
          associativity: "left",
          associativeWith: []
        }
      },
      {
        //bitshift operators
        "OperatorNode:leftShift": {
          associativity: "left",
          associativeWith: []
        },
        "OperatorNode:rightArithShift": {
          associativity: "left",
          associativeWith: []
        },
        "OperatorNode:rightLogShift": {
          associativity: "left",
          associativeWith: []
        }
      },
      {
        //unit conversion
        "OperatorNode:to": {
          associativity: "left",
          associativeWith: []
        }
      },
      {
        //range
        "RangeNode": {}
      },
      {
        //addition, subtraction
        "OperatorNode:add": {
          associativity: "left",
          associativeWith: ["OperatorNode:add", "OperatorNode:subtract"]
        },
        "OperatorNode:subtract": {
          associativity: "left",
          associativeWith: []
        }
      },
      {
        //multiply, divide, modulus
        "OperatorNode:multiply": {
          associativity: "left",
          associativeWith: [
            "OperatorNode:multiply",
            "OperatorNode:divide",
            "Operator:dotMultiply",
            "Operator:dotDivide"
          ]
        },
        "OperatorNode:divide": {
          associativity: "left",
          associativeWith: [],
          latexLeftParens: false,
          latexRightParens: false,
          latexParens: false
          //fractions don't require parentheses because
          //they're 2 dimensional, so parens aren't needed
          //in LaTeX
        },
        "OperatorNode:dotMultiply": {
          associativity: "left",
          associativeWith: [
            "OperatorNode:multiply",
            "OperatorNode:divide",
            "OperatorNode:dotMultiply",
            "OperatorNode:doDivide"
          ]
        },
        "OperatorNode:dotDivide": {
          associativity: "left",
          associativeWith: []
        },
        "OperatorNode:mod": {
          associativity: "left",
          associativeWith: []
        }
      },
      {
        //unary prefix operators
        "OperatorNode:unaryPlus": {
          associativity: "right"
        },
        "OperatorNode:unaryMinus": {
          associativity: "right"
        },
        "OperatorNode:bitNot": {
          associativity: "right"
        },
        "OperatorNode:not": {
          associativity: "right"
        }
      },
      {
        //exponentiation
        "OperatorNode:pow": {
          associativity: "right",
          associativeWith: [],
          latexRightParens: false
          //the exponent doesn't need parentheses in
          //LaTeX because it's 2 dimensional
          //(it's on top)
        },
        "OperatorNode:dotPow": {
          associativity: "right",
          associativeWith: []
        }
      },
      {
        //factorial
        "OperatorNode:factorial": {
          associativity: "left"
        }
      },
      {
        //matrix transpose
        "OperatorNode:transpose": {
          associativity: "left"
        }
      }
    ];
    function getPrecedence(_node, parenthesis) {
      var node = _node;
      if (parenthesis !== "keep") {
        node = _node.getContent();
      }
      var identifier = node.getIdentifier();
      for (var i = 0; i < properties.length; i++) {
        if (identifier in properties[i]) {
          return i;
        }
      }
      return null;
    }
    function getAssociativity(_node, parenthesis) {
      var node = _node;
      if (parenthesis !== "keep") {
        node = _node.getContent();
      }
      var identifier = node.getIdentifier();
      var index = getPrecedence(node, parenthesis);
      if (index === null) {
        return null;
      }
      var property = properties[index][identifier];
      if (property.hasOwnProperty("associativity")) {
        if (property.associativity === "left") {
          return "left";
        }
        if (property.associativity === "right") {
          return "right";
        }
        throw Error("'" + identifier + "' has the invalid associativity '" + property.associativity + "'.");
      }
      return null;
    }
    function isAssociativeWith(nodeA, nodeB, parenthesis) {
      var a = nodeA;
      var b = nodeB;
      if (parenthesis !== "keep") {
        var a = nodeA.getContent();
        var b = nodeB.getContent();
      }
      var identifierA = a.getIdentifier();
      var identifierB = b.getIdentifier();
      var index = getPrecedence(a, parenthesis);
      if (index === null) {
        return null;
      }
      var property = properties[index][identifierA];
      if (property.hasOwnProperty("associativeWith") && property.associativeWith instanceof Array) {
        for (var i = 0; i < property.associativeWith.length; i++) {
          if (property.associativeWith[i] === identifierB) {
            return true;
          }
        }
        return false;
      }
      return null;
    }
    module.exports.properties = properties;
    module.exports.getPrecedence = getPrecedence;
    module.exports.getAssociativity = getAssociativity;
    module.exports.isAssociativeWith = isAssociativeWith;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/node/AssignmentNode.js
var require_AssignmentNode = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/node/AssignmentNode.js"(exports) {
    "use strict";
    var latex = require_latex();
    function factory(type, config, load, typed) {
      var Node = load(require_Node());
      var ArrayNode = load(require_ArrayNode());
      var matrix = load(require_matrix());
      var assign = load(require_assign());
      var access = load(require_access());
      var keywords = require_keywords();
      var operators = require_operators();
      function AssignmentNode(object, index, value) {
        if (!(this instanceof AssignmentNode)) {
          throw new SyntaxError("Constructor must be called with the new operator");
        }
        this.object = object;
        this.index = value ? index : null;
        this.value = value ? value : index;
        if (!object || !(object.isSymbolNode || object.isAccessorNode)) {
          throw new TypeError('SymbolNode or AccessorNode expected as "object"');
        }
        if (object && object.isSymbolNode && object.name === "end") {
          throw new Error('Cannot assign to symbol "end"');
        }
        if (this.index && !this.index.isIndexNode) {
          throw new TypeError('IndexNode expected as "index"');
        }
        if (!this.value || !this.value.isNode) {
          throw new TypeError('Node expected as "value"');
        }
        Object.defineProperty(this, "name", {
          get: (function() {
            if (this.index) {
              return this.index.isObjectProperty() ? this.index.getObjectProperty() : "";
            } else {
              return this.object.name || "";
            }
          }).bind(this),
          set: function() {
            throw new Error("Cannot assign a new name, name is read-only");
          }
        });
      }
      AssignmentNode.prototype = new Node();
      AssignmentNode.prototype.type = "AssignmentNode";
      AssignmentNode.prototype.isAssignmentNode = true;
      AssignmentNode.prototype._compile = function(defs, args) {
        defs.assign = assign;
        defs.access = access;
        var size;
        var object = this.object._compile(defs, args);
        var index = this.index ? this.index._compile(defs, args) : null;
        var value = this.value._compile(defs, args);
        if (!this.index) {
          if (!this.object.isSymbolNode) {
            throw new TypeError("SymbolNode expected as object");
          }
          return 'scope["' + this.object.name + '"] = ' + value;
        } else if (this.index.isObjectProperty()) {
          return object + '["' + this.index.getObjectProperty() + '"] = ' + value;
        } else if (this.object.isSymbolNode) {
          size = this.index.needsSize() ? "var size = math.size(object).valueOf();" : "";
          return "(function () {  var object = " + object + ";  var value = " + value + ";  " + size + '  scope["' + this.object.name + '"] = assign(object, ' + index + ", value);  return value;})()";
        } else {
          size = this.index.needsSize() ? "var size = math.size(object).valueOf();" : "";
          var parentObject = this.object.object._compile(defs, args);
          if (this.object.index.isObjectProperty()) {
            var parentProperty = '["' + this.object.index.getObjectProperty() + '"]';
            return "(function () {  var parent = " + parentObject + ";  var object = parent" + parentProperty + ";  var value = " + value + ";" + size + "  parent" + parentProperty + " = assign(object, " + index + ", value);  return value;})()";
          } else {
            var parentSize = this.object.index.needsSize() ? "var size = math.size(parent).valueOf();" : "";
            var parentIndex = this.object.index._compile(defs, args);
            return "(function () {  var parent = " + parentObject + ";  " + parentSize + "  var parentIndex = " + parentIndex + ";  var object = access(parent, parentIndex);  var value = " + value + ";  " + size + "  assign(parent, parentIndex, assign(object, " + index + ", value));  return value;})()";
          }
        }
      };
      AssignmentNode.prototype.forEach = function(callback) {
        callback(this.object, "object", this);
        if (this.index) {
          callback(this.index, "index", this);
        }
        callback(this.value, "value", this);
      };
      AssignmentNode.prototype.map = function(callback) {
        var object = this._ifNode(callback(this.object, "object", this));
        var index = this.index ? this._ifNode(callback(this.index, "index", this)) : null;
        var value = this._ifNode(callback(this.value, "value", this));
        return new AssignmentNode(object, index, value);
      };
      AssignmentNode.prototype.clone = function() {
        return new AssignmentNode(this.object, this.index, this.value);
      };
      function needParenthesis(node, parenthesis) {
        if (!parenthesis) {
          parenthesis = "keep";
        }
        var precedence = operators.getPrecedence(node, parenthesis);
        var exprPrecedence = operators.getPrecedence(node.value, parenthesis);
        return parenthesis === "all" || exprPrecedence !== null && exprPrecedence <= precedence;
      }
      AssignmentNode.prototype._toString = function(options) {
        var object = this.object.toString(options);
        var index = this.index ? this.index.toString(options) : "";
        var value = this.value.toString(options);
        if (needParenthesis(this, options && options.parenthesis)) {
          value = "(" + value + ")";
        }
        return object + index + " = " + value;
      };
      AssignmentNode.prototype._toTex = function(options) {
        var object = this.object.toTex(options);
        var index = this.index ? this.index.toTex(options) : "";
        var value = this.value.toTex(options);
        if (needParenthesis(this, options && options.parenthesis)) {
          value = "\\left(" + value + "\\right)";
        }
        return object + index + ":=" + value;
      };
      return AssignmentNode;
    }
    exports.name = "AssignmentNode";
    exports.path = "expression.node";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/node/BlockNode.js
var require_BlockNode = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/node/BlockNode.js"(exports) {
    "use strict";
    function factory(type, config, load, typed) {
      var Node = load(require_Node());
      var ResultSet = load(require_ResultSet());
      function BlockNode(blocks) {
        if (!(this instanceof BlockNode)) {
          throw new SyntaxError("Constructor must be called with the new operator");
        }
        if (!Array.isArray(blocks)) throw new Error("Array expected");
        this.blocks = blocks.map(function(block) {
          var node = block && block.node;
          var visible = block && block.visible !== void 0 ? block.visible : true;
          if (!(node && node.isNode)) throw new TypeError('Property "node" must be a Node');
          if (typeof visible !== "boolean") throw new TypeError('Property "visible" must be a boolean');
          return {
            node,
            visible
          };
        });
      }
      BlockNode.prototype = new Node();
      BlockNode.prototype.type = "BlockNode";
      BlockNode.prototype.isBlockNode = true;
      BlockNode.prototype._compile = function(defs, args) {
        defs.ResultSet = ResultSet;
        var blocks = this.blocks.map(function(param) {
          var js = param.node._compile(defs, args);
          if (param.visible) {
            return "results.push(" + js + ");";
          } else {
            return js + ";";
          }
        });
        return "(function () {var results = [];" + blocks.join("") + "return new ResultSet(results);})()";
      };
      BlockNode.prototype.forEach = function(callback) {
        for (var i = 0; i < this.blocks.length; i++) {
          callback(this.blocks[i].node, "blocks[" + i + "].node", this);
        }
      };
      BlockNode.prototype.map = function(callback) {
        var blocks = [];
        for (var i = 0; i < this.blocks.length; i++) {
          var block = this.blocks[i];
          var node = this._ifNode(callback(block.node, "blocks[" + i + "].node", this));
          blocks[i] = {
            node,
            visible: block.visible
          };
        }
        return new BlockNode(blocks);
      };
      BlockNode.prototype.clone = function() {
        var blocks = this.blocks.map(function(block) {
          return {
            node: block.node,
            visible: block.visible
          };
        });
        return new BlockNode(blocks);
      };
      BlockNode.prototype._toString = function(options) {
        return this.blocks.map(function(param) {
          return param.node.toString(options) + (param.visible ? "" : ";");
        }).join("\n");
      };
      BlockNode.prototype._toTex = function(options) {
        return this.blocks.map(function(param) {
          return param.node.toTex(options) + (param.visible ? "" : ";");
        }).join("\\;\\;\n");
      };
      return BlockNode;
    }
    exports.name = "BlockNode";
    exports.path = "expression.node";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/node/ConditionalNode.js
var require_ConditionalNode = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/node/ConditionalNode.js"(exports) {
    "use strict";
    var latex = require_latex();
    var operators = require_operators();
    function factory(type, config, load, typed) {
      var Node = load(require_Node());
      function ConditionalNode(condition, trueExpr, falseExpr) {
        if (!(this instanceof ConditionalNode)) {
          throw new SyntaxError("Constructor must be called with the new operator");
        }
        if (!(condition && condition.isNode)) throw new TypeError("Parameter condition must be a Node");
        if (!(trueExpr && trueExpr.isNode)) throw new TypeError("Parameter trueExpr must be a Node");
        if (!(falseExpr && falseExpr.isNode)) throw new TypeError("Parameter falseExpr must be a Node");
        this.condition = condition;
        this.trueExpr = trueExpr;
        this.falseExpr = falseExpr;
      }
      ConditionalNode.prototype = new Node();
      ConditionalNode.prototype.type = "ConditionalNode";
      ConditionalNode.prototype.isConditionalNode = true;
      ConditionalNode.prototype._compile = function(defs, args) {
        defs.testCondition = function(condition) {
          if (typeof condition === "number" || typeof condition === "boolean" || typeof condition === "string") {
            return condition ? true : false;
          }
          if (condition) {
            if (condition.isBigNumber === true) {
              return condition.isZero() ? false : true;
            }
            if (condition.isComplex === true) {
              return condition.re || condition.im ? true : false;
            }
            if (condition.isUnit === true) {
              return condition.value ? true : false;
            }
          }
          if (condition === null || condition === void 0) {
            return false;
          }
          throw new TypeError('Unsupported type of condition "' + defs.math["typeof"](condition) + '"');
        };
        return "testCondition(" + this.condition._compile(defs, args) + ") ? ( " + this.trueExpr._compile(defs, args) + ") : ( " + this.falseExpr._compile(defs, args) + ")";
      };
      ConditionalNode.prototype.forEach = function(callback) {
        callback(this.condition, "condition", this);
        callback(this.trueExpr, "trueExpr", this);
        callback(this.falseExpr, "falseExpr", this);
      };
      ConditionalNode.prototype.map = function(callback) {
        return new ConditionalNode(
          this._ifNode(callback(this.condition, "condition", this)),
          this._ifNode(callback(this.trueExpr, "trueExpr", this)),
          this._ifNode(callback(this.falseExpr, "falseExpr", this))
        );
      };
      ConditionalNode.prototype.clone = function() {
        return new ConditionalNode(this.condition, this.trueExpr, this.falseExpr);
      };
      ConditionalNode.prototype._toString = function(options) {
        var parenthesis = options && options.parenthesis ? options.parenthesis : "keep";
        var precedence = operators.getPrecedence(this, parenthesis);
        var condition = this.condition.toString(options);
        var conditionPrecedence = operators.getPrecedence(this.condition, parenthesis);
        if (parenthesis === "all" || this.condition.type === "OperatorNode" || conditionPrecedence !== null && conditionPrecedence <= precedence) {
          condition = "(" + condition + ")";
        }
        var trueExpr = this.trueExpr.toString(options);
        var truePrecedence = operators.getPrecedence(this.trueExpr, parenthesis);
        if (parenthesis === "all" || this.trueExpr.type === "OperatorNode" || truePrecedence !== null && truePrecedence <= precedence) {
          trueExpr = "(" + trueExpr + ")";
        }
        var falseExpr = this.falseExpr.toString(options);
        var falsePrecedence = operators.getPrecedence(this.falseExpr, parenthesis);
        if (parenthesis === "all" || this.falseExpr.type === "OperatorNode" || falsePrecedence !== null && falsePrecedence <= precedence) {
          falseExpr = "(" + falseExpr + ")";
        }
        return condition + " ? " + trueExpr + " : " + falseExpr;
      };
      ConditionalNode.prototype._toTex = function(options) {
        return "\\begin{cases} {" + this.trueExpr.toTex(options) + "}, &\\quad{\\text{if }\\;" + this.condition.toTex(options) + "}\\\\{" + this.falseExpr.toTex(options) + "}, &\\quad{\\text{otherwise}}\\end{cases}";
      };
      return ConditionalNode;
    }
    exports.name = "ConditionalNode";
    exports.path = "expression.node";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/node/ConstantNode.js
var require_ConstantNode = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/node/ConstantNode.js"(exports) {
    "use strict";
    var getType = require_types().type;
    function factory(type, config, load, typed) {
      var Node = load(require_Node());
      function ConstantNode(value, valueType) {
        if (!(this instanceof ConstantNode)) {
          throw new SyntaxError("Constructor must be called with the new operator");
        }
        if (valueType) {
          if (typeof valueType !== "string") {
            throw new TypeError('String expected for parameter "valueType"');
          }
          if (typeof value !== "string") {
            throw new TypeError('String expected for parameter "value"');
          }
          this.value = value;
          this.valueType = valueType;
        } else {
          this.value = value + "";
          this.valueType = getType(value);
        }
        if (!SUPPORTED_TYPES[this.valueType]) {
          throw new TypeError('Unsupported type of value "' + this.valueType + '"');
        }
      }
      var SUPPORTED_TYPES = {
        "number": true,
        "string": true,
        "boolean": true,
        "undefined": true,
        "null": true
      };
      ConstantNode.prototype = new Node();
      ConstantNode.prototype.type = "ConstantNode";
      ConstantNode.prototype.isConstantNode = true;
      ConstantNode.prototype._compile = function(defs, args) {
        switch (this.valueType) {
          case "number":
            var numConfig = defs.math.config().number;
            if (numConfig === "BigNumber") {
              return 'math.bignumber("' + this.value + '")';
            } else if (numConfig === "Fraction") {
              return 'math.fraction("' + this.value + '")';
            } else {
              return this.value.replace(/^(0*)[0-9]/, function(match, zeros) {
                return match.substring(zeros.length);
              });
            }
          case "string":
            return '"' + this.value + '"';
          case "boolean":
            return this.value;
          case "undefined":
            return this.value;
          case "null":
            return this.value;
          default:
            throw new TypeError('Unsupported type of constant "' + this.valueType + '"');
        }
      };
      ConstantNode.prototype.forEach = function(callback) {
      };
      ConstantNode.prototype.map = function(callback) {
        return this.clone();
      };
      ConstantNode.prototype.clone = function() {
        return new ConstantNode(this.value, this.valueType);
      };
      ConstantNode.prototype._toString = function(options) {
        switch (this.valueType) {
          case "string":
            return '"' + this.value + '"';
          default:
            return this.value;
        }
      };
      ConstantNode.prototype._toTex = function(options) {
        var value = this.value, index;
        switch (this.valueType) {
          case "string":
            return '\\mathtt{"' + value + '"}';
          case "number":
            index = value.toLowerCase().indexOf("e");
            if (index !== -1) {
              return value.substring(0, index) + "\\cdot10^{" + value.substring(index + 1) + "}";
            }
            return value;
          default:
            return value;
        }
      };
      return ConstantNode;
    }
    exports.name = "ConstantNode";
    exports.path = "expression.node";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/node/FunctionAssignmentNode.js
var require_FunctionAssignmentNode = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/node/FunctionAssignmentNode.js"(exports) {
    "use strict";
    var keywords = require_keywords();
    var latex = require_latex();
    var operators = require_operators();
    function factory(type, config, load, typed) {
      var Node = load(require_Node());
      function FunctionAssignmentNode(name, params, expr) {
        if (!(this instanceof FunctionAssignmentNode)) {
          throw new SyntaxError("Constructor must be called with the new operator");
        }
        if (typeof name !== "string") throw new TypeError('String expected for parameter "name"');
        if (!Array.isArray(params)) throw new TypeError('Array containing strings or objects expected for parameter "params"');
        if (!(expr && expr.isNode)) throw new TypeError('Node expected for parameter "expr"');
        if (name in keywords) throw new Error('Illegal function name, "' + name + '" is a reserved keyword');
        this.name = name;
        this.params = params.map(function(param) {
          return param && param.name || param;
        });
        this.types = params.map(function(param) {
          return param && param.type || "any";
        });
        this.expr = expr;
      }
      FunctionAssignmentNode.prototype = new Node();
      FunctionAssignmentNode.prototype.type = "FunctionAssignmentNode";
      FunctionAssignmentNode.prototype.isFunctionAssignmentNode = true;
      FunctionAssignmentNode.prototype._compile = function(defs, args) {
        defs.typed = typed;
        var childArgs = Object.create(args);
        this.params.forEach(function(variable) {
          childArgs[variable] = true;
        });
        var jsExpr = this.expr._compile(defs, childArgs);
        return 'scope["' + this.name + '"] =   (function () {    var fn = typed("' + this.name + '", {      "' + this.types.join(",") + '": function (' + this.params.join(",") + ") {        return " + jsExpr + '      }    });    fn.syntax = "' + this.name + "(" + this.params.join(", ") + ')";    return fn;  })()';
      };
      FunctionAssignmentNode.prototype.forEach = function(callback) {
        callback(this.expr, "expr", this);
      };
      FunctionAssignmentNode.prototype.map = function(callback) {
        var expr = this._ifNode(callback(this.expr, "expr", this));
        return new FunctionAssignmentNode(this.name, this.params.slice(0), expr);
      };
      FunctionAssignmentNode.prototype.clone = function() {
        return new FunctionAssignmentNode(this.name, this.params.slice(0), this.expr);
      };
      function needParenthesis(node, parenthesis) {
        var precedence = operators.getPrecedence(node, parenthesis);
        var exprPrecedence = operators.getPrecedence(node.expr, parenthesis);
        return parenthesis === "all" || exprPrecedence !== null && exprPrecedence <= precedence;
      }
      FunctionAssignmentNode.prototype._toString = function(options) {
        var parenthesis = options && options.parenthesis ? options.parenthesis : "keep";
        var expr = this.expr.toString(options);
        if (needParenthesis(this, parenthesis)) {
          expr = "(" + expr + ")";
        }
        return this.name + "(" + this.params.join(", ") + ") = " + expr;
      };
      FunctionAssignmentNode.prototype._toTex = function(options) {
        var parenthesis = options && options.parenthesis ? options.parenthesis : "keep";
        var expr = this.expr.toTex(options);
        if (needParenthesis(this, parenthesis)) {
          expr = "\\left(" + expr + "\\right)";
        }
        return "\\mathrm{" + this.name + "}\\left(" + this.params.map(latex.toSymbol).join(",") + "\\right):=" + expr;
      };
      return FunctionAssignmentNode;
    }
    exports.name = "FunctionAssignmentNode";
    exports.path = "expression.node";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/node/RangeNode.js
var require_RangeNode = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/node/RangeNode.js"(exports) {
    "use strict";
    var operators = require_operators();
    function factory(type, config, load, typed) {
      var Node = load(require_Node());
      function RangeNode(start, end, step) {
        if (!(this instanceof RangeNode)) {
          throw new SyntaxError("Constructor must be called with the new operator");
        }
        if (!(start && start.isNode)) throw new TypeError("Node expected");
        if (!(end && end.isNode)) throw new TypeError("Node expected");
        if (step && !(step && step.isNode)) throw new TypeError("Node expected");
        if (arguments.length > 3) throw new Error("Too many arguments");
        this.start = start;
        this.end = end;
        this.step = step || null;
      }
      RangeNode.prototype = new Node();
      RangeNode.prototype.type = "RangeNode";
      RangeNode.prototype.isRangeNode = true;
      RangeNode.prototype.needsEnd = function() {
        var endSymbols = this.filter(function(node) {
          return node && node.isSymbolNode && node.name == "end";
        });
        return endSymbols.length > 0;
      };
      RangeNode.prototype._compile = function(defs, args) {
        return "math.range(" + this.start._compile(defs, args) + ", " + this.end._compile(defs, args) + (this.step ? ", " + this.step._compile(defs, args) : "") + ")";
      };
      RangeNode.prototype.forEach = function(callback) {
        callback(this.start, "start", this);
        callback(this.end, "end", this);
        if (this.step) {
          callback(this.step, "step", this);
        }
      };
      RangeNode.prototype.map = function(callback) {
        return new RangeNode(
          this._ifNode(callback(this.start, "start", this)),
          this._ifNode(callback(this.end, "end", this)),
          this.step && this._ifNode(callback(this.step, "step", this))
        );
      };
      RangeNode.prototype.clone = function() {
        return new RangeNode(this.start, this.end, this.step && this.step);
      };
      function calculateNecessaryParentheses(node, parenthesis) {
        var precedence = operators.getPrecedence(node, parenthesis);
        var parens = {};
        var startPrecedence = operators.getPrecedence(node.start, parenthesis);
        parens.start = startPrecedence !== null && startPrecedence <= precedence || parenthesis === "all";
        if (node.step) {
          var stepPrecedence = operators.getPrecedence(node.step, parenthesis);
          parens.step = stepPrecedence !== null && stepPrecedence <= precedence || parenthesis === "all";
        }
        var endPrecedence = operators.getPrecedence(node.end, parenthesis);
        parens.end = endPrecedence !== null && endPrecedence <= precedence || parenthesis === "all";
        return parens;
      }
      RangeNode.prototype._toString = function(options) {
        var parenthesis = options && options.parenthesis ? options.parenthesis : "keep";
        var parens = calculateNecessaryParentheses(this, parenthesis);
        var str;
        var start = this.start.toString(options);
        if (parens.start) {
          start = "(" + start + ")";
        }
        str = start;
        if (this.step) {
          var step = this.step.toString(options);
          if (parens.step) {
            step = "(" + step + ")";
          }
          str += ":" + step;
        }
        var end = this.end.toString(options);
        if (parens.end) {
          end = "(" + end + ")";
        }
        str += ":" + end;
        return str;
      };
      RangeNode.prototype._toTex = function(options) {
        var parenthesis = options && options.parenthesis ? options.parenthesis : "keep";
        var parens = calculateNecessaryParentheses(this, parenthesis);
        var str = this.start.toTex(options);
        if (parens.start) {
          str = "\\left(" + str + "\\right)";
        }
        if (this.step) {
          var step = this.step.toTex(options);
          if (parens.step) {
            step = "\\left(" + step + "\\right)";
          }
          str += ":" + step;
        }
        var end = this.end.toTex(options);
        if (parens.end) {
          end = "\\left(" + end + "\\right)";
        }
        str += ":" + end;
        return str;
      };
      return RangeNode;
    }
    exports.name = "RangeNode";
    exports.path = "expression.node";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/node/SymbolNode.js
var require_SymbolNode = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/node/SymbolNode.js"(exports) {
    "use strict";
    var latex = require_latex();
    var getSafeValue = require_customs().getSafeValue;
    function factory(type, config, load, typed, math) {
      var Node = load(require_Node());
      var Unit = load(require_Unit());
      function SymbolNode(name) {
        if (!(this instanceof SymbolNode)) {
          throw new SyntaxError("Constructor must be called with the new operator");
        }
        if (typeof name !== "string") throw new TypeError('String expected for parameter "name"');
        this.name = name;
      }
      SymbolNode.prototype = new Node();
      SymbolNode.prototype.type = "SymbolNode";
      SymbolNode.prototype.isSymbolNode = true;
      SymbolNode.prototype._compile = function(defs, args) {
        defs["undef"] = undef;
        defs["Unit"] = Unit;
        defs.getSafeValue = getSafeValue;
        if (args[this.name]) {
          return this.name;
        } else if (this.name in defs.math) {
          return 'getSafeValue("' + this.name + '" in scope ? scope["' + this.name + '"] : math["' + this.name + '"])';
        } else {
          return 'getSafeValue("' + this.name + '" in scope ? scope["' + this.name + '"] : ' + (Unit.isValuelessUnit(this.name) ? 'new Unit(null, "' + this.name + '")' : 'undef("' + this.name + '")') + ")";
        }
      };
      SymbolNode.prototype.forEach = function(callback) {
      };
      SymbolNode.prototype.map = function(callback) {
        return this.clone();
      };
      function undef(name) {
        throw new Error("Undefined symbol " + name);
      }
      SymbolNode.prototype.clone = function() {
        return new SymbolNode(this.name);
      };
      SymbolNode.prototype._toString = function(options) {
        return this.name;
      };
      SymbolNode.prototype._toTex = function(options) {
        var isUnit = false;
        if (typeof math[this.name] === "undefined" && Unit.isValuelessUnit(this.name)) {
          isUnit = true;
        }
        var symbol = latex.toSymbol(this.name, isUnit);
        if (symbol[0] === "\\") {
          return symbol;
        }
        return " " + symbol;
      };
      return SymbolNode;
    }
    exports.name = "SymbolNode";
    exports.path = "expression.node";
    exports.math = true;
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/node/IndexNode.js
var require_IndexNode = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/node/IndexNode.js"(exports) {
    "use strict";
    function factory(type, config, load, typed) {
      var Node = load(require_Node());
      var RangeNode = load(require_RangeNode());
      var SymbolNode = load(require_SymbolNode());
      var Range = load(require_Range());
      var isArray = Array.isArray;
      function IndexNode(dimensions, dotNotation) {
        if (!(this instanceof IndexNode)) {
          throw new SyntaxError("Constructor must be called with the new operator");
        }
        this.dimensions = dimensions;
        this.dotNotation = dotNotation || false;
        if (!isArray(dimensions) || !dimensions.every(function(range) {
          return range && range.isNode;
        })) {
          throw new TypeError('Array containing Nodes expected for parameter "dimensions"');
        }
        if (this.dotNotation && !this.isObjectProperty()) {
          throw new Error("dotNotation only applicable for object properties");
        }
        var deprecated = function() {
          throw new Error("Property `IndexNode.object` is deprecated, use `IndexNode.fn` instead");
        };
        Object.defineProperty(this, "object", { get: deprecated, set: deprecated });
      }
      IndexNode.prototype = new Node();
      IndexNode.prototype.type = "IndexNode";
      IndexNode.prototype.isIndexNode = true;
      IndexNode.prototype._compile = function(defs, args) {
        var childArgs = Object.create(args);
        defs.range = function(start, end, step) {
          return new Range(
            start && start.isBigNumber === true ? start.toNumber() : start,
            end && end.isBigNumber === true ? end.toNumber() : end,
            step && step.isBigNumber === true ? step.toNumber() : step
          );
        };
        var dimensions = this.dimensions.map(function(range, i) {
          if (range && range.isRangeNode) {
            if (range.needsEnd()) {
              childArgs.end = true;
              return "(function () {var end = size[" + i + "]; return range(" + range.start._compile(defs, childArgs) + ", " + range.end._compile(defs, childArgs) + ", " + (range.step ? range.step._compile(defs, childArgs) : "1") + "); })()";
            } else {
              return "range(" + range.start._compile(defs, childArgs) + ", " + range.end._compile(defs, childArgs) + ", " + (range.step ? range.step._compile(defs, childArgs) : "1") + ")";
            }
          }
          if (range.isSymbolNode && range.name === "end") {
            childArgs.end = true;
            return "(function () {var end = size[" + i + "]; return " + range._compile(defs, childArgs) + "; })()";
          } else {
            return range._compile(defs, childArgs);
          }
        });
        return "math.index(" + dimensions.join(", ") + ")";
      };
      IndexNode.prototype.forEach = function(callback) {
        for (var i = 0; i < this.dimensions.length; i++) {
          callback(this.dimensions[i], "dimensions[" + i + "]", this);
        }
      };
      IndexNode.prototype.map = function(callback) {
        var dimensions = [];
        for (var i = 0; i < this.dimensions.length; i++) {
          dimensions[i] = this._ifNode(callback(this.dimensions[i], "dimensions[" + i + "]", this));
        }
        return new IndexNode(dimensions);
      };
      IndexNode.prototype.clone = function() {
        return new IndexNode(this.dimensions.slice(0));
      };
      IndexNode.prototype.isObjectProperty = function() {
        return this.dimensions.length === 1 && this.dimensions[0].isConstantNode && this.dimensions[0].valueType === "string";
      };
      IndexNode.prototype.getObjectProperty = function() {
        return this.isObjectProperty() ? this.dimensions[0].value : null;
      };
      IndexNode.prototype._toString = function(options) {
        return this.dotNotation ? "." + this.getObjectProperty() : "[" + this.dimensions.join(", ") + "]";
      };
      IndexNode.prototype._toTex = function(options) {
        var dimensions = this.dimensions.map(function(range) {
          return range.toTex(options);
        });
        return this.dotNotation ? "." + this.getObjectProperty() : "_{" + dimensions.join(",") + "}";
      };
      IndexNode.prototype.needsSize = function() {
        return this.dimensions.some(function(range) {
          return range.isRangeNode && range.needsEnd() || range.isSymbolNode && range.name === "end";
        });
      };
      return IndexNode;
    }
    exports.name = "IndexNode";
    exports.path = "expression.node";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/node/ObjectNode.js
var require_ObjectNode = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/node/ObjectNode.js"(exports) {
    "use strict";
    var string = require_string();
    function factory(type, config, load, typed) {
      var Node = load(require_Node());
      function ObjectNode(properties) {
        if (!(this instanceof ObjectNode)) {
          throw new SyntaxError("Constructor must be called with the new operator");
        }
        this.properties = properties || {};
        if (properties) {
          if (!(typeof properties === "object") || Object.keys(properties).some(function(key) {
            return !properties[key] || !properties[key].isNode;
          })) {
            throw new TypeError("Object containing Nodes expected");
          }
        }
      }
      ObjectNode.prototype = new Node();
      ObjectNode.prototype.type = "ObjectNode";
      ObjectNode.prototype.isObjectNode = true;
      ObjectNode.prototype._compile = function(defs, args) {
        var entries = [];
        for (var key in this.properties) {
          if (this.properties.hasOwnProperty(key)) {
            entries.push('"' + key + '": ' + this.properties[key]._compile(defs, args));
          }
        }
        return "{" + entries.join(", ") + "}";
      };
      ObjectNode.prototype.forEach = function(callback) {
        for (var key in this.properties) {
          if (this.properties.hasOwnProperty(key)) {
            callback(this.properties[key], 'properties["' + key + '"]', this);
          }
        }
      };
      ObjectNode.prototype.map = function(callback) {
        var properties = {};
        for (var key in this.properties) {
          if (this.properties.hasOwnProperty(key)) {
            properties[key] = this._ifNode(callback(this.properties[key], 'properties["' + key + '"]', this));
          }
        }
        return new ObjectNode(properties);
      };
      ObjectNode.prototype.clone = function() {
        var properties = {};
        for (var key in this.properties) {
          if (this.properties.hasOwnProperty(key)) {
            properties[key] = this.properties[key];
          }
        }
        return new ObjectNode(properties);
      };
      ObjectNode.prototype._toString = function(options) {
        var entries = [];
        for (var key in this.properties) {
          if (this.properties.hasOwnProperty(key)) {
            entries.push('"' + key + '": ' + this.properties[key].toString(options));
          }
        }
        return "{" + entries.join(", ") + "}";
      };
      ObjectNode.prototype._toTex = function(options) {
        var entries = [];
        for (var key in this.properties) {
          if (this.properties.hasOwnProperty(key)) {
            entries.push("\\mathbf{" + key + ":} & " + this.properties[key].toTex(options) + "\\\\");
          }
        }
        return "\\left\\{\\begin{array}{ll}" + entries.join("\n") + "\\end{array}\\right\\}";
      };
      return ObjectNode;
    }
    exports.name = "ObjectNode";
    exports.path = "expression.node";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/node/FunctionNode.js
var require_FunctionNode = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/node/FunctionNode.js"(exports) {
    "use strict";
    var latex = require_latex();
    var extend = require_object().extend;
    var getSafeValue = require_customs().getSafeValue;
    function factory(type, config, load, typed, math) {
      var Node = load(require_Node());
      var SymbolNode = load(require_SymbolNode());
      function FunctionNode(fn, args) {
        if (!(this instanceof FunctionNode)) {
          throw new SyntaxError("Constructor must be called with the new operator");
        }
        if (typeof fn === "string") {
          fn = new SymbolNode(fn);
        }
        if (!fn || !fn.isNode) throw new TypeError('Node expected as parameter "fn"');
        if (!Array.isArray(args) || !args.every(function(arg) {
          return arg && arg.isNode;
        })) {
          throw new TypeError('Array containing Nodes expected for parameter "args"');
        }
        this.fn = fn;
        this.args = args || [];
        Object.defineProperty(this, "name", {
          get: (function() {
            return this.fn.name || "";
          }).bind(this),
          set: function() {
            throw new Error("Cannot assign a new name, name is read-only");
          }
        });
        var deprecated = function() {
          throw new Error("Property `FunctionNode.object` is deprecated, use `FunctionNode.fn` instead");
        };
        Object.defineProperty(this, "object", { get: deprecated, set: deprecated });
      }
      FunctionNode.prototype = new Node();
      FunctionNode.prototype.type = "FunctionNode";
      FunctionNode.prototype.isFunctionNode = true;
      FunctionNode.prototype._compile = function(defs, args) {
        var jsFn = this.fn._compile(defs, args);
        var jsArgs = this.args.map(function(arg) {
          return arg._compile(defs, args);
        });
        var jsScope = this._compileScope(defs, args);
        var argsName;
        if (this.fn.isSymbolNode) {
          var name = this.fn.name;
          var fn = defs.math[name];
          var isRaw = typeof fn === "function" && fn.rawArgs == true;
          if (isRaw) {
            argsName = this._getUniqueArgumentsName(defs);
            defs[argsName] = this.args;
            return jsFn + "(" + argsName + ", math, " + jsScope + ")";
          } else {
            return jsFn + "(" + jsArgs.join(", ") + ")";
          }
        } else if (this.fn.isAccessorNode && this.fn.index.isObjectProperty()) {
          argsName = this._getUniqueArgumentsName(defs);
          defs[argsName] = this.args;
          defs.getSafeValue = getSafeValue;
          var jsObject = this.fn.object._compile(defs, args);
          var prop = this.fn.index.getObjectProperty();
          return "(function () {var object = " + jsObject + ';var value = getSafeValue(object["' + prop + '"]);return (value && value.rawArgs)  ? object["' + prop + '"](' + argsName + ", math, " + jsScope + ') : object["' + prop + '"](' + jsArgs.join(", ") + ")})()";
        } else {
          argsName = this._getUniqueArgumentsName(defs);
          defs[argsName] = this.args;
          return "(function () {var fn = " + jsFn + ";return (fn && fn.rawArgs)  ? fn(" + argsName + ", math, " + jsScope + ") : fn(" + jsArgs.join(", ") + ")})()";
        }
      };
      FunctionNode.prototype._compileScope = function(defs, args) {
        var names = Object.keys(args);
        if (names.length === 0) {
          return "scope";
        } else {
          defs.extend = extend;
          var jsArgs = names.map(function(arg) {
            return '"' + arg + '": ' + arg;
          }).join(", ");
          return "extend(extend({}, scope), {" + jsArgs + "})";
        }
      };
      FunctionNode.prototype._getUniqueArgumentsName = function(defs) {
        var argsName;
        var i = 0;
        do {
          argsName = "args" + i;
          i++;
        } while (argsName in defs);
        return argsName;
      };
      FunctionNode.prototype.forEach = function(callback) {
        for (var i = 0; i < this.args.length; i++) {
          callback(this.args[i], "args[" + i + "]", this);
        }
      };
      FunctionNode.prototype.map = function(callback) {
        var fn = this.fn.map(callback);
        var args = [];
        for (var i = 0; i < this.args.length; i++) {
          args[i] = this._ifNode(callback(this.args[i], "args[" + i + "]", this));
        }
        return new FunctionNode(fn, args);
      };
      FunctionNode.prototype.clone = function() {
        return new FunctionNode(this.fn, this.args.slice(0));
      };
      var nodeToString = FunctionNode.prototype.toString;
      FunctionNode.prototype.toString = function(options) {
        var customString;
        var name = this.fn.toString(options);
        if (options && typeof options.handler === "object" && options.handler.hasOwnProperty(name)) {
          customString = options.handler[name](this, options);
        }
        if (typeof customString !== "undefined") {
          return customString;
        }
        return nodeToString.call(this, options);
      };
      FunctionNode.prototype._toString = function(options) {
        var args = this.args.map(function(arg) {
          return arg.toString(options);
        });
        return this.fn.toString(options) + "(" + args.join(", ") + ")";
      };
      function expandTemplate(template, node, options) {
        var latex2 = "";
        var regex = new RegExp("\\$(?:\\{([a-z_][a-z_0-9]*)(?:\\[([0-9]+)\\])?\\}|\\$)", "ig");
        var inputPos = 0;
        var match;
        while ((match = regex.exec(template)) !== null) {
          latex2 += template.substring(inputPos, match.index);
          inputPos = match.index;
          if (match[0] === "$$") {
            latex2 += "$";
            inputPos++;
          } else {
            inputPos += match[0].length;
            var property = node[match[1]];
            if (!property) {
              throw new ReferenceError("Template: Property " + match[1] + " does not exist.");
            }
            if (match[2] === void 0) {
              switch (typeof property) {
                case "string":
                  latex2 += property;
                  break;
                case "object":
                  if (property.isNode) {
                    latex2 += property.toTex(options);
                  } else if (Array.isArray(property)) {
                    latex2 += property.map(function(arg, index) {
                      if (arg && arg.isNode) {
                        return arg.toTex(options);
                      }
                      throw new TypeError("Template: " + match[1] + "[" + index + "] is not a Node.");
                    }).join(",");
                  } else {
                    throw new TypeError("Template: " + match[1] + " has to be a Node, String or array of Nodes");
                  }
                  break;
                default:
                  throw new TypeError("Template: " + match[1] + " has to be a Node, String or array of Nodes");
              }
            } else {
              if (property[match[2]] && property[match[2]].isNode) {
                latex2 += property[match[2]].toTex(options);
              } else {
                throw new TypeError("Template: " + match[1] + "[" + match[2] + "] is not a Node.");
              }
            }
          }
        }
        latex2 += template.slice(inputPos);
        return latex2;
      }
      var nodeToTex = FunctionNode.prototype.toTex;
      FunctionNode.prototype.toTex = function(options) {
        var customTex;
        if (options && typeof options.handler === "object" && options.handler.hasOwnProperty(this.name)) {
          customTex = options.handler[this.name](this, options);
        }
        if (typeof customTex !== "undefined") {
          return customTex;
        }
        return nodeToTex.call(this, options);
      };
      FunctionNode.prototype._toTex = function(options) {
        var args = this.args.map(function(arg) {
          return arg.toTex(options);
        });
        var latexConverter;
        if (math[this.name] && (typeof math[this.name].toTex === "function" || typeof math[this.name].toTex === "object" || typeof math[this.name].toTex === "string")) {
          latexConverter = math[this.name].toTex;
        }
        var customToTex;
        switch (typeof latexConverter) {
          case "function":
            customToTex = latexConverter(this, options);
            break;
          case "string":
            customToTex = expandTemplate(latexConverter, this, options);
            break;
          case "object":
            switch (typeof latexConverter[args.length]) {
              case "function":
                customToTex = latexConverter[args.length](this, options);
                break;
              case "string":
                customToTex = expandTemplate(latexConverter[args.length], this, options);
                break;
            }
        }
        if (typeof customToTex !== "undefined") {
          return customToTex;
        }
        return expandTemplate(latex.defaultTemplate, this, options);
      };
      FunctionNode.prototype.getIdentifier = function() {
        return this.type + ":" + this.name;
      };
      return FunctionNode;
    }
    exports.name = "FunctionNode";
    exports.path = "expression.node";
    exports.math = true;
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/node/OperatorNode.js
var require_OperatorNode = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/node/OperatorNode.js"(exports) {
    "use strict";
    var latex = require_latex();
    var operators = require_operators();
    function factory(type, config, load, typed, math) {
      var Node = load(require_Node());
      var ConstantNode = load(require_ConstantNode());
      var SymbolNode = load(require_SymbolNode());
      var FunctionNode = load(require_FunctionNode());
      function OperatorNode(op, fn, args, implicit) {
        if (!(this instanceof OperatorNode)) {
          throw new SyntaxError("Constructor must be called with the new operator");
        }
        if (typeof op !== "string") {
          throw new TypeError('string expected for parameter "op"');
        }
        if (typeof fn !== "string") {
          throw new TypeError('string expected for parameter "fn"');
        }
        if (!Array.isArray(args) || !args.every(function(node) {
          return node && node.isNode;
        })) {
          throw new TypeError('Array containing Nodes expected for parameter "args"');
        }
        this.implicit = implicit === true;
        this.op = op;
        this.fn = fn;
        this.args = args || [];
      }
      OperatorNode.prototype = new Node();
      OperatorNode.prototype.type = "OperatorNode";
      OperatorNode.prototype.isOperatorNode = true;
      OperatorNode.prototype._compile = function(defs, args) {
        if (!defs.math[this.fn]) {
          throw new Error("Function " + this.fn + ' missing in provided namespace "math"');
        }
        var jsArgs = this.args.map(function(arg) {
          return arg._compile(defs, args);
        });
        return "math." + this.fn + "(" + jsArgs.join(", ") + ")";
      };
      OperatorNode.prototype.forEach = function(callback) {
        for (var i = 0; i < this.args.length; i++) {
          callback(this.args[i], "args[" + i + "]", this);
        }
      };
      OperatorNode.prototype.map = function(callback) {
        var args = [];
        for (var i = 0; i < this.args.length; i++) {
          args[i] = this._ifNode(callback(this.args[i], "args[" + i + "]", this));
        }
        return new OperatorNode(this.op, this.fn, args);
      };
      OperatorNode.prototype.clone = function() {
        return new OperatorNode(this.op, this.fn, this.args.slice(0), this.implicit);
      };
      function calculateNecessaryParentheses(root, parenthesis, args, latex2) {
        var precedence = operators.getPrecedence(root, parenthesis);
        var associativity = operators.getAssociativity(root, parenthesis);
        if (parenthesis === "all" || args.length > 2 && root.getIdentifier() !== "OperatorNode:add" && root.getIdentifier() !== "OperatorNode:multiply") {
          var parens = args.map(function(arg) {
            switch (arg.getContent().type) {
              case "ArrayNode":
              case "ConstantNode":
              case "SymbolNode":
              case "ParenthesisNode":
                return false;
                break;
              default:
                return true;
            }
          });
          return parens;
        }
        if (args.length === 0) {
          return [];
        } else if (args.length === 1) {
          var operandPrecedence = operators.getPrecedence(args[0], parenthesis);
          if (latex2 && operandPrecedence !== null) {
            var operandIdentifier;
            var rootIdentifier;
            if (parenthesis === "keep") {
              operandIdentifier = args[0].getIdentifier();
              rootIdentifier = root.getIdentifier();
            } else {
              operandIdentifier = args[0].getContent().getIdentifier();
              rootIdentifier = root.getContent().getIdentifier();
            }
            if (operators.properties[precedence][rootIdentifier].latexLeftParens === false) {
              return [false];
            }
            if (operators.properties[operandPrecedence][operandIdentifier].latexParens === false) {
              return [false];
            }
          }
          if (operandPrecedence === null) {
            return [false];
          }
          if (operandPrecedence <= precedence) {
            return [true];
          }
          return [false];
        } else if (args.length === 2) {
          var lhsParens;
          var lhsPrecedence = operators.getPrecedence(args[0], parenthesis);
          var assocWithLhs = operators.isAssociativeWith(root, args[0], parenthesis);
          if (lhsPrecedence === null) {
            lhsParens = false;
          } else if (lhsPrecedence === precedence && associativity === "right" && !assocWithLhs) {
            lhsParens = true;
          } else if (lhsPrecedence < precedence) {
            lhsParens = true;
          } else {
            lhsParens = false;
          }
          var rhsParens;
          var rhsPrecedence = operators.getPrecedence(args[1], parenthesis);
          var assocWithRhs = operators.isAssociativeWith(root, args[1], parenthesis);
          if (rhsPrecedence === null) {
            rhsParens = false;
          } else if (rhsPrecedence === precedence && associativity === "left" && !assocWithRhs) {
            rhsParens = true;
          } else if (rhsPrecedence < precedence) {
            rhsParens = true;
          } else {
            rhsParens = false;
          }
          if (latex2) {
            var rootIdentifier;
            var lhsIdentifier;
            var rhsIdentifier;
            if (parenthesis === "keep") {
              rootIdentifier = root.getIdentifier();
              lhsIdentifier = root.args[0].getIdentifier();
              rhsIdentifier = root.args[1].getIdentifier();
            } else {
              rootIdentifier = root.getContent().getIdentifier();
              lhsIdentifier = root.args[0].getContent().getIdentifier();
              rhsIdentifier = root.args[1].getContent().getIdentifier();
            }
            if (lhsPrecedence !== null) {
              if (operators.properties[precedence][rootIdentifier].latexLeftParens === false) {
                lhsParens = false;
              }
              if (operators.properties[lhsPrecedence][lhsIdentifier].latexParens === false) {
                lhsParens = false;
              }
            }
            if (rhsPrecedence !== null) {
              if (operators.properties[precedence][rootIdentifier].latexRightParens === false) {
                rhsParens = false;
              }
              if (operators.properties[rhsPrecedence][rhsIdentifier].latexParens === false) {
                rhsParens = false;
              }
            }
          }
          return [lhsParens, rhsParens];
        } else if (args.length > 2 && (root.getIdentifier() === "OperatorNode:add" || root.getIdentifier() === "OperatorNode:multiply")) {
          var parensArray = args.map(function(arg) {
            var argPrecedence = operators.getPrecedence(arg, parenthesis);
            var assocWithArg = operators.isAssociativeWith(root, arg, parenthesis);
            var argAssociativity = operators.getAssociativity(arg, parenthesis);
            if (argPrecedence === null) {
              return false;
            } else if (precedence === argPrecedence && associativity === argAssociativity && !assocWithArg) {
              return true;
            } else if (argPrecedence < precedence) {
              return true;
            }
            return false;
          });
          return parensArray;
        }
      }
      OperatorNode.prototype._toString = function(options) {
        var parenthesis = options && options.parenthesis ? options.parenthesis : "keep";
        var implicit = options && options.implicit ? options.implicit : "hide";
        var args = this.args;
        var parens = calculateNecessaryParentheses(this, parenthesis, args, false);
        if (args.length === 1) {
          var assoc = operators.getAssociativity(this, parenthesis);
          var operand = args[0].toString(options);
          if (parens[0]) {
            operand = "(" + operand + ")";
          }
          if (assoc === "right") {
            return this.op + operand;
          } else if (assoc === "left") {
            return operand + this.op;
          }
          return operand + this.op;
        } else if (args.length == 2) {
          var lhs = args[0].toString(options);
          var rhs = args[1].toString(options);
          if (parens[0]) {
            lhs = "(" + lhs + ")";
          }
          if (parens[1]) {
            rhs = "(" + rhs + ")";
          }
          if (this.implicit && this.getIdentifier() === "OperatorNode:multiply" && implicit == "hide") {
            return lhs + " " + rhs;
          }
          return lhs + " " + this.op + " " + rhs;
        } else if (args.length > 2 && (this.getIdentifier() === "OperatorNode:add" || this.getIdentifier() === "OperatorNode:multiply")) {
          var stringifiedArgs = args.map(function(arg, index) {
            arg = arg.toString(options);
            if (parens[index]) {
              arg = "(" + arg + ")";
            }
            return arg;
          });
          if (this.implicit && this.getIdentifier() === "OperatorNode:multiply" && implicit === "hide") {
            return stringifiedArgs.join(" ");
          }
          return stringifiedArgs.join(" " + this.op + " ");
        } else {
          return this.fn + "(" + this.args.join(", ") + ")";
        }
      };
      OperatorNode.prototype._toTex = function(options) {
        var parenthesis = options && options.parenthesis ? options.parenthesis : "keep";
        var implicit = options && options.implicit ? options.implicit : "hide";
        var args = this.args;
        var parens = calculateNecessaryParentheses(this, parenthesis, args, true);
        var op = latex.operators[this.fn];
        op = typeof op === "undefined" ? this.op : op;
        if (args.length === 1) {
          var assoc = operators.getAssociativity(this, parenthesis);
          var operand = args[0].toTex(options);
          if (parens[0]) {
            operand = "\\left(" + operand + "\\right)";
          }
          if (assoc === "right") {
            return op + operand;
          } else if (assoc === "left") {
            return operand + op;
          }
          return operand + op;
        } else if (args.length === 2) {
          var lhs = args[0];
          var lhsTex = lhs.toTex(options);
          if (parens[0]) {
            lhsTex = "\\left(" + lhsTex + "\\right)";
          }
          var rhs = args[1];
          var rhsTex = rhs.toTex(options);
          if (parens[1]) {
            rhsTex = "\\left(" + rhsTex + "\\right)";
          }
          var lhsIdentifier;
          if (parenthesis === "keep") {
            lhsIdentifier = lhs.getIdentifier();
          } else {
            lhsIdentifier = lhs.getContent().getIdentifier();
          }
          switch (this.getIdentifier()) {
            case "OperatorNode:divide":
              return op + "{" + lhsTex + "}{" + rhsTex + "}";
            case "OperatorNode:pow":
              lhsTex = "{" + lhsTex + "}";
              rhsTex = "{" + rhsTex + "}";
              switch (lhsIdentifier) {
                case "ConditionalNode":
                case "OperatorNode:divide":
                  lhsTex = "\\left(" + lhsTex + "\\right)";
              }
            case "OperatorNode:multiply":
              if (this.implicit && implicit === "hide") {
                return lhsTex + "~" + rhsTex;
              }
          }
          return lhsTex + op + rhsTex;
        } else if (args.length > 2 && (this.getIdentifier() === "OperatorNode:add" || this.getIdentifier() === "OperatorNode:multiply")) {
          var texifiedArgs = args.map(function(arg, index) {
            arg = arg.toTex(options);
            if (parens[index]) {
              arg = "\\left(" + arg + "\\right)";
            }
            return arg;
          });
          if (this.getIdentifier() === "OperatorNode:multiply" && this.implicit) {
            return texifiedArgs.join("~");
          }
          return texifiedArgs.join(op);
        } else {
          return "\\mathrm{" + this.fn + "}\\left(" + args.map(function(arg) {
            return arg.toTex(options);
          }).join(",") + "\\right)";
        }
      };
      OperatorNode.prototype.getIdentifier = function() {
        return this.type + ":" + this.fn;
      };
      return OperatorNode;
    }
    exports.name = "OperatorNode";
    exports.path = "expression.node";
    exports.math = true;
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/node/ParenthesisNode.js
var require_ParenthesisNode = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/node/ParenthesisNode.js"(exports) {
    "use strict";
    function factory(type, config, load, typed) {
      var Node = load(require_Node());
      function ParenthesisNode(content) {
        if (!(this instanceof ParenthesisNode)) {
          throw new SyntaxError("Constructor must be called with the new operator");
        }
        if (!(content && content.isNode)) {
          throw new TypeError('Node expected for parameter "content"');
        }
        this.content = content;
      }
      ParenthesisNode.prototype = new Node();
      ParenthesisNode.prototype.type = "ParenthesisNode";
      ParenthesisNode.prototype.isParenthesisNode = true;
      ParenthesisNode.prototype._compile = function(defs, args) {
        return this.content._compile(defs, args);
      };
      ParenthesisNode.prototype.getContent = function() {
        return this.content.getContent();
      };
      ParenthesisNode.prototype.forEach = function(callback) {
        callback(this.content, "content", this);
      };
      ParenthesisNode.prototype.map = function(callback) {
        var content = callback(this.content, "content", this);
        return new ParenthesisNode(content);
      };
      ParenthesisNode.prototype.clone = function() {
        return new ParenthesisNode(this.content);
      };
      ParenthesisNode.prototype._toString = function(options) {
        if (!options || options && !options.parenthesis || options && options.parenthesis === "keep") {
          return "(" + this.content.toString(options) + ")";
        }
        return this.content.toString(options);
      };
      ParenthesisNode.prototype._toTex = function(options) {
        if (!options || options && !options.parenthesis || options && options.parenthesis === "keep") {
          return "\\left(" + this.content.toTex(options) + "\\right)";
        }
        return this.content.toTex(options);
      };
      return ParenthesisNode;
    }
    exports.name = "ParenthesisNode";
    exports.path = "expression.node";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/parse.js
var require_parse = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/parse.js"(exports) {
    "use strict";
    var ArgumentsError = require_ArgumentsError();
    var deepMap = require_deepMap();
    function factory(type, config, load, typed) {
      var AccessorNode = load(require_AccessorNode());
      var ArrayNode = load(require_ArrayNode());
      var AssignmentNode = load(require_AssignmentNode());
      var BlockNode = load(require_BlockNode());
      var ConditionalNode = load(require_ConditionalNode());
      var ConstantNode = load(require_ConstantNode());
      var FunctionAssignmentNode = load(require_FunctionAssignmentNode());
      var IndexNode = load(require_IndexNode());
      var ObjectNode = load(require_ObjectNode());
      var OperatorNode = load(require_OperatorNode());
      var ParenthesisNode = load(require_ParenthesisNode());
      var FunctionNode = load(require_FunctionNode());
      var RangeNode = load(require_RangeNode());
      var SymbolNode = load(require_SymbolNode());
      function parse(expr, options) {
        if (arguments.length != 1 && arguments.length != 2) {
          throw new ArgumentsError("parse", arguments.length, 1, 2);
        }
        extra_nodes = options && options.nodes ? options.nodes : {};
        if (typeof expr === "string") {
          expression = expr;
          return parseStart();
        } else if (Array.isArray(expr) || expr instanceof type.Matrix) {
          return deepMap(expr, function(elem) {
            if (typeof elem !== "string") throw new TypeError("String expected");
            expression = elem;
            return parseStart();
          });
        } else {
          throw new TypeError("String or matrix expected");
        }
      }
      var TOKENTYPE = {
        NULL: 0,
        DELIMITER: 1,
        NUMBER: 2,
        SYMBOL: 3,
        UNKNOWN: 4
      };
      var DELIMITERS = {
        ",": true,
        "(": true,
        ")": true,
        "[": true,
        "]": true,
        "{": true,
        "}": true,
        '"': true,
        ";": true,
        "+": true,
        "-": true,
        "*": true,
        ".*": true,
        "/": true,
        "./": true,
        "%": true,
        "^": true,
        ".^": true,
        "~": true,
        "!": true,
        "&": true,
        "|": true,
        "^|": true,
        "'": true,
        "=": true,
        ":": true,
        "?": true,
        "==": true,
        "!=": true,
        "<": true,
        ">": true,
        "<=": true,
        ">=": true,
        "<<": true,
        ">>": true,
        ">>>": true
      };
      var NAMED_DELIMITERS = {
        "mod": true,
        "to": true,
        "in": true,
        "and": true,
        "xor": true,
        "or": true,
        "not": true
      };
      var extra_nodes = {};
      var expression = "";
      var comment = "";
      var index = 0;
      var c = "";
      var token = "";
      var token_type = TOKENTYPE.NULL;
      var nesting_level = 0;
      var conditional_level = null;
      function first() {
        index = 0;
        c = expression.charAt(0);
        nesting_level = 0;
        conditional_level = null;
      }
      function next() {
        index++;
        c = expression.charAt(index);
      }
      function prevPreview() {
        return expression.charAt(index - 1);
      }
      function nextPreview() {
        return expression.charAt(index + 1);
      }
      function nextNextPreview() {
        return expression.charAt(index + 2);
      }
      function getToken() {
        token_type = TOKENTYPE.NULL;
        token = "";
        comment = "";
        while (parse.isWhitespace(c, nesting_level)) {
          next();
        }
        if (c == "#") {
          while (c != "\n" && c != "") {
            comment += c;
            next();
          }
        }
        if (c == "") {
          token_type = TOKENTYPE.DELIMITER;
          return;
        }
        if (c == "\n" && !nesting_level) {
          token_type = TOKENTYPE.DELIMITER;
          token = c;
          next();
          return;
        }
        var c2 = c + nextPreview();
        var c3 = c2 + nextNextPreview();
        if (c3.length == 3 && DELIMITERS[c3]) {
          token_type = TOKENTYPE.DELIMITER;
          token = c3;
          next();
          next();
          next();
          return;
        }
        if (c2.length == 2 && DELIMITERS[c2]) {
          token_type = TOKENTYPE.DELIMITER;
          token = c2;
          next();
          next();
          return;
        }
        if (DELIMITERS[c]) {
          token_type = TOKENTYPE.DELIMITER;
          token = c;
          next();
          return;
        }
        if (parse.isDigitDot(c)) {
          token_type = TOKENTYPE.NUMBER;
          if (c == ".") {
            token += c;
            next();
            if (!parse.isDigit(c)) {
              token_type = TOKENTYPE.DELIMITER;
            }
          } else {
            while (parse.isDigit(c)) {
              token += c;
              next();
            }
            if (parse.isDecimalMark(c, nextPreview())) {
              token += c;
              next();
            }
          }
          while (parse.isDigit(c)) {
            token += c;
            next();
          }
          c2 = nextPreview();
          if (c == "E" || c == "e") {
            if (parse.isDigit(c2) || c2 == "-" || c2 == "+") {
              token += c;
              next();
              if (c == "+" || c == "-") {
                token += c;
                next();
              }
              if (!parse.isDigit(c)) {
                throw createSyntaxError('Digit expected, got "' + c + '"');
              }
              while (parse.isDigit(c)) {
                token += c;
                next();
              }
              if (parse.isDecimalMark(c, nextPreview())) {
                throw createSyntaxError('Digit expected, got "' + c + '"');
              }
            } else if (c2 == ".") {
              next();
              throw createSyntaxError('Digit expected, got "' + c + '"');
            }
          }
          return;
        }
        if (parse.isAlpha(c, prevPreview(), nextPreview())) {
          while (parse.isAlpha(c, prevPreview(), nextPreview()) || parse.isDigit(c)) {
            token += c;
            next();
          }
          if (NAMED_DELIMITERS.hasOwnProperty(token)) {
            token_type = TOKENTYPE.DELIMITER;
          } else {
            token_type = TOKENTYPE.SYMBOL;
          }
          return;
        }
        token_type = TOKENTYPE.UNKNOWN;
        while (c != "") {
          token += c;
          next();
        }
        throw createSyntaxError('Syntax error in part "' + token + '"');
      }
      function getTokenSkipNewline() {
        do {
          getToken();
        } while (token == "\n");
      }
      function openParams() {
        nesting_level++;
      }
      function closeParams() {
        nesting_level--;
      }
      parse.isAlpha = function isAlpha(c2, cPrev, cNext) {
        return parse.isValidLatinOrGreek(c2) || parse.isValidMathSymbol(c2, cNext) || parse.isValidMathSymbol(cPrev, c2);
      };
      parse.isValidLatinOrGreek = function isValidLatinOrGreek(c2) {
        return /^[a-zA-Z_\u00C0-\u02AF\u0370-\u03FF\u2100-\u214F]$/.test(c2);
      };
      parse.isValidMathSymbol = function isValidMathSymbol(high, low) {
        return /^[\uD835]$/.test(high) && /^[\uDC00-\uDFFF]$/.test(low) && /^[^\uDC55\uDC9D\uDCA0\uDCA1\uDCA3\uDCA4\uDCA7\uDCA8\uDCAD\uDCBA\uDCBC\uDCC4\uDD06\uDD0B\uDD0C\uDD15\uDD1D\uDD3A\uDD3F\uDD45\uDD47-\uDD49\uDD51\uDEA6\uDEA7\uDFCC\uDFCD]$/.test(low);
      };
      parse.isWhitespace = function isWhitespace(c2, nestingLevel) {
        return c2 == " " || c2 == "	" || c2 == "\n" && nestingLevel > 0;
      };
      parse.isDecimalMark = function isDecimalMark(c2, cNext) {
        return c2 == "." && cNext !== "/" && cNext !== "*" && cNext !== "^";
      };
      parse.isDigitDot = function isDigitDot(c2) {
        return c2 >= "0" && c2 <= "9" || c2 == ".";
      };
      parse.isDigit = function isDigit(c2) {
        return c2 >= "0" && c2 <= "9";
      };
      function parseStart() {
        first();
        getToken();
        var node = parseBlock();
        if (token != "") {
          if (token_type == TOKENTYPE.DELIMITER) {
            throw createError("Unexpected operator " + token);
          } else {
            throw createSyntaxError('Unexpected part "' + token + '"');
          }
        }
        return node;
      }
      function parseBlock() {
        var node;
        var blocks = [];
        var visible;
        if (token != "" && token != "\n" && token != ";") {
          node = parseAssignment();
          node.comment = comment;
        }
        while (token == "\n" || token == ";") {
          if (blocks.length == 0 && node) {
            visible = token != ";";
            blocks.push({
              node,
              visible
            });
          }
          getToken();
          if (token != "\n" && token != ";" && token != "") {
            node = parseAssignment();
            node.comment = comment;
            visible = token != ";";
            blocks.push({
              node,
              visible
            });
          }
        }
        if (blocks.length > 0) {
          return new BlockNode(blocks);
        } else {
          if (!node) {
            node = new ConstantNode("undefined", "undefined");
            node.comment = comment;
          }
          return node;
        }
      }
      function parseAssignment() {
        var name, args, value, valid;
        var node = parseConditional();
        if (token == "=") {
          if (node && node.isSymbolNode) {
            name = node.name;
            getTokenSkipNewline();
            value = parseAssignment();
            return new AssignmentNode(new SymbolNode(name), value);
          } else if (node && node.isAccessorNode) {
            getTokenSkipNewline();
            value = parseAssignment();
            return new AssignmentNode(node.object, node.index, value);
          } else if (node && node.isFunctionNode) {
            valid = true;
            args = [];
            name = node.name;
            node.args.forEach(function(arg, index2) {
              if (arg && arg.isSymbolNode) {
                args[index2] = arg.name;
              } else {
                valid = false;
              }
            });
            if (valid) {
              getTokenSkipNewline();
              value = parseAssignment();
              return new FunctionAssignmentNode(name, args, value);
            }
          }
          throw createSyntaxError("Invalid left hand side of assignment operator =");
        }
        return node;
      }
      function parseConditional() {
        var node = parseLogicalOr();
        while (token == "?") {
          var prev = conditional_level;
          conditional_level = nesting_level;
          getTokenSkipNewline();
          var condition = node;
          var trueExpr = parseAssignment();
          if (token != ":") throw createSyntaxError("False part of conditional expression expected");
          conditional_level = null;
          getTokenSkipNewline();
          var falseExpr = parseAssignment();
          node = new ConditionalNode(condition, trueExpr, falseExpr);
          conditional_level = prev;
        }
        return node;
      }
      function parseLogicalOr() {
        var node = parseLogicalXor();
        while (token == "or") {
          getTokenSkipNewline();
          node = new OperatorNode("or", "or", [node, parseLogicalXor()]);
        }
        return node;
      }
      function parseLogicalXor() {
        var node = parseLogicalAnd();
        while (token == "xor") {
          getTokenSkipNewline();
          node = new OperatorNode("xor", "xor", [node, parseLogicalAnd()]);
        }
        return node;
      }
      function parseLogicalAnd() {
        var node = parseBitwiseOr();
        while (token == "and") {
          getTokenSkipNewline();
          node = new OperatorNode("and", "and", [node, parseBitwiseOr()]);
        }
        return node;
      }
      function parseBitwiseOr() {
        var node = parseBitwiseXor();
        while (token == "|") {
          getTokenSkipNewline();
          node = new OperatorNode("|", "bitOr", [node, parseBitwiseXor()]);
        }
        return node;
      }
      function parseBitwiseXor() {
        var node = parseBitwiseAnd();
        while (token == "^|") {
          getTokenSkipNewline();
          node = new OperatorNode("^|", "bitXor", [node, parseBitwiseAnd()]);
        }
        return node;
      }
      function parseBitwiseAnd() {
        var node = parseRelational();
        while (token == "&") {
          getTokenSkipNewline();
          node = new OperatorNode("&", "bitAnd", [node, parseRelational()]);
        }
        return node;
      }
      function parseRelational() {
        var node, operators, name, fn, params;
        node = parseShift();
        operators = {
          "==": "equal",
          "!=": "unequal",
          "<": "smaller",
          ">": "larger",
          "<=": "smallerEq",
          ">=": "largerEq"
        };
        while (token in operators) {
          name = token;
          fn = operators[name];
          getTokenSkipNewline();
          params = [node, parseShift()];
          node = new OperatorNode(name, fn, params);
        }
        return node;
      }
      function parseShift() {
        var node, operators, name, fn, params;
        node = parseConversion();
        operators = {
          "<<": "leftShift",
          ">>": "rightArithShift",
          ">>>": "rightLogShift"
        };
        while (token in operators) {
          name = token;
          fn = operators[name];
          getTokenSkipNewline();
          params = [node, parseConversion()];
          node = new OperatorNode(name, fn, params);
        }
        return node;
      }
      function parseConversion() {
        var node, operators, name, fn, params;
        node = parseRange();
        operators = {
          "to": "to",
          "in": "to"
          // alias of 'to'
        };
        while (token in operators) {
          name = token;
          fn = operators[name];
          getTokenSkipNewline();
          if (name === "in" && token === "") {
            node = new OperatorNode("*", "multiply", [node, new SymbolNode("in")], true);
          } else {
            params = [node, parseRange()];
            node = new OperatorNode(name, fn, params);
          }
        }
        return node;
      }
      function parseRange() {
        var node, params = [];
        if (token == ":") {
          node = new ConstantNode("1", "number");
        } else {
          node = parseAddSubtract();
        }
        if (token == ":" && conditional_level !== nesting_level) {
          params.push(node);
          while (token == ":" && params.length < 3) {
            getTokenSkipNewline();
            if (token == ")" || token == "]" || token == "," || token == "") {
              params.push(new SymbolNode("end"));
            } else {
              params.push(parseAddSubtract());
            }
          }
          if (params.length == 3) {
            node = new RangeNode(params[0], params[2], params[1]);
          } else {
            node = new RangeNode(params[0], params[1]);
          }
        }
        return node;
      }
      function parseAddSubtract() {
        var node, operators, name, fn, params;
        node = parseMultiplyDivide();
        operators = {
          "+": "add",
          "-": "subtract"
        };
        while (token in operators) {
          name = token;
          fn = operators[name];
          getTokenSkipNewline();
          params = [node, parseMultiplyDivide()];
          node = new OperatorNode(name, fn, params);
        }
        return node;
      }
      function parseMultiplyDivide() {
        var node, last, operators, name, fn;
        node = parseUnary();
        last = node;
        operators = {
          "*": "multiply",
          ".*": "dotMultiply",
          "/": "divide",
          "./": "dotDivide",
          "%": "mod",
          "mod": "mod"
        };
        while (true) {
          if (token in operators) {
            name = token;
            fn = operators[name];
            getTokenSkipNewline();
            last = parseUnary();
            node = new OperatorNode(name, fn, [node, last]);
          } else if (token_type == TOKENTYPE.SYMBOL || token == "in" && (node && node.isConstantNode) || token_type == TOKENTYPE.NUMBER && !last.isConstantNode && (!last.isOperatorNode || last.op === "!") || token == "(") {
            last = parseUnary();
            node = new OperatorNode(
              "*",
              "multiply",
              [node, last],
              true
              /*implicit*/
            );
          } else {
            break;
          }
        }
        return node;
      }
      function parseUnary() {
        var name, params;
        var fn = {
          "-": "unaryMinus",
          "+": "unaryPlus",
          "~": "bitNot",
          "not": "not"
        }[token];
        if (fn) {
          name = token;
          getTokenSkipNewline();
          params = [parseUnary()];
          return new OperatorNode(name, fn, params);
        }
        return parsePow();
      }
      function parsePow() {
        var node, name, fn, params;
        node = parseLeftHandOperators();
        if (token == "^" || token == ".^") {
          name = token;
          fn = name == "^" ? "pow" : "dotPow";
          getTokenSkipNewline();
          params = [node, parseUnary()];
          node = new OperatorNode(name, fn, params);
        }
        return node;
      }
      function parseLeftHandOperators() {
        var node, operators, name, fn, params;
        node = parseCustomNodes();
        operators = {
          "!": "factorial",
          "'": "transpose"
        };
        while (token in operators) {
          name = token;
          fn = operators[name];
          getToken();
          params = [node];
          node = new OperatorNode(name, fn, params);
          node = parseAccessors(node);
        }
        return node;
      }
      function parseCustomNodes() {
        var params = [], handler;
        if (token_type == TOKENTYPE.SYMBOL && extra_nodes[token]) {
          handler = extra_nodes[token];
          getToken();
          if (token == "(") {
            params = [];
            openParams();
            getToken();
            if (token != ")") {
              params.push(parseAssignment());
              while (token == ",") {
                getToken();
                params.push(parseAssignment());
              }
            }
            if (token != ")") {
              throw createSyntaxError("Parenthesis ) expected");
            }
            closeParams();
            getToken();
          }
          return new handler(params);
        }
        return parseSymbol();
      }
      function parseSymbol() {
        var node, name;
        if (token_type == TOKENTYPE.SYMBOL || token_type == TOKENTYPE.DELIMITER && token in NAMED_DELIMITERS) {
          name = token;
          getToken();
          node = new SymbolNode(name);
          node = parseAccessors(node);
          return node;
        }
        return parseString();
      }
      function parseAccessors(node, types) {
        var params;
        while ((token == "(" || token == "[" || token == ".") && (!types || types.indexOf(token) !== -1)) {
          params = [];
          if (token == "(") {
            if (node.isSymbolNode || node.isAccessorNode || node.isFunctionNode) {
              openParams();
              getToken();
              if (token != ")") {
                params.push(parseAssignment());
                while (token == ",") {
                  getToken();
                  params.push(parseAssignment());
                }
              }
              if (token != ")") {
                throw createSyntaxError("Parenthesis ) expected");
              }
              closeParams();
              getToken();
              node = new FunctionNode(node, params);
            } else {
              return node;
            }
          } else if (token == "[") {
            openParams();
            getToken();
            if (token != "]") {
              params.push(parseAssignment());
              while (token == ",") {
                getToken();
                params.push(parseAssignment());
              }
            }
            if (token != "]") {
              throw createSyntaxError("Parenthesis ] expected");
            }
            closeParams();
            getToken();
            node = new AccessorNode(node, new IndexNode(params));
          } else {
            getToken();
            if (token_type != TOKENTYPE.SYMBOL) {
              throw createSyntaxError("Property name expected after dot");
            }
            params.push(new ConstantNode(token));
            getToken();
            var dotNotation = true;
            node = new AccessorNode(node, new IndexNode(params, dotNotation));
          }
        }
        return node;
      }
      function parseString() {
        var node, str;
        if (token == '"') {
          str = parseStringToken();
          node = new ConstantNode(str, "string");
          node = parseAccessors(node);
          return node;
        }
        return parseMatrix();
      }
      function parseStringToken() {
        var str = "";
        while (c != "" && c != '"') {
          if (c == "\\") {
            str += c;
            next();
          }
          str += c;
          next();
        }
        getToken();
        if (token != '"') {
          throw createSyntaxError('End of string " expected');
        }
        getToken();
        return str;
      }
      function parseMatrix() {
        var array, params, rows, cols;
        if (token == "[") {
          openParams();
          getToken();
          if (token != "]") {
            var row = parseRow();
            if (token == ";") {
              rows = 1;
              params = [row];
              while (token == ";") {
                getToken();
                params[rows] = parseRow();
                rows++;
              }
              if (token != "]") {
                throw createSyntaxError("End of matrix ] expected");
              }
              closeParams();
              getToken();
              cols = params[0].items.length;
              for (var r = 1; r < rows; r++) {
                if (params[r].items.length != cols) {
                  throw createError("Column dimensions mismatch (" + params[r].items.length + " != " + cols + ")");
                }
              }
              array = new ArrayNode(params);
            } else {
              if (token != "]") {
                throw createSyntaxError("End of matrix ] expected");
              }
              closeParams();
              getToken();
              array = row;
            }
          } else {
            closeParams();
            getToken();
            array = new ArrayNode([]);
          }
          return parseAccessors(array);
        }
        return parseObject();
      }
      function parseRow() {
        var params = [parseAssignment()];
        var len = 1;
        while (token == ",") {
          getToken();
          params[len] = parseAssignment();
          len++;
        }
        return new ArrayNode(params);
      }
      function parseObject() {
        if (token == "{") {
          var key;
          var properties = {};
          do {
            getToken();
            if (token != "}") {
              if (token == '"') {
                key = parseStringToken();
              } else if (token_type == TOKENTYPE.SYMBOL) {
                key = token;
                getToken();
              } else {
                throw createSyntaxError("Symbol or string expected as object key");
              }
              if (token != ":") {
                throw createSyntaxError("Colon : expected after object key");
              }
              getToken();
              properties[key] = parseAssignment();
            }
          } while (token == ",");
          if (token != "}") {
            throw createSyntaxError("Comma , or bracket } expected after object value");
          }
          getToken();
          var node = new ObjectNode(properties);
          node = parseAccessors(node);
          return node;
        }
        return parseNumber();
      }
      function parseNumber() {
        var number;
        if (token_type == TOKENTYPE.NUMBER) {
          number = token;
          getToken();
          return new ConstantNode(number, "number");
        }
        return parseParentheses();
      }
      function parseParentheses() {
        var node;
        if (token == "(") {
          openParams();
          getToken();
          node = parseAssignment();
          if (token != ")") {
            throw createSyntaxError("Parenthesis ) expected");
          }
          closeParams();
          getToken();
          node = new ParenthesisNode(node);
          node = parseAccessors(node);
          return node;
        }
        return parseEnd();
      }
      function parseEnd() {
        if (token == "") {
          throw createSyntaxError("Unexpected end of expression");
        } else {
          throw createSyntaxError("Value expected");
        }
      }
      function col() {
        return index - token.length + 1;
      }
      function createSyntaxError(message) {
        var c2 = col();
        var error = new SyntaxError(message + " (char " + c2 + ")");
        error["char"] = c2;
        return error;
      }
      function createError(message) {
        var c2 = col();
        var error = new SyntaxError(message + " (char " + c2 + ")");
        error["char"] = c2;
        return error;
      }
      return parse;
    }
    exports.name = "parse";
    exports.path = "expression";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/function/compile.js
var require_compile = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/function/compile.js"(exports) {
    "use strict";
    var deepMap = require_deepMap();
    function factory(type, config, load, typed) {
      var parse = load(require_parse());
      return typed("compile", {
        "string": function(expr) {
          return parse(expr).compile();
        },
        "Array | Matrix": function(expr) {
          return deepMap(expr, function(entry) {
            return parse(entry).compile();
          });
        }
      });
    }
    exports.name = "compile";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/function/eval.js
var require_eval2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/function/eval.js"(exports) {
    "use strict";
    var deepMap = require_deepMap();
    function factory(type, config, load, typed) {
      var parse = load(require_parse());
      return typed("compile", {
        "string": function(expr) {
          var scope = {};
          return parse(expr).compile().eval(scope);
        },
        "string, Object": function(expr, scope) {
          return parse(expr).compile().eval(scope);
        },
        "Array | Matrix": function(expr) {
          var scope = {};
          return deepMap(expr, function(entry) {
            return parse(entry).compile().eval(scope);
          });
        },
        "Array | Matrix, Object": function(expr, scope) {
          return deepMap(expr, function(entry) {
            return parse(entry).compile().eval(scope);
          });
        }
      });
    }
    exports.name = "eval";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/function/help.js
var require_help2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/function/help.js"(exports) {
    "use strict";
    function factory(type, config, load, typed, math) {
      var docs = load(require_docs());
      return typed("help", {
        "any": function(search) {
          var prop;
          var name = search;
          if (typeof search !== "string") {
            for (prop in math) {
              if (math.hasOwnProperty(prop) && search === math[prop]) {
                name = prop;
                break;
              }
            }
          }
          var doc = docs[name];
          if (!doc) {
            throw new Error('No documentation found on "' + name + '"');
          }
          return new type.Help(doc);
        }
      });
    }
    exports.math = true;
    exports.name = "help";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/function/parse.js
var require_parse2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/function/parse.js"(exports) {
    "use strict";
    function factory(type, config, load, typed) {
      var parse = load(require_parse());
      return typed("parse", {
        "string | Array | Matrix": parse,
        "string | Array | Matrix, Object": parse
      });
    }
    exports.name = "parse";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/Parser.js
var require_Parser = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/Parser.js"(exports) {
    "use strict";
    var extend = require_object().extend;
    function factory(type, config, load, typed, math) {
      var _parse = load(require_parse());
      function Parser() {
        if (!(this instanceof Parser)) {
          throw new SyntaxError(
            "Constructor must be called with the new operator"
          );
        }
        this.scope = {};
      }
      Parser.prototype.type = "Parser";
      Parser.prototype.isParser = true;
      Parser.prototype.parse = function(expr) {
        throw new Error("Parser.parse is deprecated. Use math.parse instead.");
      };
      Parser.prototype.compile = function(expr) {
        throw new Error("Parser.compile is deprecated. Use math.compile instead.");
      };
      Parser.prototype.eval = function(expr) {
        return _parse(expr).compile().eval(this.scope);
      };
      Parser.prototype.get = function(name) {
        return this.scope[name];
      };
      Parser.prototype.getAll = function() {
        return extend({}, this.scope);
      };
      Parser.prototype.set = function(name, value) {
        return this.scope[name] = value;
      };
      Parser.prototype.remove = function(name) {
        delete this.scope[name];
      };
      Parser.prototype.clear = function() {
        for (var name in this.scope) {
          if (this.scope.hasOwnProperty(name)) {
            delete this.scope[name];
          }
        }
      };
      return Parser;
    }
    exports.name = "Parser";
    exports.path = "expression";
    exports.factory = factory;
    exports.math = true;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/function/parser.js
var require_parser = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/function/parser.js"(exports) {
    "use strict";
    function factory(type, config, load, typed, math) {
      var Parser = load(require_Parser());
      return typed("parser", {
        "": function() {
          return new Parser(math);
        }
      });
    }
    exports.name = "parser";
    exports.factory = factory;
    exports.math = true;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/function/index.js
var require_function3 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/function/index.js"(exports, module) {
    module.exports = [
      require_compile(),
      require_eval2(),
      require_help2(),
      require_parse2(),
      require_parser()
    ];
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/node/UpdateNode.js
var require_UpdateNode = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/node/UpdateNode.js"(exports) {
    "use strict";
    function factory(type, config, load, typed) {
      function UpdateNode() {
        throw new Error("UpdateNode is deprecated. Use AssignmentNode instead.");
      }
      return UpdateNode;
    }
    exports.name = "UpdateNode";
    exports.path = "expression.node";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/node/index.js
var require_node = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/node/index.js"(exports, module) {
    module.exports = [
      require_AccessorNode(),
      require_ArrayNode(),
      require_AssignmentNode(),
      require_BlockNode(),
      require_ConditionalNode(),
      require_ConstantNode(),
      require_IndexNode(),
      require_FunctionAssignmentNode(),
      require_FunctionNode(),
      require_Node(),
      require_ObjectNode(),
      require_OperatorNode(),
      require_ParenthesisNode(),
      require_RangeNode(),
      require_SymbolNode(),
      require_UpdateNode()
    ];
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/matrix/concat.js
var require_concat2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/matrix/concat.js"(exports) {
    "use strict";
    var clone = require_object().clone;
    var isInteger = require_number().isInteger;
    var array = require_array();
    var IndexError = require_IndexError();
    var DimensionError = require_DimensionError();
    function factory(type, config, load, typed) {
      var matrix = load(require_matrix());
      var concat = typed("concat", {
        // TODO: change signature to '...Array | Matrix, dim?' when supported
        "...Array | Matrix | number | BigNumber": function(args) {
          var i;
          var len = args.length;
          var dim = -1;
          var prevDim;
          var asMatrix = false;
          var matrices = [];
          for (i = 0; i < len; i++) {
            var arg = args[i];
            if (arg && arg.isMatrix === true) {
              asMatrix = true;
            }
            if (typeof arg === "number" || arg && arg.isBigNumber === true) {
              if (i !== len - 1) {
                throw new Error("Dimension must be specified as last argument");
              }
              prevDim = dim;
              dim = arg.valueOf();
              if (!isInteger(dim)) {
                throw new TypeError("Integer number expected for dimension");
              }
              if (dim < 0 || i > 0 && dim > prevDim) {
                throw new IndexError(dim, prevDim + 1);
              }
            } else {
              var m = clone(arg).valueOf();
              var size = array.size(m);
              matrices[i] = m;
              prevDim = dim;
              dim = size.length - 1;
              if (i > 0 && dim != prevDim) {
                throw new DimensionError(prevDim + 1, dim + 1);
              }
            }
          }
          if (matrices.length == 0) {
            throw new SyntaxError("At least one matrix expected");
          }
          var res = matrices.shift();
          while (matrices.length) {
            res = _concat(res, matrices.shift(), dim, 0);
          }
          return asMatrix ? matrix(res) : res;
        },
        "...string": function(args) {
          return args.join("");
        }
      });
      concat.toTex = void 0;
      return concat;
    }
    function _concat(a, b, concatDim, dim) {
      if (dim < concatDim) {
        if (a.length != b.length) {
          throw new DimensionError(a.length, b.length);
        }
        var c = [];
        for (var i = 0; i < a.length; i++) {
          c[i] = _concat(a[i], b[i], concatDim, dim + 1);
        }
        return c;
      } else {
        return a.concat(b);
      }
    }
    exports.name = "concat";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/transform/concat.transform.js
var require_concat_transform = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/transform/concat.transform.js"(exports) {
    "use strict";
    var errorTransform = require_error_transform().transform;
    function factory(type, config, load, typed) {
      var concat = load(require_concat2());
      return typed("concat", {
        "...any": function(args) {
          var lastIndex = args.length - 1;
          var last = args[lastIndex];
          if (typeof last === "number") {
            args[lastIndex] = last - 1;
          } else if (last && last.isBigNumber === true) {
            args[lastIndex] = last.minus(1);
          }
          try {
            return concat.apply(null, args);
          } catch (err) {
            throw errorTransform(err);
          }
        }
      });
    }
    exports.name = "concat";
    exports.path = "expression.transform";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/matrix/filter.js
var require_filter2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/matrix/filter.js"(exports) {
    "use strict";
    var size = require_array().size;
    var maxArgumentCount = require_function().maxArgumentCount;
    function factory(type, config, load, typed) {
      var matrix = load(require_matrix());
      var filter = typed("filter", {
        "Array, function": _filterCallback,
        "Array, RegExp": _filterRegExp,
        "Matrix, function": function(x, test) {
          return matrix(_filterCallback(x.toArray(), test));
        },
        "Matrix, RegExp": function(x, test) {
          return matrix(_filterRegExp(x.toArray(), test));
        }
      });
      filter.toTex = void 0;
      return filter;
    }
    function _filterCallback(x, callback) {
      if (size(x).length !== 1) {
        throw new Error("Only one dimensional matrices supported");
      }
      var args = maxArgumentCount(callback);
      return x.filter(function(value, index, array) {
        if (args === 1) {
          return callback(value);
        } else if (args === 2) {
          return callback(value, [index]);
        } else {
          return callback(value, [index], array);
        }
      });
    }
    function _filterRegExp(x, regexp) {
      if (size(x).length !== 1) {
        throw new Error("Only one dimensional matrices supported");
      }
      return x.filter(function(entry) {
        return regexp.test(entry);
      });
    }
    exports.name = "filter";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/transform/filter.transform.js
var require_filter_transform = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/transform/filter.transform.js"(exports) {
    "use strict";
    function factory(type, config, load, typed) {
      var filter = load(require_filter2());
      var SymbolNode = load(require_SymbolNode());
      function filterTransform(args, math, scope) {
        var x, test;
        if (args[0]) {
          x = args[0].compile().eval(scope);
        }
        if (args[1]) {
          if (args[1] && args[1].isSymbolNode) {
            test = args[1].compile().eval(scope);
          } else {
            var _scope = scope || {};
            var symbol = args[1].filter(function(node) {
              return node && node.isSymbolNode && !(node.name in math) && !(node.name in _scope);
            })[0];
            var sub = Object.create(_scope);
            var eq = args[1].compile();
            if (symbol) {
              var name = symbol.name;
              test = function(x2) {
                sub[name] = x2;
                return eq.eval(sub);
              };
            } else {
              throw new Error("No undefined variable found in filter equation");
            }
          }
        }
        return filter(x, test);
      }
      filterTransform.rawArgs = true;
      return filterTransform;
    }
    exports.name = "filter";
    exports.path = "expression.transform";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/matrix/forEach.js
var require_forEach2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/matrix/forEach.js"(exports) {
    "use strict";
    var maxArgumentCount = require_function().maxArgumentCount;
    function factory(type, config, load, typed) {
      var forEach = typed("forEach", {
        "Array, function": _forEach,
        "Matrix, function": function(x, callback) {
          return x.forEach(callback);
        }
      });
      forEach.toTex = void 0;
      return forEach;
    }
    function _forEach(array, callback) {
      var args = maxArgumentCount(callback);
      var recurse = function(value, index) {
        if (Array.isArray(value)) {
          value.forEach(function(child, i) {
            recurse(child, index.concat(i));
          });
        } else {
          if (args === 1) {
            callback(value);
          } else if (args === 2) {
            callback(value, index);
          } else {
            callback(value, index, array);
          }
        }
      };
      recurse(array, []);
    }
    exports.name = "forEach";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/transform/forEach.transform.js
var require_forEach_transform = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/transform/forEach.transform.js"(exports) {
    "use strict";
    var maxArgumentCount = require_function().maxArgumentCount;
    function factory(type, config, load, typed) {
      var forEach = load(require_forEach2());
      return typed("forEach", {
        "Array | Matrix, function": function(array, callback) {
          var args = maxArgumentCount(callback);
          var recurse = function(value, index) {
            if (Array.isArray(value)) {
              value.forEach(function(child, i) {
                recurse(child, index.concat(i + 1));
              });
            } else {
              if (args === 1) {
                callback(value);
              } else if (args === 2) {
                callback(value, index);
              } else {
                callback(value, index, array);
              }
            }
          };
          recurse(array.valueOf(), []);
        }
      });
    }
    exports.name = "forEach";
    exports.path = "expression.transform";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/transform/index.transform.js
var require_index_transform = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/transform/index.transform.js"(exports) {
    "use strict";
    function factory(type, config, load) {
      return function indexTransform() {
        var args = [];
        for (var i = 0, ii = arguments.length; i < ii; i++) {
          var arg = arguments[i];
          if (arg && arg.isRange === true) {
            arg.start--;
            arg.end -= arg.step > 0 ? 0 : 2;
          } else if (arg && arg.isSet === true) {
            arg = arg.map(function(v) {
              return v - 1;
            });
          } else if (arg && (arg.isArray === true || arg.isMatrix)) {
            arg = arg.map(function(v) {
              return v - 1;
            });
          } else if (typeof arg === "number") {
            arg--;
          } else if (arg && arg.isBigNumber === true) {
            arg = arg.toNumber() - 1;
          } else if (typeof arg === "string") {
          } else {
            throw new TypeError("Dimension must be an Array, Matrix, number, string, or Range");
          }
          args[i] = arg;
        }
        var res = new type.Index();
        type.Index.apply(res, args);
        return res;
      };
    }
    exports.name = "index";
    exports.path = "expression.transform";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/matrix/map.js
var require_map2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/matrix/map.js"(exports) {
    "use strict";
    var maxArgumentCount = require_function().maxArgumentCount;
    function factory(type, config, load, typed) {
      var map = typed("map", {
        "Array, function": _map,
        "Matrix, function": function(x, callback) {
          return x.map(callback);
        }
      });
      map.toTex = void 0;
      return map;
    }
    function _map(array, callback) {
      var args = maxArgumentCount(callback);
      var recurse = function(value, index) {
        if (Array.isArray(value)) {
          return value.map(function(child, i) {
            return recurse(child, index.concat(i));
          });
        } else {
          if (args === 1) {
            return callback(value);
          } else if (args === 2) {
            return callback(value, index);
          } else {
            return callback(value, index, array);
          }
        }
      };
      return recurse(array, []);
    }
    exports.name = "map";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/transform/map.transform.js
var require_map_transform = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/transform/map.transform.js"(exports) {
    "use strict";
    var maxArgumentCount = require_function().maxArgumentCount;
    function factory(type, config, load, typed) {
      var map = load(require_map2());
      var matrix = load(require_matrix());
      return typed("max", {
        "Array, function": function(x, callback) {
          return _map(x, callback, x);
        },
        "Matrix, function": function(x, callback) {
          return matrix(_map(x.valueOf(), callback, x));
        }
      });
    }
    function _map(array, callback, orig) {
      var args = maxArgumentCount(callback);
      function recurse(value, index) {
        if (Array.isArray(value)) {
          return value.map(function(child, i) {
            return recurse(child, index.concat(i + 1));
          });
        } else {
          if (args === 1) {
            return callback(value);
          } else if (args === 2) {
            return callback(value, index);
          } else {
            return callback(value, index, orig);
          }
        }
      }
      return recurse(array, []);
    }
    exports.name = "map";
    exports.path = "expression.transform";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/utils/collection/isCollection.js
var require_isCollection = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/utils/collection/isCollection.js"(exports, module) {
    "use strict";
    module.exports = function isCollection(x) {
      return Array.isArray(x) || x && x.isMatrix === true;
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/utils/collection/deepForEach.js
var require_deepForEach = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/utils/collection/deepForEach.js"(exports, module) {
    "use strict";
    module.exports = function deepForEach(array, callback) {
      if (array && array.isMatrix === true) {
        array = array.valueOf();
      }
      for (var i = 0, ii = array.length; i < ii; i++) {
        var value = array[i];
        if (Array.isArray(value)) {
          deepForEach(value, callback);
        } else {
          callback(value);
        }
      }
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/utils/collection/reduce.js
var require_reduce = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/utils/collection/reduce.js"(exports, module) {
    "use strict";
    var arraySize = require_array().size;
    var IndexError = require_IndexError();
    module.exports = function(mat, dim, callback) {
      var size = Array.isArray(mat) ? arraySize(mat) : mat.size();
      if (dim < 0 || dim >= size.length) {
        throw new IndexError(dim, size.length);
      }
      if (mat && mat.isMatrix === true) {
        return mat.create(_reduce(mat.valueOf(), dim, callback));
      } else {
        return _reduce(mat, dim, callback);
      }
    };
    function _reduce(mat, dim, callback) {
      var i, ret, val, tran;
      if (dim <= 0) {
        if (!Array.isArray(mat[0])) {
          val = mat[0];
          for (i = 1; i < mat.length; i++) {
            val = callback(val, mat[i]);
          }
          return val;
        } else {
          tran = _switch(mat);
          ret = [];
          for (i = 0; i < tran.length; i++) {
            ret[i] = _reduce(tran[i], dim - 1, callback);
          }
          return ret;
        }
      } else {
        ret = [];
        for (i = 0; i < mat.length; i++) {
          ret[i] = _reduce(mat[i], dim - 1, callback);
        }
        return ret;
      }
    }
    function _switch(mat) {
      var I = mat.length;
      var J = mat[0].length;
      var i, j;
      var ret = [];
      for (j = 0; j < J; j++) {
        var tmp = [];
        for (i = 0; i < I; i++) {
          tmp.push(mat[i][j]);
        }
        ret.push(tmp);
      }
      return ret;
    }
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/utils/collection/containsCollections.js
var require_containsCollections = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/utils/collection/containsCollections.js"(exports, module) {
    "use strict";
    var isCollection = require_isCollection();
    module.exports = function containsCollections(array) {
      for (var i = 0; i < array.length; i++) {
        if (isCollection(array[i])) {
          return true;
        }
      }
      return false;
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/statistics/max.js
var require_max2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/statistics/max.js"(exports) {
    "use strict";
    var deepForEach = require_deepForEach();
    var reduce = require_reduce();
    var containsCollections = require_containsCollections();
    function factory(type, config, load, typed) {
      var larger = load(require_larger());
      var max = typed("max", {
        // max([a, b, c, d, ...])
        "Array | Matrix": _max,
        // max([a, b, c, d, ...], dim)
        "Array | Matrix, number | BigNumber": function(array, dim) {
          return reduce(array, dim.valueOf(), _largest);
        },
        // max(a, b, c, d, ...)
        "...": function(args) {
          if (containsCollections(args)) {
            throw new TypeError("Scalar values expected in function max");
          }
          return _max(args);
        }
      });
      max.toTex = "\\max\\left(${args}\\right)";
      return max;
      function _largest(x, y) {
        return larger(x, y) ? x : y;
      }
      function _max(array) {
        var max2 = void 0;
        deepForEach(array, function(value) {
          if (max2 === void 0 || larger(value, max2)) {
            max2 = value;
          }
        });
        if (max2 === void 0) {
          throw new Error("Cannot calculate max of an empty array");
        }
        return max2;
      }
    }
    exports.name = "max";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/transform/max.transform.js
var require_max_transform = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/transform/max.transform.js"(exports) {
    "use strict";
    var errorTransform = require_error_transform().transform;
    var isCollection = require_isCollection();
    function factory(type, config, load, typed) {
      var max = load(require_max2());
      return typed("max", {
        "...any": function(args) {
          if (args.length == 2 && isCollection(args[0])) {
            var dim = args[1];
            if (typeof dim === "number") {
              args[1] = dim - 1;
            } else if (dim && dim.isBigNumber === true) {
              args[1] = dim.minus(1);
            }
          }
          try {
            return max.apply(null, args);
          } catch (err) {
            throw errorTransform(err);
          }
        }
      });
    }
    exports.name = "max";
    exports.path = "expression.transform";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/matrix/det.js
var require_det2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/matrix/det.js"(exports) {
    "use strict";
    var util = require_utils();
    var object = util.object;
    var string = util.string;
    function factory(type, config, load, typed) {
      var matrix = load(require_matrix());
      var add = load(require_add());
      var subtract = load(require_subtract());
      var multiply = load(require_multiply());
      var unaryMinus = load(require_unaryMinus());
      var det = typed("det", {
        "any": function(x) {
          return object.clone(x);
        },
        "Array | Matrix": function det2(x) {
          var size;
          if (x && x.isMatrix === true) {
            size = x.size();
          } else if (Array.isArray(x)) {
            x = matrix(x);
            size = x.size();
          } else {
            size = [];
          }
          switch (size.length) {
            case 0:
              return object.clone(x);
            case 1:
              if (size[0] == 1) {
                return object.clone(x.valueOf()[0]);
              } else {
                throw new RangeError("Matrix must be square (size: " + string.format(size) + ")");
              }
            case 2:
              var rows = size[0];
              var cols = size[1];
              if (rows == cols) {
                return _det(x.clone().valueOf(), rows, cols);
              } else {
                throw new RangeError("Matrix must be square (size: " + string.format(size) + ")");
              }
            default:
              throw new RangeError("Matrix must be two dimensional (size: " + string.format(size) + ")");
          }
        }
      });
      det.toTex = { 1: "\\det\\left(${args[0]}\\right)" };
      return det;
      function _det(matrix2, rows, cols) {
        if (rows == 1) {
          return object.clone(matrix2[0][0]);
        } else if (rows == 2) {
          return subtract(
            multiply(matrix2[0][0], matrix2[1][1]),
            multiply(matrix2[1][0], matrix2[0][1])
          );
        } else {
          var compute_mu = function(matrix3) {
            var i2, j;
            var mu = new Array(matrix3.length);
            var sum = 0;
            for (i2 = 1; i2 < matrix3.length; i2++) {
              sum = add(sum, matrix3[i2][i2]);
            }
            for (i2 = 0; i2 < matrix3.length; i2++) {
              mu[i2] = new Array(matrix3.length);
              mu[i2][i2] = unaryMinus(sum);
              for (j = 0; j < i2; j++) {
                mu[i2][j] = 0;
              }
              for (j = i2 + 1; j < matrix3.length; j++) {
                mu[i2][j] = matrix3[i2][j];
              }
              if (i2 + 1 < matrix3.length) {
                sum = subtract(sum, matrix3[i2 + 1][i2 + 1]);
              }
            }
            return mu;
          };
          var fa = matrix2;
          for (var i = 0; i < rows - 1; i++) {
            fa = multiply(compute_mu(fa), matrix2);
          }
          if (rows % 2 == 0) {
            return unaryMinus(fa[0][0]);
          } else {
            return fa[0][0];
          }
        }
      }
    }
    exports.name = "det";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/matrix/inv.js
var require_inv2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/matrix/inv.js"(exports) {
    "use strict";
    var util = require_utils();
    function factory(type, config, load, typed) {
      var matrix = load(require_matrix());
      var divideScalar = load(require_divideScalar());
      var addScalar = load(require_addScalar());
      var multiply = load(require_multiply());
      var unaryMinus = load(require_unaryMinus());
      var det = load(require_det2());
      var eye = load(require_eye());
      var inv = typed("inv", {
        "Array | Matrix": function(x) {
          var size = x.isMatrix === true ? x.size() : util.array.size(x);
          switch (size.length) {
            case 1:
              if (size[0] == 1) {
                if (x.isMatrix === true) {
                  return matrix([
                    divideScalar(1, x.valueOf()[0])
                  ]);
                } else {
                  return [
                    divideScalar(1, x[0])
                  ];
                }
              } else {
                throw new RangeError("Matrix must be square (size: " + util.string.format(size) + ")");
              }
            case 2:
              var rows = size[0];
              var cols = size[1];
              if (rows == cols) {
                if (x.isMatrix === true) {
                  return matrix(
                    _inv(x.valueOf(), rows, cols),
                    x.storage()
                  );
                } else {
                  return _inv(x, rows, cols);
                }
              } else {
                throw new RangeError("Matrix must be square (size: " + util.string.format(size) + ")");
              }
            default:
              throw new RangeError("Matrix must be two dimensional (size: " + util.string.format(size) + ")");
          }
        },
        "any": function(x) {
          return divideScalar(1, x);
        }
      });
      function _inv(mat, rows, cols) {
        var r, s, f, value, temp;
        if (rows == 1) {
          value = mat[0][0];
          if (value == 0) {
            throw Error("Cannot calculate inverse, determinant is zero");
          }
          return [[
            divideScalar(1, value)
          ]];
        } else if (rows == 2) {
          var d = det(mat);
          if (d == 0) {
            throw Error("Cannot calculate inverse, determinant is zero");
          }
          return [
            [
              divideScalar(mat[1][1], d),
              divideScalar(unaryMinus(mat[0][1]), d)
            ],
            [
              divideScalar(unaryMinus(mat[1][0]), d),
              divideScalar(mat[0][0], d)
            ]
          ];
        } else {
          var A = mat.concat();
          for (r = 0; r < rows; r++) {
            A[r] = A[r].concat();
          }
          var B = eye(rows).valueOf();
          for (var c = 0; c < cols; c++) {
            r = c;
            while (r < rows && A[r][c] == 0) {
              r++;
            }
            if (r == rows || A[r][c] == 0) {
              throw Error("Cannot calculate inverse, determinant is zero");
            }
            if (r != c) {
              temp = A[c];
              A[c] = A[r];
              A[r] = temp;
              temp = B[c];
              B[c] = B[r];
              B[r] = temp;
            }
            var Ac = A[c], Bc = B[c];
            for (r = 0; r < rows; r++) {
              var Ar = A[r], Br = B[r];
              if (r != c) {
                if (Ar[c] != 0) {
                  f = divideScalar(unaryMinus(Ar[c]), Ac[c]);
                  for (s = c; s < cols; s++) {
                    Ar[s] = addScalar(Ar[s], multiply(f, Ac[s]));
                  }
                  for (s = 0; s < cols; s++) {
                    Br[s] = addScalar(Br[s], multiply(f, Bc[s]));
                  }
                }
              } else {
                f = Ac[c];
                for (s = c; s < cols; s++) {
                  Ar[s] = divideScalar(Ar[s], f);
                }
                for (s = 0; s < cols; s++) {
                  Br[s] = divideScalar(Br[s], f);
                }
              }
            }
          }
          return B;
        }
      }
      inv.toTex = { 1: "\\left(${args[0]}\\right)^{-1}" };
      return inv;
    }
    exports.name = "inv";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/arithmetic/divide.js
var require_divide2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/arithmetic/divide.js"(exports) {
    "use strict";
    var extend = require_object().extend;
    function factory(type, config, load, typed) {
      var divideScalar = load(require_divideScalar());
      var multiply = load(require_multiply());
      var inv = load(require_inv2());
      var matrix = load(require_matrix());
      var algorithm11 = load(require_algorithm11());
      var algorithm14 = load(require_algorithm14());
      var divide = typed("divide", extend({
        // we extend the signatures of divideScalar with signatures dealing with matrices
        "Array | Matrix, Array | Matrix": function(x, y) {
          return multiply(x, inv(y));
        },
        "Matrix, any": function(x, y) {
          var c;
          switch (x.storage()) {
            case "sparse":
              c = algorithm11(x, y, divideScalar, false);
              break;
            case "dense":
              c = algorithm14(x, y, divideScalar, false);
              break;
          }
          return c;
        },
        "Array, any": function(x, y) {
          return algorithm14(matrix(x), y, divideScalar, false).valueOf();
        },
        "any, Array | Matrix": function(x, y) {
          return multiply(x, inv(y));
        }
      }, divideScalar.signatures));
      divide.toTex = { 2: "\\frac{${args[0]}}{${args[1]}}" };
      return divide;
    }
    exports.name = "divide";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/statistics/mean.js
var require_mean2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/statistics/mean.js"(exports) {
    "use strict";
    var size = require_array().size;
    var deepForEach = require_deepForEach();
    var reduce = require_reduce();
    var containsCollections = require_containsCollections();
    function factory(type, config, load, typed) {
      var add = load(require_add());
      var divide = load(require_divide2());
      var mean = typed("mean", {
        // mean([a, b, c, d, ...])
        "Array | Matrix": _mean,
        // mean([a, b, c, d, ...], dim)
        "Array | Matrix, number | BigNumber": _nmean,
        // mean(a, b, c, d, ...)
        "...": function(args) {
          if (containsCollections(args)) {
            throw new TypeError("Scalar values expected in function mean");
          }
          return _mean(args);
        }
      });
      mean.toTex = void 0;
      return mean;
      function _nmean(array, dim) {
        var sum = reduce(array, dim, add);
        var s = Array.isArray(array) ? size(array) : array.size();
        return divide(sum, s[dim]);
      }
      function _mean(array) {
        var sum = 0;
        var num = 0;
        deepForEach(array, function(value) {
          sum = add(sum, value);
          num++;
        });
        if (num === 0) {
          throw new Error("Cannot calculate mean of an empty array");
        }
        return divide(sum, num);
      }
    }
    exports.name = "mean";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/transform/mean.transform.js
var require_mean_transform = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/transform/mean.transform.js"(exports) {
    "use strict";
    var errorTransform = require_error_transform().transform;
    var isCollection = require_isCollection();
    function factory(type, config, load, typed) {
      var mean = load(require_mean2());
      return typed("mean", {
        "...any": function(args) {
          if (args.length == 2 && isCollection(args[0])) {
            var dim = args[1];
            if (typeof dim === "number") {
              args[1] = dim - 1;
            } else if (dim && dim.isBigNumber === true) {
              args[1] = dim.minus(1);
            }
          }
          try {
            return mean.apply(null, args);
          } catch (err) {
            throw errorTransform(err);
          }
        }
      });
    }
    exports.name = "mean";
    exports.path = "expression.transform";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/statistics/min.js
var require_min2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/statistics/min.js"(exports) {
    "use strict";
    var deepForEach = require_deepForEach();
    var reduce = require_reduce();
    var containsCollections = require_containsCollections();
    function factory(type, config, load, typed) {
      var smaller = load(require_smaller());
      var min = typed("min", {
        // min([a, b, c, d, ...])
        "Array | Matrix": _min,
        // min([a, b, c, d, ...], dim)
        "Array | Matrix, number | BigNumber": function(array, dim) {
          return reduce(array, dim.valueOf(), _smallest);
        },
        // min(a, b, c, d, ...)
        "...": function(args) {
          if (containsCollections(args)) {
            throw new TypeError("Scalar values expected in function min");
          }
          return _min(args);
        }
      });
      min.toTex = "\\min\\left(${args}\\right)";
      return min;
      function _smallest(x, y) {
        return smaller(x, y) ? x : y;
      }
      function _min(array) {
        var min2 = void 0;
        deepForEach(array, function(value) {
          if (min2 === void 0 || smaller(value, min2)) {
            min2 = value;
          }
        });
        if (min2 === void 0) {
          throw new Error("Cannot calculate min of an empty array");
        }
        return min2;
      }
    }
    exports.name = "min";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/transform/min.transform.js
var require_min_transform = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/transform/min.transform.js"(exports) {
    "use strict";
    var errorTransform = require_error_transform().transform;
    var isCollection = require_isCollection();
    function factory(type, config, load, typed) {
      var min = load(require_min2());
      return typed("min", {
        "...any": function(args) {
          if (args.length == 2 && isCollection(args[0])) {
            var dim = args[1];
            if (typeof dim === "number") {
              args[1] = dim - 1;
            } else if (dim && dim.isBigNumber === true) {
              args[1] = dim.minus(1);
            }
          }
          try {
            return min.apply(null, args);
          } catch (err) {
            throw errorTransform(err);
          }
        }
      });
    }
    exports.name = "min";
    exports.path = "expression.transform";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/matrix/range.js
var require_range2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/matrix/range.js"(exports) {
    "use strict";
    function factory(type, config, load, typed) {
      var matrix = load(require_matrix());
      var ZERO = new type.BigNumber(0);
      var ONE = new type.BigNumber(1);
      var range = typed("range", {
        // TODO: simplify signatures when typed-function supports default values and optional arguments
        // TODO: a number or boolean should not be converted to string here
        "string": _strRange,
        "string, boolean": _strRange,
        "number, number": function(start, end) {
          return _out(_rangeEx(start, end, 1));
        },
        "number, number, number": function(start, end, step) {
          return _out(_rangeEx(start, end, step));
        },
        "number, number, boolean": function(start, end, includeEnd) {
          return includeEnd ? _out(_rangeInc(start, end, 1)) : _out(_rangeEx(start, end, 1));
        },
        "number, number, number, boolean": function(start, end, step, includeEnd) {
          return includeEnd ? _out(_rangeInc(start, end, step)) : _out(_rangeEx(start, end, step));
        },
        "BigNumber, BigNumber": function(start, end) {
          return _out(_bigRangeEx(start, end, ONE));
        },
        "BigNumber, BigNumber, BigNumber": function(start, end, step) {
          return _out(_bigRangeEx(start, end, step));
        },
        "BigNumber, BigNumber, boolean": function(start, end, includeEnd) {
          return includeEnd ? _out(_bigRangeInc(start, end, ONE)) : _out(_bigRangeEx(start, end, ONE));
        },
        "BigNumber, BigNumber, BigNumber, boolean": function(start, end, step, includeEnd) {
          return includeEnd ? _out(_bigRangeInc(start, end, step)) : _out(_bigRangeEx(start, end, step));
        }
      });
      range.toTex = void 0;
      return range;
      function _out(arr) {
        return config.matrix === "Array" ? arr : matrix(arr);
      }
      function _strRange(str, includeEnd) {
        var r = _parse(str);
        if (!r) {
          throw new SyntaxError('String "' + str + '" is no valid range');
        }
        var fn;
        if (config.number === "BigNumber") {
          fn = includeEnd ? _bigRangeInc : _bigRangeEx;
          return _out(fn(
            new type.BigNumber(r.start),
            new type.BigNumber(r.end),
            new type.BigNumber(r.step)
          ));
        } else {
          fn = includeEnd ? _rangeInc : _rangeEx;
          return _out(fn(r.start, r.end, r.step));
        }
      }
      function _rangeEx(start, end, step) {
        var array = [], x = start;
        if (step > 0) {
          while (x < end) {
            array.push(x);
            x += step;
          }
        } else if (step < 0) {
          while (x > end) {
            array.push(x);
            x += step;
          }
        }
        return array;
      }
      function _rangeInc(start, end, step) {
        var array = [], x = start;
        if (step > 0) {
          while (x <= end) {
            array.push(x);
            x += step;
          }
        } else if (step < 0) {
          while (x >= end) {
            array.push(x);
            x += step;
          }
        }
        return array;
      }
      function _bigRangeEx(start, end, step) {
        var array = [], x = start;
        if (step.gt(ZERO)) {
          while (x.lt(end)) {
            array.push(x);
            x = x.plus(step);
          }
        } else if (step.lt(ZERO)) {
          while (x.gt(end)) {
            array.push(x);
            x = x.plus(step);
          }
        }
        return array;
      }
      function _bigRangeInc(start, end, step) {
        var array = [], x = start;
        if (step.gt(ZERO)) {
          while (x.lte(end)) {
            array.push(x);
            x = x.plus(step);
          }
        } else if (step.lt(ZERO)) {
          while (x.gte(end)) {
            array.push(x);
            x = x.plus(step);
          }
        }
        return array;
      }
      function _parse(str) {
        var args = str.split(":");
        var nums = args.map(function(arg) {
          return Number(arg);
        });
        var invalid = nums.some(function(num) {
          return isNaN(num);
        });
        if (invalid) {
          return null;
        }
        switch (nums.length) {
          case 2:
            return {
              start: nums[0],
              end: nums[1],
              step: 1
            };
          case 3:
            return {
              start: nums[0],
              end: nums[2],
              step: nums[1]
            };
          default:
            return null;
        }
      }
    }
    exports.name = "range";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/transform/range.transform.js
var require_range_transform = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/transform/range.transform.js"(exports) {
    "use strict";
    function factory(type, config, load, typed) {
      var range = load(require_range2());
      return typed("range", {
        "...any": function(args) {
          var lastIndex = args.length - 1;
          var last = args[lastIndex];
          if (typeof last !== "boolean") {
            args.push(true);
          }
          return range.apply(null, args);
        }
      });
    }
    exports.name = "range";
    exports.path = "expression.transform";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/transform/subset.transform.js
var require_subset_transform = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/transform/subset.transform.js"(exports) {
    "use strict";
    var errorTransform = require_error_transform().transform;
    function factory(type, config, load, typed) {
      var subset = load(require_subset2());
      return typed("subset", {
        "...any": function(args) {
          try {
            return subset.apply(null, args);
          } catch (err) {
            throw errorTransform(err);
          }
        }
      });
    }
    exports.name = "subset";
    exports.path = "expression.transform";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/transform/index.js
var require_transform = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/transform/index.js"(exports, module) {
    module.exports = [
      require_concat_transform(),
      require_filter_transform(),
      require_forEach_transform(),
      require_index_transform(),
      require_map_transform(),
      require_max_transform(),
      require_mean_transform(),
      require_min_transform(),
      require_range_transform(),
      require_subset_transform()
    ];
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/Help.js
var require_Help = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/Help.js"(exports) {
    "use strict";
    var object = require_object();
    var string = require_string();
    function factory(type, config, load, typed) {
      var parser = load(require_parser())();
      function Help(doc) {
        if (!(this instanceof Help)) {
          throw new SyntaxError("Constructor must be called with the new operator");
        }
        if (!doc) throw new Error('Argument "doc" missing');
        this.doc = doc;
      }
      Help.prototype.type = "Help";
      Help.prototype.isHelp = true;
      Help.prototype.toString = function() {
        var doc = this.doc || {};
        var desc = "\n";
        if (doc.name) {
          desc += "Name: " + doc.name + "\n\n";
        }
        if (doc.category) {
          desc += "Category: " + doc.category + "\n\n";
        }
        if (doc.description) {
          desc += "Description:\n    " + doc.description + "\n\n";
        }
        if (doc.syntax) {
          desc += "Syntax:\n    " + doc.syntax.join("\n    ") + "\n\n";
        }
        if (doc.examples) {
          desc += "Examples:\n";
          for (var i = 0; i < doc.examples.length; i++) {
            var expr = doc.examples[i];
            desc += "    " + expr + "\n";
            var res;
            try {
              res = parser.eval(expr);
            } catch (e) {
              res = e;
            }
            if (res && !res.isHelp) {
              desc += "        " + string.format(res, { precision: 14 }) + "\n";
            }
          }
          desc += "\n";
        }
        if (doc.seealso) {
          desc += "See also: " + doc.seealso.join(", ") + "\n";
        }
        return desc;
      };
      Help.prototype.toJSON = function() {
        var obj = object.clone(this.doc);
        obj.mathjs = "Help";
        return obj;
      };
      Help.fromJSON = function(json) {
        var doc = {};
        for (var prop in json) {
          if (prop !== "mathjs") {
            doc[prop] = json[prop];
          }
        }
        return new Help(doc);
      };
      Help.prototype.valueOf = Help.prototype.toString;
      return Help;
    }
    exports.name = "Help";
    exports.path = "type";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/expression/index.js
var require_expression = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/expression/index.js"(exports, module) {
    module.exports = [
      require_docs(),
      require_function3(),
      require_node(),
      require_transform(),
      require_Help(),
      require_parse(),
      require_Parser()
    ];
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/algebra/simplify/util.js
var require_util = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/algebra/simplify/util.js"(exports) {
    "use strict";
    function factory(type, config, load, typed, math) {
      var FunctionNode = math.expression.node.FunctionNode;
      var OperatorNode = math.expression.node.OperatorNode;
      var SymbolNode = math.expression.node.SymbolNode;
      var commutative = {
        "add": true,
        "multiply": true
      };
      var associative = {
        "add": true,
        "multiply": true
      };
      function isCommutative(node, context) {
        if (!node.args || node.args.length <= 1) {
          return true;
        }
        var name = node.fn.toString();
        if (context && context.hasOwnProperty(name) && context[name].hasOwnProperty("commutative")) {
          return context[name].commutative;
        }
        return commutative[name] || false;
      }
      function isAssociative(node, context) {
        if (!node.args || node.args.length <= 1) {
          return true;
        }
        var name = node.fn.toString();
        if (context && context.hasOwnProperty(name) && context[name].hasOwnProperty("associative")) {
          return context[name].associative;
        }
        return associative[name] || false;
      }
      function flatten(node) {
        if (!node.args || node.args.length === 0) {
          return node;
        }
        node.args = allChildren(node);
        for (var i = 0; i < node.args.length; i++) {
          flatten(node.args[i]);
        }
      }
      function allChildren(node) {
        var op;
        var children = [];
        var findChildren = function(node2) {
          for (var i = 0; i < node2.args.length; i++) {
            var child = node2.args[i];
            if (child.isOperatorNode && op === child.op) {
              findChildren(child);
            } else {
              children.push(child);
            }
          }
        };
        if (node.isOperatorNode && isAssociative(node)) {
          op = node.op;
          findChildren(node);
          return children;
        } else {
          return node.args;
        }
      }
      function unflattenr(node) {
        if (!node.args || node.args.length === 0) {
          return;
        }
        var makeNode = createMakeNodeFunction(node);
        var l = node.args.length;
        for (var i = 0; i < l; i++) {
          unflattenr(node.args[i]);
        }
        if (l > 2 && isAssociative(node)) {
          var curnode = node.args.pop();
          while (node.args.length > 0) {
            curnode = makeNode([node.args.pop(), curnode]);
          }
          node.args = curnode.args;
        }
      }
      function unflattenl(node) {
        if (!node.args || node.args.length === 0) {
          return;
        }
        var makeNode = createMakeNodeFunction(node);
        var l = node.args.length;
        for (var i = 0; i < l; i++) {
          unflattenl(node.args[i]);
        }
        if (l > 2 && isAssociative(node)) {
          var curnode = node.args.shift();
          while (node.args.length > 0) {
            curnode = makeNode([curnode, node.args.shift()]);
          }
          node.args = curnode.args;
        }
      }
      function createMakeNodeFunction(node) {
        if (node.isOperatorNode) {
          return function(args) {
            try {
              return new OperatorNode(node.op, node.fn, args);
            } catch (err) {
              console.error(err);
              return [];
            }
          };
        } else {
          return function(args) {
            return new FunctionNode(new SymbolNode(node.name), args);
          };
        }
      }
      return {
        createMakeNodeFunction,
        isCommutative,
        isAssociative,
        flatten,
        allChildren,
        unflattenr,
        unflattenl
      };
    }
    exports.factory = factory;
    exports.math = true;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/algebra/simplify/simplifyConstant.js
var require_simplifyConstant = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/algebra/simplify/simplifyConstant.js"(exports) {
    "use strict";
    var digits = require_number().digits;
    function factory(type, config, load, typed, math) {
      var util = load(require_util());
      var isCommutative = util.isCommutative;
      var isAssociative = util.isAssociative;
      var allChildren = util.allChildren;
      var createMakeNodeFunction = util.createMakeNodeFunction;
      var ConstantNode = math.expression.node.ConstantNode;
      var OperatorNode = math.expression.node.OperatorNode;
      function simplifyConstant(expr) {
        var res = foldFraction(expr);
        return res.isNode ? res : _toNode(res);
      }
      function _eval(fnname, args) {
        try {
          return _toNumber(math[fnname].apply(null, args));
        } catch (ignore) {
          args = args.map(function(x) {
            return x.valueOf();
          });
          return _toNumber(math[fnname].apply(null, args));
        }
      }
      var _toNode = typed({
        "Fraction": _fractionToNode,
        "number": _numberToNode,
        "BigNumber": function(s) {
          return _numberToNode(s._toNumber());
        },
        "Complex": function(s) {
          throw "Cannot convert Complex number to Node";
        }
      });
      var _toNumber = typed({
        "Fraction": function(s) {
          return s;
        },
        "BigNumber": function(s) {
          if (s.decimalPlaces() <= 15) {
            return math.fraction(s.toNumber());
          }
          return s.toNumber();
        },
        "number": function(s) {
          if (digits(s) <= 15) {
            return math.fraction(s);
          }
          return s;
        },
        "Complex": function(s) {
          if (s.im !== 0) {
            return s;
          }
          if (digits(s.re) <= 15) {
            return math.fraction(s.re);
          }
          return s.re;
        }
      });
      function _numberToNode(n) {
        if (n < 0) {
          return new OperatorNode("-", "unaryMinus", [new ConstantNode(-n)]);
        }
        return new ConstantNode(n);
      }
      function _fractionToNode(f) {
        var n;
        var vn = f.s * f.n;
        if (vn < 0) {
          n = new OperatorNode("-", "unaryMinus", [new ConstantNode(-vn)]);
        } else {
          n = new ConstantNode(vn);
        }
        if (f.d === 1) {
          return n;
        }
        return new OperatorNode("/", "divide", [n, new ConstantNode(f.d)]);
      }
      function foldOp(fn, args, makeNode) {
        return args.reduce(function(a, b) {
          if (!a.isNode && !b.isNode) {
            try {
              return _eval(fn, [a, b]);
            } catch (ignoreandcontinue) {
            }
            a = _toNode(a);
            b = _toNode(b);
          } else if (!a.isNode) {
            a = _toNode(a);
          } else if (!b.isNode) {
            b = _toNode(b);
          }
          return makeNode([a, b]);
        });
      }
      function foldFraction(node) {
        switch (node.type) {
          case "SymbolNode":
            return node;
          case "ConstantNode":
            return _toNumber(node.value);
          case "FunctionNode":
            if (math[node.name] && math[node.name].rawArgs) {
              return node;
            }
          case "OperatorNode":
            var fn = node.fn.toString();
            var args;
            var res;
            var makeNode = createMakeNodeFunction(node);
            if (node.args.length === 1) {
              args = [foldFraction(node.args[0])];
              if (!args[0].isNode) {
                res = _eval(fn, args);
              } else {
                res = makeNode(args);
              }
            } else if (isAssociative(node)) {
              args = allChildren(node);
              args = args.map(foldFraction);
              if (isCommutative(fn)) {
                var consts = [], vars = [];
                for (var i = 0; i < args.length; i++) {
                  if (!args[i].isNode) {
                    consts.push(args[i]);
                  } else {
                    vars.push(args[i]);
                  }
                }
                if (consts.length > 1) {
                  res = foldOp(fn, consts, makeNode);
                  vars.unshift(res);
                  res = foldOp(fn, vars, makeNode);
                } else {
                  res = foldOp(fn, args, makeNode);
                }
              } else {
                res = foldOp(fn, args, makeNode);
              }
            } else {
              args = node.args.map(foldFraction);
              res = foldOp(fn, args, makeNode);
            }
            return res;
          case "ParenthesisNode":
            return foldFraction(node.content);
          case "AccessorNode":
          case "ArrayNode":
          case "AssignmentNode":
          case "BlockNode":
          case "FunctionAssignmentNode":
          case "IndexNode":
          case "ObjectNode":
          case "RangeNode":
          case "UpdateNode":
          case "ConditionalNode":
          default:
            throw "Unimplemented node type in simplifyConstant: " + node.type;
        }
      }
      return simplifyConstant;
    }
    exports.math = true;
    exports.name = "simplifyConstant";
    exports.path = "algebra.simplify";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/algebra/simplify.js
var require_simplify2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/algebra/simplify.js"(exports) {
    "use strict";
    function factory(type, config, load, typed) {
      var parse = load(require_parse());
      var ConstantNode = load(require_ConstantNode());
      var FunctionNode = load(require_FunctionNode());
      var OperatorNode = load(require_OperatorNode());
      var ParenthesisNode = load(require_ParenthesisNode());
      var SymbolNode = load(require_SymbolNode());
      var Node = load(require_Node());
      var simplifyConstant = load(require_simplifyConstant());
      var util = load(require_util());
      var isCommutative = util.isCommutative;
      var isAssociative = util.isAssociative;
      var flatten = util.flatten;
      var unflattenr = util.unflattenr;
      var unflattenl = util.unflattenl;
      var createMakeNodeFunction = util.createMakeNodeFunction;
      var simplify = typed("simplify", {
        "string": function(expr) {
          return simplify(parse(expr), simplify.rules);
        },
        "string, Array": function(expr, rules) {
          return simplify(parse(expr), rules);
        },
        "Node": function(expr) {
          return simplify(expr, simplify.rules);
        },
        "Node, Array": function(expr, rules) {
          rules = _buildRules(rules);
          var res = removeParens(expr);
          var after = res.toString({ parenthesis: "all" });
          var before = null;
          while (before != after) {
            lastsym = 0;
            before = after;
            for (var i = 0; i < rules.length; i++) {
              if (typeof rules[i] === "function") {
                res = rules[i](res);
              } else {
                flatten(res);
                res = applyRule(res, rules[i]);
              }
              unflattenl(res);
            }
            after = res.toString({ parenthesis: "all" });
          }
          return res;
        }
      });
      function removeParens(node) {
        return node.transform(function(node2, path, parent) {
          if (node2.isParenthesisNode) {
            return node2.content;
          } else {
            return node2;
          }
        });
      }
      simplify.rules = [
        { l: "n^0", r: "1" },
        { l: "0*n", r: "0" },
        { l: "n/n", r: "1" },
        { l: "n^1", r: "n" },
        { l: "+n1", r: "n1" },
        { l: "n--n1", r: "n+n1" },
        { l: "log(e)", r: "1" },
        // temporary rules
        { l: "n-n1", r: "n+-n1" },
        // temporarily replace 'subtract' so we can further flatten the 'add' operator
        { l: "-(c*C)", r: "(-c) * C" },
        // make non-constant terms positive
        { l: "-C", r: "(-1) * C" },
        { l: "n/n1^n2", r: "n*n1^-n2" },
        // temporarily replace 'divide' so we can further flatten the 'multiply' operator
        { l: "n/n1", r: "n*n1^-1" },
        // collect like factors
        { l: "n*n", r: "n^2" },
        { l: "n * n^n1", r: "n^(n1+1)" },
        { l: "n^n1 * n^n2", r: "n^(n1+n2)" },
        // collect like terms
        { l: "n+n", r: "2*n" },
        { l: "n+-n", r: "0" },
        { l: "n1*n2 + n2", r: "(n1+1)*n2" },
        { l: "n1*n3 + n2*n3", r: "(n1+n2)*n3" },
        simplifyConstant,
        { l: "(-n)*n1", r: "-(n*n1)" },
        // make factors positive (and undo 'make non-constant terms positive')
        // ordering of constants
        { l: "c+C", r: "C+c", context: { "add": { commutative: false } } },
        { l: "C*c", r: "c*C", context: { "multiply": { commutative: false } } },
        // undo temporary rules
        { l: "(-1) * n", r: "-n" },
        { l: "n+-n1", r: "n-n1" },
        // undo replace 'subtract'
        { l: "n*(n1^-1)", r: "n/n1" },
        // undo replace 'divide'
        { l: "n*n1^-n2", r: "n/n1^n2" },
        { l: "n1^-1", r: "1/n1" },
        { l: "n*(n1/n2)", r: "(n*n1)/n2" },
        // '*' before '/'
        { l: "n-(n1+n2)", r: "n-n1-n2" },
        // '-' before '+'
        // { l: '(n1/n2)/n3', r: 'n1/(n2*n3)' },
        // { l: '(n*n1)/(n*n2)', r: 'n1/n2' },
        { l: "1*n", r: "n" }
        // this pattern can be produced by simplifyConstant
      ];
      function _buildRules(rules) {
        var ruleSet = [];
        for (var i = 0; i < rules.length; i++) {
          var rule = rules[i];
          var newRule;
          var ruleType = typeof rule;
          switch (ruleType) {
            case "string":
              var lr = rule.split("->");
              if (lr.length !== 2) {
                throw SyntaxError("Could not parse rule: " + rule);
              }
              rule = { l: lr[0], r: lr[1] };
            case "object":
              newRule = {
                l: removeParens(parse(rule.l)),
                r: removeParens(parse(rule.r))
              };
              if (rule.context) {
                newRule.evaluate = rule.context;
              }
              if (rule.evaluate) {
                newRule.evaluate = parse(rule.evaluate);
              }
              if (newRule.l.isOperatorNode && isAssociative(newRule.l)) {
                var makeNode = createMakeNodeFunction(newRule.l);
                var expandsym = _getExpandPlaceholderSymbol();
                newRule.expanded = {};
                newRule.expanded.l = makeNode([newRule.l.clone(), expandsym]);
                flatten(newRule.expanded.l);
                unflattenr(newRule.expanded.l);
                newRule.expanded.r = makeNode([newRule.r, expandsym]);
              }
              break;
            case "function":
              newRule = rule;
              break;
            default:
              throw TypeError("Unsupported type of rule: " + ruleType);
          }
          ruleSet.push(newRule);
        }
        return ruleSet;
      }
      var lastsym = 0;
      function _getExpandPlaceholderSymbol() {
        return new SymbolNode("_p" + lastsym++);
      }
      var applyRule = typed("applyRule", {
        "Node, Object": function(node, rule) {
          var res = node;
          if (res instanceof OperatorNode || res instanceof FunctionNode) {
            if (res.args) {
              for (var i = 0; i < res.args.length; i++) {
                res.args[i] = applyRule(res.args[i], rule);
              }
            }
          } else if (res instanceof ParenthesisNode) {
            if (res.content) {
              res.content = applyRule(res.content, rule);
            }
          }
          var repl = rule.r;
          var matches = _ruleMatch(rule.l, res)[0];
          if (!matches && rule.expanded) {
            repl = rule.expanded.r;
            matches = _ruleMatch(rule.expanded.l, res)[0];
          }
          if (matches) {
            res = repl.clone();
            res = res.transform(function(n, path, parent) {
              if (n.isSymbolNode) {
                if (matches.placeholders.hasOwnProperty(n.name)) {
                  var replace = matches.placeholders[n.name].clone();
                  return replace;
                }
              }
              return n;
            });
          }
          return res;
        }
      });
      function getSplits(node, context) {
        var res = [];
        var right, rightArgs;
        var makeNode = createMakeNodeFunction(node);
        if (isCommutative(node, context)) {
          for (var i = 0; i < node.args.length; i++) {
            rightArgs = node.args.slice(0);
            rightArgs.splice(i, 1);
            right = rightArgs.length === 1 ? rightArgs[0] : makeNode(rightArgs);
            res.push(makeNode([node.args[i], right]));
          }
        } else {
          rightArgs = node.args.slice(1);
          right = rightArgs.length === 1 ? rightArgs[0] : makeNode(rightArgs);
          res.push(makeNode([node.args[0], right]));
        }
        return res;
      }
      function mergeMatch(match1, match2) {
        var res = { placeholders: {} };
        if (!match1.placeholders && !match2.placeholders) {
          return res;
        } else if (!match1.placeholders) {
          return match2;
        } else if (!match2.placeholders) {
          return match1;
        }
        for (var key in match1.placeholders) {
          res.placeholders[key] = match1.placeholders[key];
          if (match2.placeholders.hasOwnProperty(key)) {
            if (!_exactMatch(match1.placeholders[key], match2.placeholders[key])) {
              return null;
            }
          }
        }
        for (var key in match2.placeholders) {
          res.placeholders[key] = match2.placeholders[key];
        }
        return res;
      }
      function combineChildMatches(list1, list2) {
        var res = [];
        if (list1.length === 0 || list2.length === 0) {
          return res;
        }
        var merged;
        for (var i1 = 0; i1 < list1.length; i1++) {
          for (var i2 = 0; i2 < list2.length; i2++) {
            merged = mergeMatch(list1[i1], list2[i2]);
            if (merged) {
              res.push(merged);
            }
          }
        }
        return res;
      }
      function mergeChildMatches(childMatches) {
        if (childMatches.length === 0) {
          return childMatches;
        }
        var sets = childMatches.reduce(combineChildMatches);
        var uniqueSets = [];
        var unique = {};
        for (var i = 0; i < sets.length; i++) {
          var s = JSON.stringify(sets[i]);
          if (!unique[s]) {
            unique[s] = true;
            uniqueSets.push(sets[i]);
          }
        }
        return uniqueSets;
      }
      function _ruleMatch(rule, node, isSplit) {
        var res = [{ placeholders: {} }];
        if (rule instanceof OperatorNode && node instanceof OperatorNode || rule instanceof FunctionNode && node instanceof FunctionNode) {
          if (rule instanceof OperatorNode) {
            if (rule.op !== node.op || rule.fn !== node.fn) {
              return [];
            }
          } else if (rule instanceof FunctionNode) {
            if (rule.name !== node.name) {
              return [];
            }
          }
          if (node.args.length === 1 && rule.args.length === 1 || !isAssociative(node) || isSplit) {
            var childMatches = [];
            for (var i = 0; i < rule.args.length; i++) {
              var childMatch = _ruleMatch(rule.args[i], node.args[i]);
              if (childMatch.length === 0) {
                return [];
              }
              childMatches.push(childMatch);
            }
            res = mergeChildMatches(childMatches);
          } else if (node.args.length >= 2 && rule.args.length === 2) {
            var splits = getSplits(node, rule.context);
            var splitMatches = [];
            for (var i = 0; i < splits.length; i++) {
              var matchSet = _ruleMatch(rule, splits[i], true);
              splitMatches = splitMatches.concat(matchSet);
            }
            return splitMatches;
          } else if (rule.args.length > 2) {
            throw Error("Unexpected non-binary associative function: " + rule.toString());
          } else {
            return [];
          }
        } else if (rule instanceof SymbolNode) {
          if (rule.name.length === 0) {
            throw new Error("Symbol in rule has 0 length...!?");
          }
          if (rule.name[0] == "n" || rule.name.substring(0, 2) == "_p") {
            res[0].placeholders[rule.name] = node;
          } else if (rule.name[0] == "v") {
            if (!node.isConstantNode) {
              res[0].placeholders[rule.name] = node;
            } else {
              return [];
            }
          } else if (rule.name[0] == "C") {
            if (node instanceof ConstantNode) {
              return [];
            } else {
              res[0].placeholders[rule.name] = node;
            }
          } else if (rule.name[0] == "c") {
            if (node instanceof ConstantNode) {
              res[0].placeholders[rule.name] = node;
            } else {
              return [];
            }
          } else {
            throw new Error("Invalid symbol in rule: " + rule.name);
          }
        } else if (rule instanceof ConstantNode) {
          if (rule.value === node.value) {
          } else {
            return [];
          }
        } else {
          return [];
        }
        return res;
      }
      function _exactMatch(p, q) {
        if (p instanceof ConstantNode && q instanceof ConstantNode) {
          if (p.value !== q.value) {
            return false;
          }
        } else if (p instanceof SymbolNode && q instanceof SymbolNode) {
          if (p.name !== q.name) {
            return false;
          }
        } else if (p instanceof OperatorNode && q instanceof OperatorNode || p instanceof FunctionNode && q instanceof FunctionNode) {
          if (p instanceof OperatorNode) {
            if (p.op !== q.op || p.fn !== q.fn) {
              return false;
            }
          } else if (p instanceof FunctionNode) {
            if (p.name !== q.name) {
              return false;
            }
          }
          if (p.args.length !== q.args.length) {
            return false;
          }
          for (var i = 0; i < p.args.length; i++) {
            if (!_exactMatch(p.args[i], q.args[i])) {
              return false;
            }
          }
        } else {
          return false;
        }
        return true;
      }
      return simplify;
    }
    exports.name = "simplify";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/algebra/derivative.js
var require_derivative2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/algebra/derivative.js"(exports) {
    "use strict";
    function factory(type, config, load, typed) {
      var parse = load(require_parse());
      var simplify = load(require_simplify2());
      var ConstantNode = load(require_ConstantNode());
      var FunctionNode = load(require_FunctionNode());
      var OperatorNode = load(require_OperatorNode());
      var ParenthesisNode = load(require_ParenthesisNode());
      var SymbolNode = load(require_SymbolNode());
      var derivative = typed("derivative", {
        "Node, SymbolNode, Object": function(expr, variable, options) {
          var constNodes = {};
          constTag(constNodes, expr, variable.name);
          var res = _derivative(expr, constNodes);
          return options.simplify ? simplify(res) : res;
        },
        "Node, SymbolNode": function(expr, variable) {
          return derivative(expr, variable, { simplify: true });
        },
        "string, SymbolNode": function(expr, variable) {
          return derivative(parse(expr), variable);
        },
        "string, SymbolNode, Object": function(expr, variable, options) {
          return derivative(parse(expr), variable, options);
        },
        "string, string": function(expr, variable) {
          return derivative(parse(expr), parse(variable));
        },
        "string, string, Object": function(expr, variable, options) {
          return derivative(parse(expr), parse(variable), options);
        },
        "Node, string": function(expr, variable) {
          return derivative(expr, parse(variable));
        },
        "Node, string, Object": function(expr, variable, options) {
          return derivative(expr, parse(variable), options);
        }
        // TODO: replace the 8 signatures above with 4 as soon as typed-function supports optional arguments
        /* TODO: implement and test syntax with order of derivatives -> implement as an option {order: number}
        'Node, SymbolNode, ConstantNode': function (expr, variable, {order}) {
          var res = expr;
          for (var i = 0; i < order; i++) {
            var constNodes = {};
            constTag(constNodes, expr, variable.name);
            res = _derivative(res, constNodes);
          }
          return res;
        }
        */
      });
      derivative._simplify = true;
      derivative.toTex = function(deriv) {
        return _derivTex.apply(null, deriv.args);
      };
      var _derivTex = typed("_derivTex", {
        "Node, SymbolNode": function(expr, x) {
          return _derivTex(expr.toString(), x.toString(), 1);
        },
        "Node, SymbolNode, ConstantNode": function(expr, x, order) {
          return _derivTex(expr.toString(), x.name, order.value);
        },
        "string, string, number": function(expr, x, order) {
          var d;
          if (order === 1) {
            d = "{d\\over d" + x + "}";
          } else {
            d = "{d^{" + order + "}\\over d" + x + "^{" + order + "}}";
          }
          return d + "\\left[" + expr + "\\right]";
        }
      });
      var constTag = typed("constTag", {
        "Object, ConstantNode, string": function(constNodes, node) {
          return constNodes[node] = true;
        },
        "Object, SymbolNode, string": function(constNodes, node, varName) {
          if (node.name != varName) {
            return constNodes[node] = true;
          }
          return false;
        },
        "Object, ParenthesisNode, string": function(constNodes, node, varName) {
          return constTag(constNodes, node.content, varName);
        },
        "Object, FunctionAssignmentNode, string": function(constNodes, node, varName) {
          if (node.params.indexOf(varName) == -1) {
            return constNodes[node] = true;
          }
          return constTag(constNodes, node.expr, varName);
        },
        "Object, FunctionNode | OperatorNode, string": function(constNodes, node, varName) {
          if (node.args.length != 0) {
            var isConst = constTag(constNodes, node.args[0], varName);
            for (var i = 1; i < node.args.length; ++i) {
              isConst = constTag(constNodes, node.args[i], varName) && isConst;
            }
            if (isConst) {
              return constNodes[node] = true;
            }
          }
          return false;
        }
      });
      var _derivative = typed("_derivative", {
        "ConstantNode, Object": function(node) {
          return new ConstantNode("0", node.valueType);
        },
        "SymbolNode, Object": function(node, constNodes) {
          if (constNodes[node] !== void 0) {
            return new ConstantNode("0", config.number);
          }
          return new ConstantNode("1", config.number);
        },
        "ParenthesisNode, Object": function(node, constNodes) {
          return new ParenthesisNode(_derivative(node.content, constNodes));
        },
        "FunctionAssignmentNode, Object": function(node, constNodes) {
          if (constNodes[node] !== void 0) {
            return new ConstantNode("0", config.number);
          }
          return _derivative(node.expr, constNodes);
        },
        "FunctionNode, Object": function(node, constNodes) {
          if (node.args.length != 1) {
            funcArgsCheck(node);
          }
          if (constNodes[node] !== void 0) {
            return new ConstantNode("0", config.number);
          }
          var arg1 = node.args[0];
          var arg2;
          var div = false;
          var negative = false;
          var funcDerivative;
          switch (node.name) {
            case "cbrt":
              div = true;
              funcDerivative = new OperatorNode("*", "multiply", [
                new ConstantNode("3", config.number),
                new OperatorNode("^", "pow", [
                  arg1,
                  new OperatorNode("/", "divide", [
                    new ConstantNode("2", config.number),
                    new ConstantNode("3", config.number)
                  ])
                ])
              ]);
              break;
            case "sqrt":
            case "nthRoot":
              if (node.args.length == 1) {
                div = true;
                funcDerivative = new OperatorNode("*", "multiply", [
                  new ConstantNode("2", config.number),
                  new FunctionNode("sqrt", [arg1])
                ]);
                break;
              }
              arg2 = new OperatorNode("/", "divide", [
                new ConstantNode("1", config.number),
                node.args[1]
              ]);
              constNodes[arg2] = constNodes[node.args[1]];
              return _derivative(new OperatorNode("^", "pow", [arg1, arg2]), constNodes);
            case "log10":
              arg2 = new ConstantNode("10", config.number);
            case "log":
              if (!arg2 && node.args.length == 1) {
                funcDerivative = arg1.clone();
              } else if (arg2 || constNodes[node.args[1]] !== void 0) {
                funcDerivative = new OperatorNode("*", "multiply", [
                  arg1.clone(),
                  new FunctionNode("log", [arg2 || node.args[1]])
                ]);
              } else {
                return _derivative(new OperatorNode("/", "divide", [
                  new FunctionNode("log", [arg1]),
                  new FunctionNode("log", [node.args[1]])
                ]), constNodes);
              }
              div = true;
              break;
            case "exp":
              funcDerivative = new FunctionNode("exp", [arg1.clone()]);
              break;
            case "sin":
              funcDerivative = new FunctionNode("cos", [arg1.clone()]);
              break;
            case "cos":
              funcDerivative = new OperatorNode("-", "unaryMinus", [
                new FunctionNode("sin", [arg1.clone()])
              ]);
              break;
            case "tan":
              funcDerivative = new OperatorNode("^", "pow", [
                new FunctionNode("sec", [arg1.clone()]),
                new ConstantNode("2", config.number)
              ]);
              break;
            case "sec":
              funcDerivative = new OperatorNode("*", "multiply", [
                node,
                new FunctionNode("tan", [arg1.clone()])
              ]);
              break;
            case "csc":
              negative = true;
              funcDerivative = new OperatorNode("*", "multiply", [
                node,
                new FunctionNode("cot", [arg1.clone()])
              ]);
              break;
            case "cot":
              negative = true;
              funcDerivative = new OperatorNode("^", "pow", [
                new FunctionNode("csc", [arg1.clone()]),
                new ConstantNode("2", config.number)
              ]);
              break;
            case "asin":
              div = true;
              funcDerivative = new FunctionNode("sqrt", [
                new OperatorNode("-", "subtract", [
                  new ConstantNode("1", config.number),
                  new OperatorNode("^", "pow", [
                    arg1.clone(),
                    new ConstantNode("2", config.number)
                  ])
                ])
              ]);
              break;
            case "acos":
              div = true;
              negative = true;
              funcDerivative = new FunctionNode("sqrt", [
                new OperatorNode("-", "subtract", [
                  new ConstantNode("1", config.number),
                  new OperatorNode("^", "pow", [
                    arg1.clone(),
                    new ConstantNode("2", config.number)
                  ])
                ])
              ]);
              break;
            case "atan":
              div = true;
              funcDerivative = new OperatorNode("+", "add", [
                new OperatorNode("^", "pow", [
                  arg1.clone(),
                  new ConstantNode("2", config.number)
                ]),
                new ConstantNode("1", config.number)
              ]);
              break;
            case "asec":
              div = true;
              funcDerivative = new OperatorNode("*", "multiply", [
                new FunctionNode("abs", [arg1.clone()]),
                new FunctionNode("sqrt", [
                  new OperatorNode("-", "subtract", [
                    new OperatorNode("^", "pow", [
                      arg1.clone(),
                      new ConstantNode("2", config.number)
                    ]),
                    new ConstantNode("1", config.number)
                  ])
                ])
              ]);
              break;
            case "acsc":
              div = true;
              negative = true;
              funcDerivative = new OperatorNode("*", "multiply", [
                new FunctionNode("abs", [arg1.clone()]),
                new FunctionNode("sqrt", [
                  new OperatorNode("-", "subtract", [
                    new OperatorNode("^", "pow", [
                      arg1.clone(),
                      new ConstantNode("2", config.number)
                    ]),
                    new ConstantNode("1", config.number)
                  ])
                ])
              ]);
              break;
            case "acot":
              div = true;
              negative = true;
              funcDerivative = new OperatorNode("+", "add", [
                new OperatorNode("^", "pow", [
                  arg1.clone(),
                  new ConstantNode("2", config.number)
                ]),
                new ConstantNode("1", config.number)
              ]);
              break;
            case "sinh":
              funcDerivative = new FunctionNode("cosh", [arg1.clone()]);
              break;
            case "cosh":
              funcDerivative = new FunctionNode("sinh", [arg1.clone()]);
              break;
            case "tanh":
              funcDerivative = new OperatorNode("^", "pow", [
                new FunctionNode("sech", [arg1.clone()]),
                new ConstantNode("2", config.number)
              ]);
              break;
            case "sech":
              negative = true;
              funcDerivative = new OperatorNode("*", "multiply", [
                node,
                new FunctionNode("tanh", [arg1.clone()])
              ]);
              break;
            case "csch":
              negative = true;
              funcDerivative = new OperatorNode("*", "multiply", [
                node,
                new FunctionNode("coth", [arg1.clone()])
              ]);
              break;
            case "coth":
              negative = true;
              funcDerivative = new OperatorNode("^", "pow", [
                new FunctionNode("csch", [arg1.clone()]),
                new ConstantNode("2", config.number)
              ]);
              break;
            case "asinh":
              div = true;
              funcDerivative = new FunctionNode("sqrt", [
                new OperatorNode("+", "add", [
                  new OperatorNode("^", "pow", [
                    arg1.clone(),
                    new ConstantNode("2", config.number)
                  ]),
                  new ConstantNode("1", config.number)
                ])
              ]);
              break;
            case "acosh":
              div = true;
              funcDerivative = new FunctionNode("sqrt", [
                new OperatorNode("-", "subtract", [
                  new OperatorNode("^", "pow", [
                    arg1.clone(),
                    new ConstantNode("2", config.number)
                  ]),
                  new ConstantNode("1", config.number)
                ])
              ]);
              break;
            case "atanh":
              div = true;
              funcDerivative = new OperatorNode("-", "subtract", [
                new ConstantNode("1", config.number),
                new OperatorNode("^", "pow", [
                  arg1.clone(),
                  new ConstantNode("2", config.number)
                ])
              ]);
              break;
            case "asech":
              div = true;
              negative = true;
              funcDerivative = new OperatorNode("*", "multiply", [
                arg1.clone(),
                new FunctionNode("sqrt", [
                  new OperatorNode("-", "subtract", [
                    new ConstantNode("1", config.number),
                    new OperatorNode("^", "pow", [
                      arg1.clone(),
                      new ConstantNode("2", config.number)
                    ])
                  ])
                ])
              ]);
              break;
            case "acsch":
              div = true;
              negative = true;
              funcDerivative = new OperatorNode("*", "multiply", [
                new FunctionNode("abs", [arg1.clone()]),
                new FunctionNode("sqrt", [
                  new OperatorNode("+", "add", [
                    new OperatorNode("^", "pow", [
                      arg1.clone(),
                      new ConstantNode("2", config.number)
                    ]),
                    new ConstantNode("1", config.number)
                  ])
                ])
              ]);
              break;
            case "acoth":
              div = true;
              negative = true;
              funcDerivative = new OperatorNode("-", "subtract", [
                new ConstantNode("1", config.number),
                new OperatorNode("^", "pow", [
                  arg1.clone(),
                  new ConstantNode("2", config.number)
                ])
              ]);
              break;
            case "gamma":
            default:
              throw new Error('Function "' + node.name + '" not supported by derivative');
          }
          var op, func;
          if (div) {
            op = "/";
            func = "divide";
          } else {
            op = "*";
            func = "multiply";
          }
          var chainDerivative = _derivative(arg1, constNodes);
          if (negative) {
            chainDerivative = new OperatorNode("-", "unaryMinus", [chainDerivative]);
          }
          return new OperatorNode(op, func, [chainDerivative, funcDerivative]);
        },
        "OperatorNode, Object": function(node, constNodes) {
          if (constNodes[node] !== void 0) {
            return new ConstantNode("0", config.number);
          }
          var arg1 = node.args[0];
          var arg2 = node.args[1];
          switch (node.op) {
            case "+":
            case "-":
              if (node.args.length == 1) {
                return new OperatorNode(node.op, node.fn, [_derivative(arg1, constNodes)]);
              }
              return new OperatorNode(node.op, node.fn, [
                _derivative(arg1, constNodes),
                _derivative(arg2, constNodes)
              ]);
            case "*":
              if (constNodes[arg1] !== void 0 || constNodes[arg2] !== void 0) {
                var newArgs = constNodes[arg1] !== void 0 ? [arg1.clone(), _derivative(arg2, constNodes)] : [arg2.clone(), _derivative(arg1, constNodes)];
                return new OperatorNode("*", "multiply", newArgs);
              }
              return new OperatorNode("+", "add", [
                new OperatorNode("*", "multiply", [_derivative(arg1, constNodes), arg2.clone()]),
                new OperatorNode("*", "multiply", [arg1.clone(), _derivative(arg2, constNodes)])
              ]);
            case "/":
              if (constNodes[arg2] !== void 0) {
                return new OperatorNode("/", "divide", [_derivative(arg1, constNodes), arg2]);
              }
              if (constNodes[arg1] !== void 0) {
                return new OperatorNode("*", "multiply", [
                  new OperatorNode("-", "unaryMinus", [arg1]),
                  new OperatorNode("/", "divide", [
                    _derivative(arg2, constNodes),
                    new OperatorNode("^", "pow", [arg2.clone(), new ConstantNode("2", config.number)])
                  ])
                ]);
              }
              return new OperatorNode("/", "divide", [
                new OperatorNode("-", "subtract", [
                  new OperatorNode("*", "multiply", [_derivative(arg1, constNodes), arg2.clone()]),
                  new OperatorNode("*", "multiply", [arg1.clone(), _derivative(arg2, constNodes)])
                ]),
                new OperatorNode("^", "pow", [arg2.clone(), new ConstantNode("2", config.number)])
              ]);
            case "^":
              if (constNodes[arg1] !== void 0) {
                if (arg1.isConstantNode && (arg1.value == "0" || arg1.value == "1")) {
                  return new ConstantNode("0", config.number);
                }
                return new OperatorNode("*", "multiply", [
                  node,
                  new OperatorNode("*", "multiply", [
                    new FunctionNode("log", [arg1.clone()]),
                    _derivative(arg2.clone(), constNodes)
                  ])
                ]);
              }
              if (constNodes[arg2] !== void 0) {
                if (arg2.isConstantNode) {
                  var expValue = arg2.value;
                  if (expValue == "0") {
                    return new ConstantNode("0", config.number);
                  }
                  if (expValue == "1") {
                    return _derivative(arg1, constNodes);
                  }
                }
                var powMinusOne = new OperatorNode("^", "pow", [
                  arg1.clone(),
                  new OperatorNode("-", "subtract", [
                    arg2,
                    new ConstantNode("1", config.number)
                  ])
                ]);
                return new OperatorNode("*", "multiply", [
                  arg2.clone(),
                  new OperatorNode("*", "multiply", [
                    _derivative(arg1, constNodes),
                    powMinusOne
                  ])
                ]);
              }
              return new OperatorNode("*", "multiply", [
                new OperatorNode("^", "pow", [arg1.clone(), arg2.clone()]),
                new OperatorNode("+", "add", [
                  new OperatorNode("*", "multiply", [
                    _derivative(arg1, constNodes),
                    new OperatorNode("/", "divide", [arg2.clone(), arg1.clone()])
                  ]),
                  new OperatorNode("*", "multiply", [
                    _derivative(arg2, constNodes),
                    new FunctionNode("log", [arg1.clone()])
                  ])
                ])
              ]);
            case "%":
            case "mod":
            default:
              throw new Error('Operator "' + node.op + '" not supported by derivative');
          }
        }
      });
      function funcArgsCheck(node) {
        if ((node.name == "log" || node.name == "nthRoot") && node.args.length == 2) {
          return;
        }
        for (var i = 0; i < node.args.length; ++i) {
          node.args[i] = new ConstantNode(0);
        }
        node.compile().eval();
        throw new Error("Expected TypeError, but none found");
      }
      return derivative;
    }
    exports.name = "derivative";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/algebra/decomposition/lup.js
var require_lup2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/algebra/decomposition/lup.js"(exports) {
    "use strict";
    var util = require_utils();
    var object = util.object;
    function factory(type, config, load, typed) {
      var matrix = load(require_matrix());
      var abs = load(require_abs());
      var addScalar = load(require_addScalar());
      var divideScalar = load(require_divideScalar());
      var multiplyScalar = load(require_multiplyScalar());
      var subtract = load(require_subtract());
      var larger = load(require_larger());
      var equalScalar = load(require_equalScalar());
      var unaryMinus = load(require_unaryMinus());
      var SparseMatrix = type.SparseMatrix;
      var DenseMatrix = type.DenseMatrix;
      var Spa = type.Spa;
      var lup = typed("lup", {
        "DenseMatrix": function(m) {
          return _denseLUP(m);
        },
        "SparseMatrix": function(m) {
          return _sparseLUP(m);
        },
        "Array": function(a) {
          var m = matrix(a);
          var r = _denseLUP(m);
          return {
            L: r.L.valueOf(),
            U: r.U.valueOf(),
            p: r.p
          };
        }
      });
      var _denseLUP = function(m) {
        var rows = m._size[0];
        var columns = m._size[1];
        var n = Math.min(rows, columns);
        var data = object.clone(m._data);
        var ldata = [];
        var lsize = [rows, n];
        var udata = [];
        var usize = [n, columns];
        var i, j, k;
        var p = [];
        for (i = 0; i < rows; i++)
          p[i] = i;
        for (j = 0; j < columns; j++) {
          if (j > 0) {
            for (i = 0; i < rows; i++) {
              var min = Math.min(i, j);
              var s = 0;
              for (k = 0; k < min; k++) {
                s = addScalar(s, multiplyScalar(data[i][k], data[k][j]));
              }
              data[i][j] = subtract(data[i][j], s);
            }
          }
          var pi2 = j;
          var pabsv = 0;
          var vjj = 0;
          for (i = j; i < rows; i++) {
            var v = data[i][j];
            var absv = abs(v);
            if (larger(absv, pabsv)) {
              pi2 = i;
              pabsv = absv;
              vjj = v;
            }
          }
          if (j !== pi2) {
            p[j] = [p[pi2], p[pi2] = p[j]][0];
            DenseMatrix._swapRows(j, pi2, data);
          }
          if (j < rows) {
            for (i = j + 1; i < rows; i++) {
              var vij = data[i][j];
              if (!equalScalar(vij, 0)) {
                data[i][j] = divideScalar(data[i][j], vjj);
              }
            }
          }
        }
        for (j = 0; j < columns; j++) {
          for (i = 0; i < rows; i++) {
            if (j === 0) {
              if (i < columns) {
                udata[i] = [];
              }
              ldata[i] = [];
            }
            if (i < j) {
              if (i < columns) {
                udata[i][j] = data[i][j];
              }
              if (j < rows) {
                ldata[i][j] = 0;
              }
              continue;
            }
            if (i === j) {
              if (i < columns) {
                udata[i][j] = data[i][j];
              }
              if (j < rows) {
                ldata[i][j] = 1;
              }
              continue;
            }
            if (i < columns) {
              udata[i][j] = 0;
            }
            if (j < rows) {
              ldata[i][j] = data[i][j];
            }
          }
        }
        var l = new DenseMatrix({
          data: ldata,
          size: lsize
        });
        var u = new DenseMatrix({
          data: udata,
          size: usize
        });
        var pv = [];
        for (i = 0, n = p.length; i < n; i++)
          pv[p[i]] = i;
        return {
          L: l,
          U: u,
          p: pv,
          toString: function() {
            return "L: " + this.L.toString() + "\nU: " + this.U.toString() + "\nP: " + this.p;
          }
        };
      };
      var _sparseLUP = function(m) {
        var rows = m._size[0];
        var columns = m._size[1];
        var n = Math.min(rows, columns);
        var values = m._values;
        var index = m._index;
        var ptr = m._ptr;
        var lvalues = [];
        var lindex = [];
        var lptr = [];
        var lsize = [rows, n];
        var uvalues = [];
        var uindex = [];
        var uptr = [];
        var usize = [n, columns];
        var i, j, k;
        var pv_co = [];
        var pv_oc = [];
        for (i = 0; i < rows; i++) {
          pv_co[i] = i;
          pv_oc[i] = i;
        }
        var swapIndeces = function(x, y) {
          var kx = pv_oc[x];
          var ky = pv_oc[y];
          pv_co[kx] = y;
          pv_co[ky] = x;
          pv_oc[x] = ky;
          pv_oc[y] = kx;
        };
        for (j = 0; j < columns; j++) {
          var spa = new Spa();
          if (j < rows) {
            lptr.push(lvalues.length);
            lvalues.push(1);
            lindex.push(j);
          }
          uptr.push(uvalues.length);
          var k0 = ptr[j];
          var k1 = ptr[j + 1];
          for (k = k0; k < k1; k++) {
            i = index[k];
            spa.set(pv_co[i], values[k]);
          }
          if (j > 0) {
            spa.forEach(0, j - 1, function(k2, vkj) {
              SparseMatrix._forEachRow(k2, lvalues, lindex, lptr, function(i2, vik) {
                if (i2 > k2) {
                  spa.accumulate(i2, unaryMinus(multiplyScalar(vik, vkj)));
                }
              });
            });
          }
          var pi2 = j;
          var vjj = spa.get(j);
          var pabsv = abs(vjj);
          spa.forEach(j + 1, rows - 1, function(x, v) {
            var absv = abs(v);
            if (larger(absv, pabsv)) {
              pi2 = x;
              pabsv = absv;
              vjj = v;
            }
          });
          if (j !== pi2) {
            SparseMatrix._swapRows(j, pi2, lsize[1], lvalues, lindex, lptr);
            SparseMatrix._swapRows(j, pi2, usize[1], uvalues, uindex, uptr);
            spa.swap(j, pi2);
            swapIndeces(j, pi2);
          }
          spa.forEach(0, rows - 1, function(x, v) {
            if (x <= j) {
              uvalues.push(v);
              uindex.push(x);
            } else {
              v = divideScalar(v, vjj);
              if (!equalScalar(v, 0)) {
                lvalues.push(v);
                lindex.push(x);
              }
            }
          });
        }
        uptr.push(uvalues.length);
        lptr.push(lvalues.length);
        return {
          L: new SparseMatrix({
            values: lvalues,
            index: lindex,
            ptr: lptr,
            size: lsize
          }),
          U: new SparseMatrix({
            values: uvalues,
            index: uindex,
            ptr: uptr,
            size: usize
          }),
          p: pv_co,
          toString: function() {
            return "L: " + this.L.toString() + "\nU: " + this.U.toString() + "\nP: " + this.p;
          }
        };
      };
      return lup;
    }
    exports.name = "lup";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/algebra/sparse/cs_flip.js
var require_cs_flip = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/algebra/sparse/cs_flip.js"(exports) {
    "use strict";
    function factory() {
      var cs_flip = function(i) {
        return -i - 2;
      };
      return cs_flip;
    }
    exports.name = "cs_flip";
    exports.path = "sparse";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/algebra/sparse/cs_fkeep.js
var require_cs_fkeep = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/algebra/sparse/cs_fkeep.js"(exports) {
    "use strict";
    function factory() {
      var cs_fkeep = function(a, callback, other) {
        var avalues = a._values;
        var aindex = a._index;
        var aptr = a._ptr;
        var asize = a._size;
        var n = asize[1];
        var nz = 0;
        for (var j = 0; j < n; j++) {
          var p = aptr[j];
          aptr[j] = nz;
          for (; p < aptr[j + 1]; p++) {
            if (callback(aindex[p], j, avalues ? avalues[p] : 1, other)) {
              aindex[nz] = aindex[p];
              if (avalues)
                avalues[nz] = avalues[p];
              nz++;
            }
          }
        }
        aptr[n] = nz;
        aindex.splice(nz, aindex.length - nz);
        if (avalues)
          avalues.splice(nz, avalues.length - nz);
        return nz;
      };
      return cs_fkeep;
    }
    exports.name = "cs_fkeep";
    exports.path = "sparse";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/algebra/sparse/cs_tdfs.js
var require_cs_tdfs = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/algebra/sparse/cs_tdfs.js"(exports) {
    "use strict";
    function factory() {
      var cs_tdfs = function(j, k, w, head, next, post, stack) {
        var top = 0;
        w[stack] = j;
        while (top >= 0) {
          var p = w[stack + top];
          var i = w[head + p];
          if (i == -1) {
            top--;
            post[k++] = p;
          } else {
            w[head + p] = w[next + i];
            ++top;
            w[stack + top] = i;
          }
        }
        return k;
      };
      return cs_tdfs;
    }
    exports.name = "cs_tdfs";
    exports.path = "sparse";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/matrix/transpose.js
var require_transpose2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/matrix/transpose.js"(exports) {
    "use strict";
    var clone = require_object().clone;
    var format = require_string().format;
    function factory(type, config, load, typed) {
      var latex = require_latex();
      var matrix = load(require_matrix());
      var DenseMatrix = type.DenseMatrix, SparseMatrix = type.SparseMatrix;
      var transpose = typed("transpose", {
        "Array": function(x) {
          return transpose(matrix(x)).valueOf();
        },
        "Matrix": function(x) {
          var size = x.size();
          var c;
          switch (size.length) {
            case 1:
              c = x.clone();
              break;
            case 2:
              var rows = size[0];
              var columns = size[1];
              if (columns === 0) {
                throw new RangeError("Cannot transpose a 2D matrix with no columns (size: " + format(size) + ")");
              }
              switch (x.storage()) {
                case "dense":
                  c = _denseTranspose(x, rows, columns);
                  break;
                case "sparse":
                  c = _sparseTranspose(x, rows, columns);
                  break;
              }
              break;
            default:
              throw new RangeError("Matrix must be a vector or two dimensional (size: " + format(this._size) + ")");
          }
          return c;
        },
        // scalars
        "any": function(x) {
          return clone(x);
        }
      });
      var _denseTranspose = function(m, rows, columns) {
        var data = m._data;
        var transposed = [];
        var transposedRow;
        for (var j = 0; j < columns; j++) {
          transposedRow = transposed[j] = [];
          for (var i = 0; i < rows; i++) {
            transposedRow[i] = clone(data[i][j]);
          }
        }
        return new DenseMatrix({
          data: transposed,
          size: [columns, rows],
          datatype: m._datatype
        });
      };
      var _sparseTranspose = function(m, rows, columns) {
        var values = m._values;
        var index = m._index;
        var ptr = m._ptr;
        var cvalues = values ? [] : void 0;
        var cindex = [];
        var cptr = [];
        var w = [];
        for (var x = 0; x < rows; x++)
          w[x] = 0;
        var p, l, j;
        for (p = 0, l = index.length; p < l; p++) {
          w[index[p]]++;
        }
        var sum = 0;
        for (var i = 0; i < rows; i++) {
          cptr.push(sum);
          sum += w[i];
          w[i] = cptr[i];
        }
        cptr.push(sum);
        for (j = 0; j < columns; j++) {
          for (var k0 = ptr[j], k1 = ptr[j + 1], k = k0; k < k1; k++) {
            var q = w[index[k]]++;
            cindex[q] = j;
            if (values)
              cvalues[q] = clone(values[k]);
          }
        }
        return new SparseMatrix({
          values: cvalues,
          index: cindex,
          ptr: cptr,
          size: [columns, rows],
          datatype: m._datatype
        });
      };
      transpose.toTex = { 1: "\\left(${args[0]}\\right)" + latex.operators["transpose"] };
      return transpose;
    }
    exports.name = "transpose";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/algebra/sparse/cs_amd.js
var require_cs_amd = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/algebra/sparse/cs_amd.js"(exports) {
    "use strict";
    function factory(type, config, load) {
      var cs_flip = load(require_cs_flip());
      var cs_fkeep = load(require_cs_fkeep());
      var cs_tdfs = load(require_cs_tdfs());
      var add = load(require_add());
      var multiply = load(require_multiply());
      var transpose = load(require_transpose2());
      var cs_amd = function(order, a) {
        if (!a || order <= 0 || order > 3)
          return null;
        var asize = a._size;
        var m = asize[0];
        var n = asize[1];
        var lemax = 0;
        var dense = Math.max(16, 10 * Math.sqrt(n));
        dense = Math.min(n - 2, dense);
        var cm = _createTargetMatrix(order, a, m, n, dense);
        cs_fkeep(cm, _diag, null);
        var cindex = cm._index;
        var cptr = cm._ptr;
        var cnz = cptr[n];
        var P = [];
        var W = [];
        var len = 0;
        var nv = n + 1;
        var next = 2 * (n + 1);
        var head = 3 * (n + 1);
        var elen = 4 * (n + 1);
        var degree = 5 * (n + 1);
        var w = 6 * (n + 1);
        var hhead = 7 * (n + 1);
        var last = P;
        var mark = _initializeQuotientGraph(n, cptr, W, len, head, last, next, hhead, nv, w, elen, degree);
        var nel = _initializeDegreeLists(n, cptr, W, degree, elen, w, dense, nv, head, last, next);
        var mindeg = 0;
        var i, j, k, k1, k2, e, pj, ln, nvi, pk, eln, p1, p2, pn, h, d;
        while (nel < n) {
          for (k = -1; mindeg < n && (k = W[head + mindeg]) == -1; mindeg++) ;
          if (W[next + k] != -1)
            last[W[next + k]] = -1;
          W[head + mindeg] = W[next + k];
          var elenk = W[elen + k];
          var nvk = W[nv + k];
          nel += nvk;
          var dk = 0;
          W[nv + k] = -nvk;
          var p = cptr[k];
          var pk1 = elenk === 0 ? p : cnz;
          var pk2 = pk1;
          for (k1 = 1; k1 <= elenk + 1; k1++) {
            if (k1 > elenk) {
              e = k;
              pj = p;
              ln = W[len + k] - elenk;
            } else {
              e = cindex[p++];
              pj = cptr[e];
              ln = W[len + e];
            }
            for (k2 = 1; k2 <= ln; k2++) {
              i = cindex[pj++];
              if ((nvi = W[nv + i]) <= 0)
                continue;
              dk += nvi;
              W[nv + i] = -nvi;
              cindex[pk2++] = i;
              if (W[next + i] != -1)
                last[W[next + i]] = last[i];
              if (last[i] != -1)
                W[next + last[i]] = W[next + i];
              else
                W[head + W[degree + i]] = W[next + i];
            }
            if (e != k) {
              cptr[e] = cs_flip(k);
              W[w + e] = 0;
            }
          }
          if (elenk !== 0)
            cnz = pk2;
          W[degree + k] = dk;
          cptr[k] = pk1;
          W[len + k] = pk2 - pk1;
          W[elen + k] = -2;
          mark = _wclear(mark, lemax, W, w, n);
          for (pk = pk1; pk < pk2; pk++) {
            i = cindex[pk];
            if ((eln = W[elen + i]) <= 0)
              continue;
            nvi = -W[nv + i];
            var wnvi = mark - nvi;
            for (p = cptr[i], p1 = cptr[i] + eln - 1; p <= p1; p++) {
              e = cindex[p];
              if (W[w + e] >= mark) {
                W[w + e] -= nvi;
              } else if (W[w + e] !== 0) {
                W[w + e] = W[degree + e] + wnvi;
              }
            }
          }
          for (pk = pk1; pk < pk2; pk++) {
            i = cindex[pk];
            p1 = cptr[i];
            p2 = p1 + W[elen + i] - 1;
            pn = p1;
            for (h = 0, d = 0, p = p1; p <= p2; p++) {
              e = cindex[p];
              if (W[w + e] !== 0) {
                var dext = W[w + e] - mark;
                if (dext > 0) {
                  d += dext;
                  cindex[pn++] = e;
                  h += e;
                } else {
                  cptr[e] = cs_flip(k);
                  W[w + e] = 0;
                }
              }
            }
            W[elen + i] = pn - p1 + 1;
            var p3 = pn;
            var p4 = p1 + W[len + i];
            for (p = p2 + 1; p < p4; p++) {
              j = cindex[p];
              var nvj = W[nv + j];
              if (nvj <= 0)
                continue;
              d += nvj;
              cindex[pn++] = j;
              h += j;
            }
            if (d === 0) {
              cptr[i] = cs_flip(k);
              nvi = -W[nv + i];
              dk -= nvi;
              nvk += nvi;
              nel += nvi;
              W[nv + i] = 0;
              W[elen + i] = -1;
            } else {
              W[degree + i] = Math.min(W[degree + i], d);
              cindex[pn] = cindex[p3];
              cindex[p3] = cindex[p1];
              cindex[p1] = k;
              W[len + i] = pn - p1 + 1;
              h = (h < 0 ? -h : h) % n;
              W[next + i] = W[hhead + h];
              W[hhead + h] = i;
              last[i] = h;
            }
          }
          W[degree + k] = dk;
          lemax = Math.max(lemax, dk);
          mark = _wclear(mark + lemax, lemax, W, w, n);
          for (pk = pk1; pk < pk2; pk++) {
            i = cindex[pk];
            if (W[nv + i] >= 0)
              continue;
            h = last[i];
            i = W[hhead + h];
            W[hhead + h] = -1;
            for (; i != -1 && W[next + i] != -1; i = W[next + i], mark++) {
              ln = W[len + i];
              eln = W[elen + i];
              for (p = cptr[i] + 1; p <= cptr[i] + ln - 1; p++)
                W[w + cindex[p]] = mark;
              var jlast = i;
              for (j = W[next + i]; j != -1; ) {
                var ok = W[len + j] === ln && W[elen + j] === eln;
                for (p = cptr[j] + 1; ok && p <= cptr[j] + ln - 1; p++) {
                  if (W[w + cindex[p]] != mark)
                    ok = 0;
                }
                if (ok) {
                  cptr[j] = cs_flip(i);
                  W[nv + i] += W[nv + j];
                  W[nv + j] = 0;
                  W[elen + j] = -1;
                  j = W[next + j];
                  W[next + jlast] = j;
                } else {
                  jlast = j;
                  j = W[next + j];
                }
              }
            }
          }
          for (p = pk1, pk = pk1; pk < pk2; pk++) {
            i = cindex[pk];
            if ((nvi = -W[nv + i]) <= 0)
              continue;
            W[nv + i] = nvi;
            d = W[degree + i] + dk - nvi;
            d = Math.min(d, n - nel - nvi);
            if (W[head + d] != -1)
              last[W[head + d]] = i;
            W[next + i] = W[head + d];
            last[i] = -1;
            W[head + d] = i;
            mindeg = Math.min(mindeg, d);
            W[degree + i] = d;
            cindex[p++] = i;
          }
          W[nv + k] = nvk;
          if ((W[len + k] = p - pk1) === 0) {
            cptr[k] = -1;
            W[w + k] = 0;
          }
          if (elenk !== 0) {
            cnz = p;
          }
        }
        for (i = 0; i < n; i++)
          cptr[i] = cs_flip(cptr[i]);
        for (j = 0; j <= n; j++)
          W[head + j] = -1;
        for (j = n; j >= 0; j--) {
          if (W[nv + j] > 0)
            continue;
          W[next + j] = W[head + cptr[j]];
          W[head + cptr[j]] = j;
        }
        for (e = n; e >= 0; e--) {
          if (W[nv + e] <= 0)
            continue;
          if (cptr[e] != -1) {
            W[next + e] = W[head + cptr[e]];
            W[head + cptr[e]] = e;
          }
        }
        for (k = 0, i = 0; i <= n; i++) {
          if (cptr[i] == -1)
            k = cs_tdfs(i, k, W, head, next, P, w);
        }
        P.splice(P.length - 1, 1);
        return P;
      };
      var _createTargetMatrix = function(order, a, m, n, dense) {
        var at = transpose(a);
        if (order === 1 && n === m) {
          return add(a, at);
        }
        if (order == 2) {
          var tindex = at._index;
          var tptr = at._ptr;
          var p2 = 0;
          for (var j = 0; j < m; j++) {
            var p = tptr[j];
            tptr[j] = p2;
            if (tptr[j + 1] - p > dense)
              continue;
            for (var p1 = tptr[j + 1]; p < p1; p++)
              tindex[p2++] = tindex[p];
          }
          tptr[m] = p2;
          a = transpose(at);
          return multiply(at, a);
        }
        return multiply(at, a);
      };
      var _initializeQuotientGraph = function(n, cptr, W, len, head, last, next, hhead, nv, w, elen, degree) {
        for (var k = 0; k < n; k++)
          W[len + k] = cptr[k + 1] - cptr[k];
        W[len + n] = 0;
        for (var i = 0; i <= n; i++) {
          W[head + i] = -1;
          last[i] = -1;
          W[next + i] = -1;
          W[hhead + i] = -1;
          W[nv + i] = 1;
          W[w + i] = 1;
          W[elen + i] = 0;
          W[degree + i] = W[len + i];
        }
        var mark = _wclear(0, 0, W, w, n);
        W[elen + n] = -2;
        cptr[n] = -1;
        W[w + n] = 0;
        return mark;
      };
      var _initializeDegreeLists = function(n, cptr, W, degree, elen, w, dense, nv, head, last, next) {
        var nel = 0;
        for (var i = 0; i < n; i++) {
          var d = W[degree + i];
          if (d === 0) {
            W[elen + i] = -2;
            nel++;
            cptr[i] = -1;
            W[w + i] = 0;
          } else if (d > dense) {
            W[nv + i] = 0;
            W[elen + i] = -1;
            nel++;
            cptr[i] = cs_flip(n);
            W[nv + n]++;
          } else {
            var h = W[head + d];
            if (h != -1)
              last[h] = i;
            W[next + i] = W[head + d];
            W[head + d] = i;
          }
        }
        return nel;
      };
      var _wclear = function(mark, lemax, W, w, n) {
        if (mark < 2 || mark + lemax < 0) {
          for (var k = 0; k < n; k++) {
            if (W[w + k] !== 0)
              W[w + k] = 1;
          }
          mark = 2;
        }
        return mark;
      };
      var _diag = function(i, j) {
        return i != j;
      };
      return cs_amd;
    }
    exports.name = "cs_amd";
    exports.path = "sparse";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/algebra/sparse/cs_permute.js
var require_cs_permute = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/algebra/sparse/cs_permute.js"(exports) {
    "use strict";
    function factory(type) {
      var SparseMatrix = type.SparseMatrix;
      var cs_permute = function(a, pinv, q, values) {
        var avalues = a._values;
        var aindex = a._index;
        var aptr = a._ptr;
        var asize = a._size;
        var adt = a._datatype;
        var m = asize[0];
        var n = asize[1];
        var cvalues = values && a._values ? [] : null;
        var cindex = [];
        var cptr = [];
        var nz = 0;
        for (var k = 0; k < n; k++) {
          cptr[k] = nz;
          var j = q ? q[k] : k;
          for (var t0 = aptr[j], t1 = aptr[j + 1], t = t0; t < t1; t++) {
            var r = pinv ? pinv[aindex[t]] : aindex[t];
            cindex[nz] = r;
            if (cvalues)
              cvalues[nz] = avalues[t];
            nz++;
          }
        }
        cptr[n] = nz;
        return new SparseMatrix({
          values: cvalues,
          index: cindex,
          ptr: cptr,
          size: [m, n],
          datatype: adt
        });
      };
      return cs_permute;
    }
    exports.name = "cs_permute";
    exports.path = "sparse";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/algebra/sparse/cs_etree.js
var require_cs_etree = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/algebra/sparse/cs_etree.js"(exports) {
    "use strict";
    function factory() {
      var cs_etree = function(a, ata) {
        if (!a)
          return null;
        var aindex = a._index;
        var aptr = a._ptr;
        var asize = a._size;
        var m = asize[0];
        var n = asize[1];
        var parent = [];
        var w = [];
        var ancestor = 0;
        var prev = n;
        var i, inext;
        if (ata) {
          for (i = 0; i < m; i++)
            w[prev + i] = -1;
        }
        for (var k = 0; k < n; k++) {
          parent[k] = -1;
          w[ancestor + k] = -1;
          for (var p0 = aptr[k], p1 = aptr[k + 1], p = p0; p < p1; p++) {
            var r = aindex[p];
            i = ata ? w[prev + r] : r;
            for (; i != -1 && i < k; i = inext) {
              inext = w[ancestor + i];
              w[ancestor + i] = k;
              if (inext == -1)
                parent[i] = k;
            }
            if (ata)
              w[prev + r] = k;
          }
        }
        return parent;
      };
      return cs_etree;
    }
    exports.name = "cs_etree";
    exports.path = "sparse";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/algebra/sparse/cs_post.js
var require_cs_post = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/algebra/sparse/cs_post.js"(exports) {
    "use strict";
    function factory(type, config, load) {
      var cs_tdfs = load(require_cs_tdfs());
      var cs_post = function(parent, n) {
        if (!parent)
          return null;
        var k = 0;
        var j;
        var post = [];
        var w = [];
        var head = 0;
        var next = n;
        var stack = 2 * n;
        for (j = 0; j < n; j++) {
          w[head + j] = -1;
        }
        for (j = n - 1; j >= 0; j--) {
          if (parent[j] == -1)
            continue;
          w[next + j] = w[head + parent[j]];
          w[head + parent[j]] = j;
        }
        for (j = 0; j < n; j++) {
          if (parent[j] != -1)
            continue;
          k = cs_tdfs(j, k, w, head, next, post, stack);
        }
        return post;
      };
      return cs_post;
    }
    exports.name = "cs_post";
    exports.path = "sparse";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/algebra/sparse/cs_leaf.js
var require_cs_leaf = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/algebra/sparse/cs_leaf.js"(exports) {
    "use strict";
    function factory() {
      var cs_leaf = function(i, j, w, first, maxfirst, prevleaf, ancestor) {
        var s, sparent, jprev;
        var jleaf = 0;
        var q;
        if (i <= j || w[first + j] <= w[maxfirst + i])
          return -1;
        w[maxfirst + i] = w[first + j];
        jprev = w[prevleaf + i];
        w[prevleaf + i] = j;
        if (jprev === -1) {
          jleaf = 1;
          q = i;
        } else {
          jleaf = 2;
          for (q = jprev; q != w[ancestor + q]; q = w[ancestor + q]) ;
          for (s = jprev; s != q; s = sparent) {
            sparent = w[ancestor + s];
            w[ancestor + s] = q;
          }
        }
        return {
          jleaf,
          q
        };
      };
      return cs_leaf;
    }
    exports.name = "cs_leaf";
    exports.path = "sparse";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/algebra/sparse/cs_counts.js
var require_cs_counts = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/algebra/sparse/cs_counts.js"(exports) {
    "use strict";
    function factory(type, config, load) {
      var transpose = load(require_transpose2());
      var cs_leaf = load(require_cs_leaf());
      var cs_counts = function(a, parent, post, ata) {
        if (!a || !parent || !post)
          return null;
        var asize = a._size;
        var m = asize[0];
        var n = asize[1];
        var i, j, k, J, p, p0, p1;
        var s = 4 * n + (ata ? n + m + 1 : 0);
        var w = [];
        var ancestor = 0;
        var maxfirst = n;
        var prevleaf = 2 * n;
        var first = 3 * n;
        var head = 4 * n;
        var next = 5 * n + 1;
        for (k = 0; k < s; k++)
          w[k] = -1;
        var colcount = [];
        var at = transpose(a);
        var tindex = at._index;
        var tptr = at._ptr;
        for (k = 0; k < n; k++) {
          j = post[k];
          colcount[j] = w[first + j] == -1 ? 1 : 0;
          for (; j != -1 && w[first + j] == -1; j = parent[j])
            w[first + j] = k;
        }
        if (ata) {
          for (k = 0; k < n; k++)
            w[post[k]] = k;
          for (i = 0; i < m; i++) {
            for (k = n, p0 = tptr[i], p1 = tptr[i + 1], p = p0; p < p1; p++)
              k = Math.min(k, w[tindex[p]]);
            w[next + i] = w[head + k];
            w[head + k] = i;
          }
        }
        for (i = 0; i < n; i++)
          w[ancestor + i] = i;
        for (k = 0; k < n; k++) {
          j = post[k];
          if (parent[j] != -1)
            colcount[parent[j]]--;
          for (J = ata ? w[head + k] : j; J != -1; J = ata ? w[next + J] : -1) {
            for (p = tptr[J]; p < tptr[J + 1]; p++) {
              i = tindex[p];
              var r = cs_leaf(i, j, w, first, maxfirst, prevleaf, ancestor);
              if (r.jleaf >= 1)
                colcount[j]++;
              if (r.jleaf == 2)
                colcount[r.q]--;
            }
          }
          if (parent[j] != -1)
            w[ancestor + j] = parent[j];
        }
        for (j = 0; j < n; j++) {
          if (parent[j] != -1)
            colcount[parent[j]] += colcount[j];
        }
        return colcount;
      };
      return cs_counts;
    }
    exports.name = "cs_counts";
    exports.path = "sparse";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/algebra/sparse/cs_sqr.js
var require_cs_sqr = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/algebra/sparse/cs_sqr.js"(exports) {
    "use strict";
    function factory(type, config, load) {
      var cs_amd = load(require_cs_amd());
      var cs_permute = load(require_cs_permute());
      var cs_etree = load(require_cs_etree());
      var cs_post = load(require_cs_post());
      var cs_counts = load(require_cs_counts());
      var cs_sqr = function(order, a, qr) {
        var aptr = a._ptr;
        var asize = a._size;
        var n = asize[1];
        var k;
        var s = {};
        s.q = cs_amd(order, a);
        if (order && !s.q)
          return null;
        if (qr) {
          var c = order ? cs_permute(a, null, s.q, 0) : a;
          s.parent = cs_etree(c, 1);
          var post = cs_post(s.parent, n);
          s.cp = cs_counts(c, s.parent, post, 1);
          if (c && s.parent && s.cp && _vcount(c, s)) {
            for (s.unz = 0, k = 0; k < n; k++)
              s.unz += s.cp[k];
          }
        } else {
          s.unz = 4 * aptr[n] + n;
          s.lnz = s.unz;
        }
        return s;
      };
      var _vcount = function(a, s) {
        var aptr = a._ptr;
        var aindex = a._index;
        var asize = a._size;
        var m = asize[0];
        var n = asize[1];
        s.pinv = [];
        s.leftmost = [];
        var parent = s.parent;
        var pinv = s.pinv;
        var leftmost = s.leftmost;
        var w = [];
        var next = 0;
        var head = m;
        var tail = m + n;
        var nque = m + 2 * n;
        var i, k, p, p0, p1;
        for (k = 0; k < n; k++) {
          w[head + k] = -1;
          w[tail + k] = -1;
          w[nque + k] = 0;
        }
        for (i = 0; i < m; i++)
          leftmost[i] = -1;
        for (k = n - 1; k >= 0; k--) {
          for (p0 = aptr[k], p1 = aptr[k + 1], p = p0; p < p1; p++) {
            leftmost[aindex[p]] = k;
          }
        }
        for (i = m - 1; i >= 0; i--) {
          pinv[i] = -1;
          k = leftmost[i];
          if (k == -1)
            continue;
          if (w[nque + k]++ === 0)
            w[tail + k] = i;
          w[next + i] = w[head + k];
          w[head + k] = i;
        }
        s.lnz = 0;
        s.m2 = m;
        for (k = 0; k < n; k++) {
          i = w[head + k];
          s.lnz++;
          if (i < 0)
            i = s.m2++;
          pinv[i] = k;
          if (--nque[k] <= 0)
            continue;
          s.lnz += w[nque + k];
          var pa = parent[k];
          if (pa != -1) {
            if (w[nque + pa] === 0)
              w[tail + pa] = w[tail + k];
            w[next + w[tail + k]] = w[head + pa];
            w[head + pa] = w[next + i];
            w[nque + pa] += w[nque + k];
          }
        }
        for (i = 0; i < m; i++) {
          if (pinv[i] < 0)
            pinv[i] = k++;
        }
        return true;
      };
      return cs_sqr;
    }
    exports.name = "cs_sqr";
    exports.path = "sparse";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/relational/largerEq.js
var require_largerEq2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/relational/largerEq.js"(exports) {
    "use strict";
    var nearlyEqual = require_number().nearlyEqual;
    var bigNearlyEqual = require_nearlyEqual();
    function factory(type, config, load, typed) {
      var matrix = load(require_matrix());
      var algorithm03 = load(require_algorithm03());
      var algorithm07 = load(require_algorithm07());
      var algorithm12 = load(require_algorithm12());
      var algorithm13 = load(require_algorithm13());
      var algorithm14 = load(require_algorithm14());
      var latex = require_latex();
      var largerEq = typed("largerEq", {
        "boolean, boolean": function(x, y) {
          return x >= y;
        },
        "number, number": function(x, y) {
          return x >= y || nearlyEqual(x, y, config.epsilon);
        },
        "BigNumber, BigNumber": function(x, y) {
          return x.gte(y) || bigNearlyEqual(x, y, config.epsilon);
        },
        "Fraction, Fraction": function(x, y) {
          return x.compare(y) !== -1;
        },
        "Complex, Complex": function() {
          throw new TypeError("No ordering relation is defined for complex numbers");
        },
        "Unit, Unit": function(x, y) {
          if (!x.equalBase(y)) {
            throw new Error("Cannot compare units with different base");
          }
          return largerEq(x.value, y.value);
        },
        "string, string": function(x, y) {
          return x >= y;
        },
        "Matrix, Matrix": function(x, y) {
          var c;
          switch (x.storage()) {
            case "sparse":
              switch (y.storage()) {
                case "sparse":
                  c = algorithm07(x, y, largerEq);
                  break;
                default:
                  c = algorithm03(y, x, largerEq, true);
                  break;
              }
              break;
            default:
              switch (y.storage()) {
                case "sparse":
                  c = algorithm03(x, y, largerEq, false);
                  break;
                default:
                  c = algorithm13(x, y, largerEq);
                  break;
              }
              break;
          }
          return c;
        },
        "Array, Array": function(x, y) {
          return largerEq(matrix(x), matrix(y)).valueOf();
        },
        "Array, Matrix": function(x, y) {
          return largerEq(matrix(x), y);
        },
        "Matrix, Array": function(x, y) {
          return largerEq(x, matrix(y));
        },
        "Matrix, any": function(x, y) {
          var c;
          switch (x.storage()) {
            case "sparse":
              c = algorithm12(x, y, largerEq, false);
              break;
            default:
              c = algorithm14(x, y, largerEq, false);
              break;
          }
          return c;
        },
        "any, Matrix": function(x, y) {
          var c;
          switch (y.storage()) {
            case "sparse":
              c = algorithm12(y, x, largerEq, true);
              break;
            default:
              c = algorithm14(y, x, largerEq, true);
              break;
          }
          return c;
        },
        "Array, any": function(x, y) {
          return algorithm14(matrix(x), y, largerEq, false).valueOf();
        },
        "any, Array": function(x, y) {
          return algorithm14(matrix(y), x, largerEq, true).valueOf();
        }
      });
      largerEq.toTex = {
        2: "\\left(${args[0]}" + latex.operators["largerEq"] + "${args[1]}\\right)"
      };
      return largerEq;
    }
    exports.name = "largerEq";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/algebra/sparse/cs_marked.js
var require_cs_marked = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/algebra/sparse/cs_marked.js"(exports) {
    "use strict";
    function factory() {
      var cs_marked = function(w, j) {
        return w[j] < 0;
      };
      return cs_marked;
    }
    exports.name = "cs_marked";
    exports.path = "sparse";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/algebra/sparse/cs_mark.js
var require_cs_mark = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/algebra/sparse/cs_mark.js"(exports) {
    "use strict";
    function factory(type, config, load) {
      var cs_flip = load(require_cs_flip());
      var cs_mark = function(w, j) {
        w[j] = cs_flip(w[j]);
      };
      return cs_mark;
    }
    exports.name = "cs_mark";
    exports.path = "sparse";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/algebra/sparse/cs_unflip.js
var require_cs_unflip = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/algebra/sparse/cs_unflip.js"(exports) {
    "use strict";
    function factory(type, config, load) {
      var cs_flip = load(require_cs_flip());
      var cs_unflip = function(i) {
        return i < 0 ? cs_flip(i) : i;
      };
      return cs_unflip;
    }
    exports.name = "cs_unflip";
    exports.path = "sparse";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/algebra/sparse/cs_dfs.js
var require_cs_dfs = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/algebra/sparse/cs_dfs.js"(exports) {
    "use strict";
    function factory(type, config, load) {
      var cs_marked = load(require_cs_marked());
      var cs_mark = load(require_cs_mark());
      var cs_unflip = load(require_cs_unflip());
      var cs_dfs = function(j, g, top, xi, pinv) {
        var index = g._index;
        var ptr = g._ptr;
        var size = g._size;
        var n = size[1];
        var i, p, p2;
        var head = 0;
        xi[0] = j;
        while (head >= 0) {
          j = xi[head];
          var jnew = pinv ? pinv[j] : j;
          if (!cs_marked(ptr, j)) {
            cs_mark(ptr, j);
            xi[n + head] = jnew < 0 ? 0 : cs_unflip(ptr[jnew]);
          }
          var done = 1;
          for (p = xi[n + head], p2 = jnew < 0 ? 0 : cs_unflip(ptr[jnew + 1]); p < p2; p++) {
            i = index[p];
            if (cs_marked(ptr, i))
              continue;
            xi[n + head] = p;
            xi[++head] = i;
            done = 0;
            break;
          }
          if (done) {
            head--;
            xi[--top] = j;
          }
        }
        return top;
      };
      return cs_dfs;
    }
    exports.name = "cs_dfs";
    exports.path = "sparse";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/algebra/sparse/cs_reach.js
var require_cs_reach = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/algebra/sparse/cs_reach.js"(exports) {
    "use strict";
    function factory(type, config, load) {
      var cs_dfs = load(require_cs_dfs());
      var cs_marked = load(require_cs_marked());
      var cs_mark = load(require_cs_mark());
      var cs_reach = function(g, b, k, xi, pinv) {
        var gptr = g._ptr;
        var gsize = g._size;
        var bindex = b._index;
        var bptr = b._ptr;
        var n = gsize[1];
        var p, p0, p1;
        var top = n;
        for (p0 = bptr[k], p1 = bptr[k + 1], p = p0; p < p1; p++) {
          var i = bindex[p];
          if (!cs_marked(gptr, i)) {
            top = cs_dfs(i, g, top, xi, pinv);
          }
        }
        for (p = top; p < n; p++) {
          cs_mark(gptr, xi[p]);
        }
        return top;
      };
      return cs_reach;
    }
    exports.name = "cs_reach";
    exports.path = "sparse";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/algebra/sparse/cs_spsolve.js
var require_cs_spsolve = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/algebra/sparse/cs_spsolve.js"(exports) {
    "use strict";
    function factory(type, config, load) {
      var divideScalar = load(require_divideScalar());
      var multiply = load(require_multiply());
      var subtract = load(require_subtract());
      var cs_reach = load(require_cs_reach());
      var cs_spsolve = function(g, b, k, xi, x, pinv, lo) {
        var gvalues = g._values;
        var gindex = g._index;
        var gptr = g._ptr;
        var gsize = g._size;
        var n = gsize[1];
        var bvalues = b._values;
        var bindex = b._index;
        var bptr = b._ptr;
        var p, p0, p1, q;
        var top = cs_reach(g, b, k, xi, pinv);
        for (p = top; p < n; p++)
          x[xi[p]] = 0;
        for (p0 = bptr[k], p1 = bptr[k + 1], p = p0; p < p1; p++)
          x[bindex[p]] = bvalues[p];
        for (var px = top; px < n; px++) {
          var j = xi[px];
          var J = pinv ? pinv[j] : j;
          if (J < 0)
            continue;
          p0 = gptr[J];
          p1 = gptr[J + 1];
          x[j] = divideScalar(x[j], gvalues[lo ? p0 : p1 - 1]);
          p = lo ? p0 + 1 : p0;
          q = lo ? p1 : p1 - 1;
          for (; p < q; p++) {
            var i = gindex[p];
            x[i] = subtract(x[i], multiply(gvalues[p], x[j]));
          }
        }
        return top;
      };
      return cs_spsolve;
    }
    exports.name = "cs_spsolve";
    exports.path = "sparse";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/algebra/sparse/cs_lu.js
var require_cs_lu = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/algebra/sparse/cs_lu.js"(exports) {
    "use strict";
    function factory(type, config, load) {
      var abs = load(require_abs());
      var divideScalar = load(require_divideScalar());
      var multiply = load(require_multiply());
      var larger = load(require_larger());
      var largerEq = load(require_largerEq2());
      var cs_spsolve = load(require_cs_spsolve());
      var SparseMatrix = type.SparseMatrix;
      var cs_lu = function(m, s, tol) {
        if (!m)
          return null;
        var size = m._size;
        var n = size[1];
        var q;
        var lnz = 100;
        var unz = 100;
        if (s) {
          q = s.q;
          lnz = s.lnz || lnz;
          unz = s.unz || unz;
        }
        var lvalues = [];
        var lindex = [];
        var lptr = [];
        var L = new SparseMatrix({
          values: lvalues,
          index: lindex,
          ptr: lptr,
          size: [n, n]
        });
        var uvalues = [];
        var uindex = [];
        var uptr = [];
        var U = new SparseMatrix({
          values: uvalues,
          index: uindex,
          ptr: uptr,
          size: [n, n]
        });
        var pinv = [];
        var i, p;
        var x = [];
        var xi = [];
        for (i = 0; i < n; i++) {
          x[i] = 0;
          pinv[i] = -1;
          lptr[i + 1] = 0;
        }
        lnz = 0;
        unz = 0;
        for (var k = 0; k < n; k++) {
          lptr[k] = lnz;
          uptr[k] = unz;
          var col = q ? q[k] : k;
          var top = cs_spsolve(L, m, col, xi, x, pinv, 1);
          var ipiv = -1;
          var a = -1;
          for (p = top; p < n; p++) {
            i = xi[p];
            if (pinv[i] < 0) {
              var xabs = abs(x[i]);
              if (larger(xabs, a)) {
                a = xabs;
                ipiv = i;
              }
            } else {
              uindex[unz] = pinv[i];
              uvalues[unz++] = x[i];
            }
          }
          if (ipiv == -1 || a <= 0)
            return null;
          if (pinv[col] < 0 && largerEq(abs(x[col]), multiply(a, tol)))
            ipiv = col;
          var pivot = x[ipiv];
          uindex[unz] = k;
          uvalues[unz++] = pivot;
          pinv[ipiv] = k;
          lindex[lnz] = ipiv;
          lvalues[lnz++] = 1;
          for (p = top; p < n; p++) {
            i = xi[p];
            if (pinv[i] < 0) {
              lindex[lnz] = i;
              lvalues[lnz++] = divideScalar(x[i], pivot);
            }
            x[i] = 0;
          }
        }
        lptr[n] = lnz;
        uptr[n] = unz;
        for (p = 0; p < lnz; p++)
          lindex[p] = pinv[lindex[p]];
        lvalues.splice(lnz, lvalues.length - lnz);
        lindex.splice(lnz, lindex.length - lnz);
        uvalues.splice(unz, uvalues.length - unz);
        uindex.splice(unz, uindex.length - unz);
        return {
          L,
          U,
          pinv
        };
      };
      return cs_lu;
    }
    exports.name = "cs_lu";
    exports.path = "sparse";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/algebra/decomposition/slu.js
var require_slu2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/algebra/decomposition/slu.js"(exports) {
    "use strict";
    var util = require_utils();
    var number = util.number;
    var isInteger = number.isInteger;
    function factory(type, config, load, typed) {
      var cs_sqr = load(require_cs_sqr());
      var cs_lu = load(require_cs_lu());
      var slu = typed("slu", {
        "SparseMatrix, number, number": function(a, order, threshold) {
          if (!isInteger(order) || order < 0 || order > 3)
            throw new Error("Symbolic Ordering and Analysis order must be an integer number in the interval [0, 3]");
          if (threshold < 0 || threshold > 1)
            throw new Error("Partial pivoting threshold must be a number from 0 to 1");
          var s = cs_sqr(order, a, false);
          var f = cs_lu(a, s, threshold);
          return {
            L: f.L,
            U: f.U,
            p: f.pinv,
            q: s.q,
            toString: function() {
              return "L: " + this.L.toString() + "\nU: " + this.U.toString() + "\np: " + this.p.toString() + (this.q ? "\nq: " + this.q.toString() : "") + "\n";
            }
          };
        }
      });
      return slu;
    }
    exports.name = "slu";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/algebra/solver/utils/solveValidation.js
var require_solveValidation = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/algebra/solver/utils/solveValidation.js"(exports) {
    "use strict";
    var util = require_utils();
    var string = util.string;
    var array = util.array;
    var isArray = Array.isArray;
    function factory(type) {
      var DenseMatrix = type.DenseMatrix;
      var solveValidation = function(m, b, copy) {
        var size = m.size();
        if (size.length !== 2)
          throw new RangeError("Matrix must be two dimensional (size: " + string.format(size) + ")");
        var rows = size[0];
        var columns = size[1];
        if (rows !== columns)
          throw new RangeError("Matrix must be square (size: " + string.format(size) + ")");
        var data, i, bdata;
        if (b && b.isMatrix === true) {
          var msize = b.size();
          if (msize.length === 1) {
            if (msize[0] !== rows)
              throw new RangeError("Dimension mismatch. Matrix columns must match vector length.");
            data = [];
            bdata = b._data;
            for (i = 0; i < rows; i++) {
              data[i] = [bdata[i]];
            }
            return new DenseMatrix({
              data,
              size: [rows, 1],
              datatype: b._datatype
            });
          }
          if (msize.length === 2) {
            if (msize[0] !== rows || msize[1] !== 1)
              throw new RangeError("Dimension mismatch. Matrix columns must match vector length.");
            if (b.isDenseMatrix === true) {
              if (copy) {
                data = [];
                bdata = b._data;
                for (i = 0; i < rows; i++) {
                  data[i] = [bdata[i][0]];
                }
                return new DenseMatrix({
                  data,
                  size: [rows, 1],
                  datatype: b._datatype
                });
              }
              return b;
            }
            data = [];
            for (i = 0; i < rows; i++)
              data[i] = [0];
            var values = b._values;
            var index = b._index;
            var ptr = b._ptr;
            for (var k1 = ptr[1], k = ptr[0]; k < k1; k++) {
              i = index[k];
              data[i][0] = values[k];
            }
            return new DenseMatrix({
              data,
              size: [rows, 1],
              datatype: b._datatype
            });
          }
          throw new RangeError("Dimension mismatch. Matrix columns must match vector length.");
        }
        if (isArray(b)) {
          var asize = array.size(b);
          if (asize.length === 1) {
            if (asize[0] !== rows)
              throw new RangeError("Dimension mismatch. Matrix columns must match vector length.");
            data = [];
            for (i = 0; i < rows; i++) {
              data[i] = [b[i]];
            }
            return new DenseMatrix({
              data,
              size: [rows, 1]
            });
          }
          if (asize.length === 2) {
            if (asize[0] !== rows || asize[1] !== 1)
              throw new RangeError("Dimension mismatch. Matrix columns must match vector length.");
            data = [];
            for (i = 0; i < rows; i++) {
              data[i] = [b[i][0]];
            }
            return new DenseMatrix({
              data,
              size: [rows, 1]
            });
          }
          throw new RangeError("Dimension mismatch. Matrix columns must match vector length.");
        }
      };
      return solveValidation;
    }
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/algebra/solver/lsolve.js
var require_lsolve2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/algebra/solver/lsolve.js"(exports) {
    "use strict";
    function factory(type, config, load, typed) {
      var matrix = load(require_matrix());
      var divideScalar = load(require_divideScalar());
      var multiplyScalar = load(require_multiplyScalar());
      var subtract = load(require_subtract());
      var equalScalar = load(require_equalScalar());
      var solveValidation = load(require_solveValidation());
      var DenseMatrix = type.DenseMatrix;
      var lsolve = typed("lsolve", {
        "SparseMatrix, Array | Matrix": function(m, b) {
          return _sparseForwardSubstitution(m, b);
        },
        "DenseMatrix, Array | Matrix": function(m, b) {
          return _denseForwardSubstitution(m, b);
        },
        "Array, Array | Matrix": function(a, b) {
          var m = matrix(a);
          var r = _denseForwardSubstitution(m, b);
          return r.valueOf();
        }
      });
      var _denseForwardSubstitution = function(m, b) {
        b = solveValidation(m, b, true);
        var bdata = b._data;
        var rows = m._size[0];
        var columns = m._size[1];
        var x = [];
        var data = m._data;
        for (var j = 0; j < columns; j++) {
          var bj = bdata[j][0] || 0;
          var xj;
          if (!equalScalar(bj, 0)) {
            var vjj = data[j][j];
            if (equalScalar(vjj, 0)) {
              throw new Error("Linear system cannot be solved since matrix is singular");
            }
            xj = divideScalar(bj, vjj);
            for (var i = j + 1; i < rows; i++) {
              bdata[i] = [subtract(bdata[i][0] || 0, multiplyScalar(xj, data[i][j]))];
            }
          } else {
            xj = 0;
          }
          x[j] = [xj];
        }
        return new DenseMatrix({
          data: x,
          size: [rows, 1]
        });
      };
      var _sparseForwardSubstitution = function(m, b) {
        b = solveValidation(m, b, true);
        var bdata = b._data;
        var rows = m._size[0];
        var columns = m._size[1];
        var values = m._values;
        var index = m._index;
        var ptr = m._ptr;
        var i, k;
        var x = [];
        for (var j = 0; j < columns; j++) {
          var bj = bdata[j][0] || 0;
          if (!equalScalar(bj, 0)) {
            var vjj = 0;
            var jvalues = [];
            var jindex = [];
            var l = ptr[j + 1];
            for (k = ptr[j]; k < l; k++) {
              i = index[k];
              if (i === j) {
                vjj = values[k];
              } else if (i > j) {
                jvalues.push(values[k]);
                jindex.push(i);
              }
            }
            if (equalScalar(vjj, 0)) {
              throw new Error("Linear system cannot be solved since matrix is singular");
            }
            var xj = divideScalar(bj, vjj);
            for (k = 0, l = jindex.length; k < l; k++) {
              i = jindex[k];
              bdata[i] = [subtract(bdata[i][0] || 0, multiplyScalar(xj, jvalues[k]))];
            }
            x[j] = [xj];
          } else {
            x[j] = [0];
          }
        }
        return new DenseMatrix({
          data: x,
          size: [rows, 1]
        });
      };
      return lsolve;
    }
    exports.name = "lsolve";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/algebra/sparse/cs_ipvec.js
var require_cs_ipvec = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/algebra/sparse/cs_ipvec.js"(exports) {
    "use strict";
    function factory() {
      var cs_ipvec = function(p, b, n) {
        var k;
        var n = b.length;
        var x = [];
        if (p) {
          for (k = 0; k < n; k++) {
            x[p[k]] = b[k];
          }
        } else {
          for (k = 0; k < n; k++) {
            x[k] = b[k];
          }
        }
        return x;
      };
      return cs_ipvec;
    }
    exports.name = "cs_ipvec";
    exports.path = "sparse";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/algebra/solver/usolve.js
var require_usolve2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/algebra/solver/usolve.js"(exports) {
    "use strict";
    function factory(type, config, load, typed) {
      var matrix = load(require_matrix());
      var divideScalar = load(require_divideScalar());
      var multiplyScalar = load(require_multiplyScalar());
      var subtract = load(require_subtract());
      var equalScalar = load(require_equalScalar());
      var solveValidation = load(require_solveValidation());
      var DenseMatrix = type.DenseMatrix;
      var usolve = typed("usolve", {
        "SparseMatrix, Array | Matrix": function(m, b) {
          return _sparseBackwardSubstitution(m, b);
        },
        "DenseMatrix, Array | Matrix": function(m, b) {
          return _denseBackwardSubstitution(m, b);
        },
        "Array, Array | Matrix": function(a, b) {
          var m = matrix(a);
          var r = _denseBackwardSubstitution(m, b);
          return r.valueOf();
        }
      });
      var _denseBackwardSubstitution = function(m, b) {
        b = solveValidation(m, b, true);
        var bdata = b._data;
        var rows = m._size[0];
        var columns = m._size[1];
        var x = [];
        var data = m._data;
        for (var j = columns - 1; j >= 0; j--) {
          var bj = bdata[j][0] || 0;
          var xj;
          if (!equalScalar(bj, 0)) {
            var vjj = data[j][j];
            if (equalScalar(vjj, 0)) {
              throw new Error("Linear system cannot be solved since matrix is singular");
            }
            xj = divideScalar(bj, vjj);
            for (var i = j - 1; i >= 0; i--) {
              bdata[i] = [subtract(bdata[i][0] || 0, multiplyScalar(xj, data[i][j]))];
            }
          } else {
            xj = 0;
          }
          x[j] = [xj];
        }
        return new DenseMatrix({
          data: x,
          size: [rows, 1]
        });
      };
      var _sparseBackwardSubstitution = function(m, b) {
        b = solveValidation(m, b, true);
        var bdata = b._data;
        var rows = m._size[0];
        var columns = m._size[1];
        var values = m._values;
        var index = m._index;
        var ptr = m._ptr;
        var i, k;
        var x = [];
        for (var j = columns - 1; j >= 0; j--) {
          var bj = bdata[j][0] || 0;
          if (!equalScalar(bj, 0)) {
            var vjj = 0;
            var jvalues = [];
            var jindex = [];
            var f = ptr[j];
            var l = ptr[j + 1];
            for (k = l - 1; k >= f; k--) {
              i = index[k];
              if (i === j) {
                vjj = values[k];
              } else if (i < j) {
                jvalues.push(values[k]);
                jindex.push(i);
              }
            }
            if (equalScalar(vjj, 0)) {
              throw new Error("Linear system cannot be solved since matrix is singular");
            }
            var xj = divideScalar(bj, vjj);
            for (k = 0, l = jindex.length; k < l; k++) {
              i = jindex[k];
              bdata[i] = [subtract(bdata[i][0], multiplyScalar(xj, jvalues[k]))];
            }
            x[j] = [xj];
          } else {
            x[j] = [0];
          }
        }
        return new DenseMatrix({
          data: x,
          size: [rows, 1]
        });
      };
      return usolve;
    }
    exports.name = "usolve";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/algebra/solver/lusolve.js
var require_lusolve2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/algebra/solver/lusolve.js"(exports) {
    "use strict";
    var isArray = Array.isArray;
    function factory(type, config, load, typed) {
      var matrix = load(require_matrix());
      var lup = load(require_lup2());
      var slu = load(require_slu2());
      var cs_ipvec = load(require_cs_ipvec());
      var solveValidation = load(require_solveValidation());
      var usolve = load(require_usolve2());
      var lsolve = load(require_lsolve2());
      var lusolve = typed("lusolve", {
        "Array, Array | Matrix": function(a, b) {
          a = matrix(a);
          var d = lup(a);
          var x = _lusolve(d.L, d.U, d.p, null, b);
          return x.valueOf();
        },
        "DenseMatrix, Array | Matrix": function(a, b) {
          var d = lup(a);
          return _lusolve(d.L, d.U, d.p, null, b);
        },
        "SparseMatrix, Array | Matrix": function(a, b) {
          var d = lup(a);
          return _lusolve(d.L, d.U, d.p, null, b);
        },
        "SparseMatrix, Array | Matrix, number, number": function(a, b, order, threshold) {
          var d = slu(a, order, threshold);
          return _lusolve(d.L, d.U, d.p, d.q, b);
        },
        "Object, Array | Matrix": function(d, b) {
          return _lusolve(d.L, d.U, d.p, d.q, b);
        }
      });
      var _toMatrix = function(a) {
        if (a && a.isMatrix === true)
          return a;
        if (isArray(a))
          return matrix(a);
        throw new TypeError("Invalid Matrix LU decomposition");
      };
      var _lusolve = function(l, u, p, q, b) {
        l = _toMatrix(l);
        u = _toMatrix(u);
        b = solveValidation(l, b, false);
        if (p)
          b._data = cs_ipvec(p, b._data);
        var y = lsolve(l, b);
        var x = usolve(u, y);
        if (q)
          x._data = cs_ipvec(q, x._data);
        return x;
      };
      return lusolve;
    }
    exports.name = "lusolve";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/algebra/index.js
var require_algebra = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/algebra/index.js"(exports, module) {
    module.exports = [
      require_derivative2(),
      // simplify
      require_simplify2(),
      // decomposition
      require_lup2(),
      require_slu2(),
      // solver
      require_lsolve2(),
      require_lusolve2(),
      require_usolve2()
    ];
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/utils/isNegative.js
var require_isNegative2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/utils/isNegative.js"(exports) {
    "use strict";
    var deepMap = require_deepMap();
    var number = require_number();
    function factory(type, config, load, typed) {
      var isNegative = typed("isNegative", {
        "number": function(x) {
          return x < 0;
        },
        "BigNumber": function(x) {
          return x.isNeg() && !x.isZero() && !x.isNaN();
        },
        "Fraction": function(x) {
          return x.s < 0;
        },
        "Unit": function(x) {
          return isNegative(x.value);
        },
        "Array | Matrix": function(x) {
          return deepMap(x, isNegative);
        }
      });
      return isNegative;
    }
    exports.name = "isNegative";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/arithmetic/cbrt.js
var require_cbrt2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/arithmetic/cbrt.js"(exports) {
    "use strict";
    var deepMap = require_deepMap();
    function factory(type, config, load, typed) {
      var unaryMinus = load(require_unaryMinus());
      var isNegative = load(require_isNegative2());
      var matrix = load(require_matrix());
      var cbrt = typed("cbrt", {
        "number": _cbrtNumber,
        // note: signature 'number, boolean' is also supported,
        //       created by typed as it knows how to convert number to Complex
        "Complex": _cbrtComplex,
        "Complex, boolean": _cbrtComplex,
        "BigNumber": function(x) {
          return x.cbrt();
        },
        "Unit": _cbrtUnit,
        "Array | Matrix": function(x) {
          return deepMap(x, cbrt, true);
        }
      });
      function _cbrtComplex(x, allRoots) {
        var arg_3 = x.arg() / 3;
        var abs = x.abs();
        var principal = new type.Complex(_cbrtNumber(abs), 0).mul(
          new type.Complex(0, arg_3).exp()
        );
        if (allRoots) {
          var all = [
            principal,
            new type.Complex(_cbrtNumber(abs), 0).mul(
              new type.Complex(0, arg_3 + Math.PI * 2 / 3).exp()
            ),
            new type.Complex(_cbrtNumber(abs), 0).mul(
              new type.Complex(0, arg_3 - Math.PI * 2 / 3).exp()
            )
          ];
          return config.matrix === "Array" ? all : matrix(all);
        } else {
          return principal;
        }
      }
      function _cbrtUnit(x) {
        if (x.value && x.value.isComplex) {
          var result = x.clone();
          result.value = 1;
          result = result.pow(1 / 3);
          result.value = _cbrtComplex(x.value);
          return result;
        } else {
          var negate = isNegative(x.value);
          if (negate) {
            x.value = unaryMinus(x.value);
          }
          var third;
          if (x.value && x.value.isBigNumber) {
            third = new type.BigNumber(1).div(3);
          } else if (x.value && x.value.isFraction) {
            third = new type.Fraction(1, 3);
          } else {
            third = 1 / 3;
          }
          var result = x.pow(third);
          if (negate) {
            result.value = unaryMinus(result.value);
          }
          return result;
        }
      }
      cbrt.toTex = { 1: "\\sqrt[3]{${args[0]}}" };
      return cbrt;
    }
    var _cbrtNumber = Math.cbrt || function(x) {
      if (x === 0) {
        return x;
      }
      var negate = x < 0;
      var result;
      if (negate) {
        x = -x;
      }
      if (isFinite(x)) {
        result = Math.exp(Math.log(x) / 3);
        result = (x / (result * result) + 2 * result) / 3;
      } else {
        result = x;
      }
      return negate ? -result : result;
    };
    exports.name = "cbrt";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/arithmetic/ceil.js
var require_ceil2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/arithmetic/ceil.js"(exports) {
    "use strict";
    var deepMap = require_deepMap();
    function factory(type, config, load, typed) {
      var ceil = typed("ceil", {
        "number": Math.ceil,
        "Complex": function(x) {
          return x.ceil();
        },
        "BigNumber": function(x) {
          return x.ceil();
        },
        "Fraction": function(x) {
          return x.ceil();
        },
        "Array | Matrix": function(x) {
          return deepMap(x, ceil, true);
        }
      });
      ceil.toTex = { 1: "\\left\\lceil${args[0]}\\right\\rceil" };
      return ceil;
    }
    exports.name = "ceil";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/arithmetic/cube.js
var require_cube2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/arithmetic/cube.js"(exports) {
    "use strict";
    var deepMap = require_deepMap();
    function factory(type, config, load, typed) {
      var cube = typed("cube", {
        "number": function(x) {
          return x * x * x;
        },
        "Complex": function(x) {
          return x.mul(x).mul(x);
        },
        "BigNumber": function(x) {
          return x.times(x).times(x);
        },
        "Fraction": function(x) {
          return x.pow(3);
        },
        "Array | Matrix": function(x) {
          return deepMap(x, cube, true);
        },
        "Unit": function(x) {
          return x.pow(3);
        }
      });
      cube.toTex = { 1: "\\left(${args[0]}\\right)^3" };
      return cube;
    }
    exports.name = "cube";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/type/matrix/utils/algorithm02.js
var require_algorithm02 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/type/matrix/utils/algorithm02.js"(exports) {
    "use strict";
    var DimensionError = require_DimensionError();
    function factory(type, config, load, typed) {
      var equalScalar = load(require_equalScalar());
      var SparseMatrix = type.SparseMatrix;
      var algorithm02 = function(denseMatrix, sparseMatrix, callback, inverse) {
        var adata = denseMatrix._data;
        var asize = denseMatrix._size;
        var adt = denseMatrix._datatype;
        var bvalues = sparseMatrix._values;
        var bindex = sparseMatrix._index;
        var bptr = sparseMatrix._ptr;
        var bsize = sparseMatrix._size;
        var bdt = sparseMatrix._datatype;
        if (asize.length !== bsize.length)
          throw new DimensionError(asize.length, bsize.length);
        if (asize[0] !== bsize[0] || asize[1] !== bsize[1])
          throw new RangeError("Dimension mismatch. Matrix A (" + asize + ") must match Matrix B (" + bsize + ")");
        if (!bvalues)
          throw new Error("Cannot perform operation on Dense Matrix and Pattern Sparse Matrix");
        var rows = asize[0];
        var columns = asize[1];
        var dt;
        var eq = equalScalar;
        var zero = 0;
        var cf = callback;
        if (typeof adt === "string" && adt === bdt) {
          dt = adt;
          eq = typed.find(equalScalar, [dt, dt]);
          zero = typed.convert(0, dt);
          cf = typed.find(callback, [dt, dt]);
        }
        var cvalues = [];
        var cindex = [];
        var cptr = [];
        for (var j = 0; j < columns; j++) {
          cptr[j] = cindex.length;
          for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
            var i = bindex[k];
            var cij = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);
            if (!eq(cij, zero)) {
              cindex.push(i);
              cvalues.push(cij);
            }
          }
        }
        cptr[columns] = cindex.length;
        return new SparseMatrix({
          values: cvalues,
          index: cindex,
          ptr: cptr,
          size: [rows, columns],
          datatype: dt
        });
      };
      return algorithm02;
    }
    exports.name = "algorithm02";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/arithmetic/dotDivide.js
var require_dotDivide2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/arithmetic/dotDivide.js"(exports) {
    "use strict";
    function factory(type, config, load, typed) {
      var matrix = load(require_matrix());
      var divideScalar = load(require_divideScalar());
      var latex = require_latex();
      var algorithm02 = load(require_algorithm02());
      var algorithm03 = load(require_algorithm03());
      var algorithm07 = load(require_algorithm07());
      var algorithm11 = load(require_algorithm11());
      var algorithm12 = load(require_algorithm12());
      var algorithm13 = load(require_algorithm13());
      var algorithm14 = load(require_algorithm14());
      var dotDivide = typed("dotDivide", {
        "any, any": divideScalar,
        "Matrix, Matrix": function(x, y) {
          var c;
          switch (x.storage()) {
            case "sparse":
              switch (y.storage()) {
                case "sparse":
                  c = algorithm07(x, y, divideScalar, false);
                  break;
                default:
                  c = algorithm02(y, x, divideScalar, true);
                  break;
              }
              break;
            default:
              switch (y.storage()) {
                case "sparse":
                  c = algorithm03(x, y, divideScalar, false);
                  break;
                default:
                  c = algorithm13(x, y, divideScalar);
                  break;
              }
              break;
          }
          return c;
        },
        "Array, Array": function(x, y) {
          return dotDivide(matrix(x), matrix(y)).valueOf();
        },
        "Array, Matrix": function(x, y) {
          return dotDivide(matrix(x), y);
        },
        "Matrix, Array": function(x, y) {
          return dotDivide(x, matrix(y));
        },
        "Matrix, any": function(x, y) {
          var c;
          switch (x.storage()) {
            case "sparse":
              c = algorithm11(x, y, divideScalar, false);
              break;
            default:
              c = algorithm14(x, y, divideScalar, false);
              break;
          }
          return c;
        },
        "any, Matrix": function(x, y) {
          var c;
          switch (y.storage()) {
            case "sparse":
              c = algorithm12(y, x, divideScalar, true);
              break;
            default:
              c = algorithm14(y, x, divideScalar, true);
              break;
          }
          return c;
        },
        "Array, any": function(x, y) {
          return algorithm14(matrix(x), y, divideScalar, false).valueOf();
        },
        "any, Array": function(x, y) {
          return algorithm14(matrix(y), x, divideScalar, true).valueOf();
        }
      });
      dotDivide.toTex = {
        2: "\\left(${args[0]}" + latex.operators["dotDivide"] + "${args[1]}\\right)"
      };
      return dotDivide;
    }
    exports.name = "dotDivide";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/type/matrix/utils/algorithm09.js
var require_algorithm09 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/type/matrix/utils/algorithm09.js"(exports) {
    "use strict";
    var DimensionError = require_DimensionError();
    function factory(type, config, load, typed) {
      var equalScalar = load(require_equalScalar());
      var SparseMatrix = type.SparseMatrix;
      var algorithm09 = function(a, b, callback) {
        var avalues = a._values;
        var aindex = a._index;
        var aptr = a._ptr;
        var asize = a._size;
        var adt = a._datatype;
        var bvalues = b._values;
        var bindex = b._index;
        var bptr = b._ptr;
        var bsize = b._size;
        var bdt = b._datatype;
        if (asize.length !== bsize.length)
          throw new DimensionError(asize.length, bsize.length);
        if (asize[0] !== bsize[0] || asize[1] !== bsize[1])
          throw new RangeError("Dimension mismatch. Matrix A (" + asize + ") must match Matrix B (" + bsize + ")");
        var rows = asize[0];
        var columns = asize[1];
        var dt;
        var eq = equalScalar;
        var zero = 0;
        var cf = callback;
        if (typeof adt === "string" && adt === bdt) {
          dt = adt;
          eq = typed.find(equalScalar, [dt, dt]);
          zero = typed.convert(0, dt);
          cf = typed.find(callback, [dt, dt]);
        }
        var cvalues = avalues && bvalues ? [] : void 0;
        var cindex = [];
        var cptr = [];
        var c = new SparseMatrix({
          values: cvalues,
          index: cindex,
          ptr: cptr,
          size: [rows, columns],
          datatype: dt
        });
        var x = cvalues ? [] : void 0;
        var w = [];
        var i, j, k, k0, k1;
        for (j = 0; j < columns; j++) {
          cptr[j] = cindex.length;
          var mark = j + 1;
          if (x) {
            for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
              i = bindex[k];
              w[i] = mark;
              x[i] = bvalues[k];
            }
          }
          for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
            i = aindex[k];
            if (x) {
              var vb = w[i] === mark ? x[i] : zero;
              var vc = cf(avalues[k], vb);
              if (!eq(vc, zero)) {
                cindex.push(i);
                cvalues.push(vc);
              }
            } else {
              cindex.push(i);
            }
          }
        }
        cptr[columns] = cindex.length;
        return c;
      };
      return algorithm09;
    }
    exports.name = "algorithm09";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/arithmetic/dotMultiply.js
var require_dotMultiply2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/arithmetic/dotMultiply.js"(exports) {
    "use strict";
    function factory(type, config, load, typed) {
      var matrix = load(require_matrix());
      var multiplyScalar = load(require_multiplyScalar());
      var latex = require_latex();
      var algorithm02 = load(require_algorithm02());
      var algorithm09 = load(require_algorithm09());
      var algorithm11 = load(require_algorithm11());
      var algorithm13 = load(require_algorithm13());
      var algorithm14 = load(require_algorithm14());
      var dotMultiply = typed("dotMultiply", {
        "any, any": multiplyScalar,
        "Matrix, Matrix": function(x, y) {
          var c;
          switch (x.storage()) {
            case "sparse":
              switch (y.storage()) {
                case "sparse":
                  c = algorithm09(x, y, multiplyScalar, false);
                  break;
                default:
                  c = algorithm02(y, x, multiplyScalar, true);
                  break;
              }
              break;
            default:
              switch (y.storage()) {
                case "sparse":
                  c = algorithm02(x, y, multiplyScalar, false);
                  break;
                default:
                  c = algorithm13(x, y, multiplyScalar);
                  break;
              }
              break;
          }
          return c;
        },
        "Array, Array": function(x, y) {
          return dotMultiply(matrix(x), matrix(y)).valueOf();
        },
        "Array, Matrix": function(x, y) {
          return dotMultiply(matrix(x), y);
        },
        "Matrix, Array": function(x, y) {
          return dotMultiply(x, matrix(y));
        },
        "Matrix, any": function(x, y) {
          var c;
          switch (x.storage()) {
            case "sparse":
              c = algorithm11(x, y, multiplyScalar, false);
              break;
            default:
              c = algorithm14(x, y, multiplyScalar, false);
              break;
          }
          return c;
        },
        "any, Matrix": function(x, y) {
          var c;
          switch (y.storage()) {
            case "sparse":
              c = algorithm11(y, x, multiplyScalar, true);
              break;
            default:
              c = algorithm14(y, x, multiplyScalar, true);
              break;
          }
          return c;
        },
        "Array, any": function(x, y) {
          return algorithm14(matrix(x), y, multiplyScalar, false).valueOf();
        },
        "any, Array": function(x, y) {
          return algorithm14(matrix(y), x, multiplyScalar, true).valueOf();
        }
      });
      dotMultiply.toTex = {
        2: "\\left(${args[0]}" + latex.operators["dotMultiply"] + "${args[1]}\\right)"
      };
      return dotMultiply;
    }
    exports.name = "dotMultiply";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/arithmetic/dotPow.js
var require_dotPow2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/arithmetic/dotPow.js"(exports) {
    "use strict";
    function factory(type, config, load, typed) {
      var matrix = load(require_matrix());
      var pow = load(require_pow());
      var latex = require_latex();
      var algorithm03 = load(require_algorithm03());
      var algorithm07 = load(require_algorithm07());
      var algorithm11 = load(require_algorithm11());
      var algorithm12 = load(require_algorithm12());
      var algorithm13 = load(require_algorithm13());
      var algorithm14 = load(require_algorithm14());
      var dotPow = typed("dotPow", {
        "any, any": pow,
        "Matrix, Matrix": function(x, y) {
          var c;
          switch (x.storage()) {
            case "sparse":
              switch (y.storage()) {
                case "sparse":
                  c = algorithm07(x, y, pow, false);
                  break;
                default:
                  c = algorithm03(y, x, pow, true);
                  break;
              }
              break;
            default:
              switch (y.storage()) {
                case "sparse":
                  c = algorithm03(x, y, pow, false);
                  break;
                default:
                  c = algorithm13(x, y, pow);
                  break;
              }
              break;
          }
          return c;
        },
        "Array, Array": function(x, y) {
          return dotPow(matrix(x), matrix(y)).valueOf();
        },
        "Array, Matrix": function(x, y) {
          return dotPow(matrix(x), y);
        },
        "Matrix, Array": function(x, y) {
          return dotPow(x, matrix(y));
        },
        "Matrix, any": function(x, y) {
          var c;
          switch (x.storage()) {
            case "sparse":
              c = algorithm11(x, y, dotPow, false);
              break;
            default:
              c = algorithm14(x, y, dotPow, false);
              break;
          }
          return c;
        },
        "any, Matrix": function(x, y) {
          var c;
          switch (y.storage()) {
            case "sparse":
              c = algorithm12(y, x, dotPow, true);
              break;
            default:
              c = algorithm14(y, x, dotPow, true);
              break;
          }
          return c;
        },
        "Array, any": function(x, y) {
          return algorithm14(matrix(x), y, dotPow, false).valueOf();
        },
        "any, Array": function(x, y) {
          return algorithm14(matrix(y), x, dotPow, true).valueOf();
        }
      });
      dotPow.toTex = {
        2: "\\left(${args[0]}" + latex.operators["dotPow"] + "${args[1]}\\right)"
      };
      return dotPow;
    }
    exports.name = "dotPow";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/arithmetic/exp.js
var require_exp2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/arithmetic/exp.js"(exports) {
    "use strict";
    var deepMap = require_deepMap();
    function factory(type, config, load, typed) {
      var exp = typed("exp", {
        "number": Math.exp,
        "Complex": function(x) {
          return x.exp();
        },
        "BigNumber": function(x) {
          return x.exp();
        },
        "Array | Matrix": function(x) {
          return deepMap(x, exp);
        }
      });
      exp.toTex = { 1: "\\exp\\left(${args[0]}\\right)" };
      return exp;
    }
    exports.name = "exp";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/arithmetic/floor.js
var require_floor2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/arithmetic/floor.js"(exports) {
    "use strict";
    var deepMap = require_deepMap();
    function factory(type, config, load, typed) {
      var floor = typed("floor", {
        "number": Math.floor,
        "Complex": function(x) {
          return x.floor();
        },
        "BigNumber": function(x) {
          return x.floor();
        },
        "Fraction": function(x) {
          return x.floor();
        },
        "Array | Matrix": function(x) {
          return deepMap(x, floor, true);
        }
      });
      floor.toTex = { 1: "\\left\\lfloor${args[0]}\\right\\rfloor" };
      return floor;
    }
    exports.name = "floor";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/arithmetic/gcd.js
var require_gcd2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/arithmetic/gcd.js"(exports) {
    "use strict";
    var isInteger = require_number().isInteger;
    function factory(type, config, load, typed) {
      var matrix = load(require_matrix());
      var algorithm01 = load(require_algorithm01());
      var algorithm04 = load(require_algorithm04());
      var algorithm10 = load(require_algorithm10());
      var algorithm13 = load(require_algorithm13());
      var algorithm14 = load(require_algorithm14());
      var gcd = typed("gcd", {
        "number, number": _gcd,
        "BigNumber, BigNumber": _gcdBigNumber,
        "Fraction, Fraction": function(x, y) {
          return x.gcd(y);
        },
        "Matrix, Matrix": function(x, y) {
          var c;
          switch (x.storage()) {
            case "sparse":
              switch (y.storage()) {
                case "sparse":
                  c = algorithm04(x, y, gcd);
                  break;
                default:
                  c = algorithm01(y, x, gcd, true);
                  break;
              }
              break;
            default:
              switch (y.storage()) {
                case "sparse":
                  c = algorithm01(x, y, gcd, false);
                  break;
                default:
                  c = algorithm13(x, y, gcd);
                  break;
              }
              break;
          }
          return c;
        },
        "Array, Array": function(x, y) {
          return gcd(matrix(x), matrix(y)).valueOf();
        },
        "Array, Matrix": function(x, y) {
          return gcd(matrix(x), y);
        },
        "Matrix, Array": function(x, y) {
          return gcd(x, matrix(y));
        },
        "Matrix, number | BigNumber": function(x, y) {
          var c;
          switch (x.storage()) {
            case "sparse":
              c = algorithm10(x, y, gcd, false);
              break;
            default:
              c = algorithm14(x, y, gcd, false);
              break;
          }
          return c;
        },
        "number | BigNumber, Matrix": function(x, y) {
          var c;
          switch (y.storage()) {
            case "sparse":
              c = algorithm10(y, x, gcd, true);
              break;
            default:
              c = algorithm14(y, x, gcd, true);
              break;
          }
          return c;
        },
        "Array, number | BigNumber": function(x, y) {
          return algorithm14(matrix(x), y, gcd, false).valueOf();
        },
        "number | BigNumber, Array": function(x, y) {
          return algorithm14(matrix(y), x, gcd, true).valueOf();
        },
        // TODO: need a smarter notation here
        "Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber": function(a, b, args) {
          var res = gcd(a, b);
          for (var i = 0; i < args.length; i++) {
            res = gcd(res, args[i]);
          }
          return res;
        }
      });
      gcd.toTex = "\\gcd\\left(${args}\\right)";
      return gcd;
      function _gcdBigNumber(a, b) {
        if (!a.isInt() || !b.isInt()) {
          throw new Error("Parameters in function gcd must be integer numbers");
        }
        var zero = new type.BigNumber(0);
        while (!b.isZero()) {
          var r = a.mod(b);
          a = b;
          b = r;
        }
        return a.lt(zero) ? a.neg() : a;
      }
    }
    function _gcd(a, b) {
      if (!isInteger(a) || !isInteger(b)) {
        throw new Error("Parameters in function gcd must be integer numbers");
      }
      var r;
      while (b != 0) {
        r = a % b;
        a = b;
        b = r;
      }
      return a < 0 ? -a : a;
    }
    exports.name = "gcd";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/arithmetic/sqrt.js
var require_sqrt2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/arithmetic/sqrt.js"(exports) {
    "use strict";
    var deepMap = require_deepMap();
    function factory(type, config, load, typed) {
      var sqrt = typed("sqrt", {
        "number": _sqrtNumber,
        "Complex": function(x) {
          return x.sqrt();
        },
        "BigNumber": function(x) {
          if (!x.isNegative() || config.predictable) {
            return x.sqrt();
          } else {
            return _sqrtNumber(x.toNumber());
          }
        },
        "Array | Matrix": function(x) {
          return deepMap(x, sqrt, true);
        },
        "Unit": function(x) {
          return x.pow(0.5);
        }
      });
      function _sqrtNumber(x) {
        if (x >= 0 || config.predictable) {
          return Math.sqrt(x);
        } else {
          return new type.Complex(x, 0).sqrt();
        }
      }
      sqrt.toTex = { 1: "\\sqrt{${args[0]}}" };
      return sqrt;
    }
    exports.name = "sqrt";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/utils/isPositive.js
var require_isPositive2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/utils/isPositive.js"(exports) {
    "use strict";
    var deepMap = require_deepMap();
    var number = require_number();
    function factory(type, config, load, typed) {
      var isPositive = typed("isPositive", {
        "number": function(x) {
          return x > 0;
        },
        "BigNumber": function(x) {
          return !x.isNeg() && !x.isZero() && !x.isNaN();
        },
        "Fraction": function(x) {
          return x.s > 0 && x.n > 0;
        },
        "Unit": function(x) {
          return isPositive(x.value);
        },
        "Array | Matrix": function(x) {
          return deepMap(x, isPositive);
        }
      });
      return isPositive;
    }
    exports.name = "isPositive";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/arithmetic/hypot.js
var require_hypot2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/arithmetic/hypot.js"(exports) {
    "use strict";
    var flatten = require_array().flatten;
    function factory(type, config, load, typed) {
      var abs = load(require_abs());
      var add = load(require_addScalar());
      var divide = load(require_divideScalar());
      var multiply = load(require_multiplyScalar());
      var sqrt = load(require_sqrt2());
      var smaller = load(require_smaller());
      var isPositive = load(require_isPositive2());
      var hypot = typed("hypot", {
        "... number | BigNumber": _hypot,
        "Array": function(x) {
          return hypot.apply(hypot, flatten(x));
        },
        "Matrix": function(x) {
          return hypot.apply(hypot, flatten(x.toArray()));
        }
      });
      function _hypot(args) {
        var result = 0;
        var largest = 0;
        for (var i = 0; i < args.length; i++) {
          var value = abs(args[i]);
          if (smaller(largest, value)) {
            result = multiply(result, multiply(divide(largest, value), divide(largest, value)));
            result = add(result, 1);
            largest = value;
          } else {
            result = add(result, isPositive(value) ? multiply(divide(value, largest), divide(value, largest)) : value);
          }
        }
        return multiply(largest, sqrt(result));
      }
      hypot.toTex = "\\hypot\\left(${args}\\right)";
      return hypot;
    }
    exports.name = "hypot";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/utils/collection/scatter.js
var require_scatter = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/utils/collection/scatter.js"(exports, module) {
    "use strict";
    module.exports = function scatter(a, j, w, x, u, mark, c, f, inverse, update, value) {
      var avalues = a._values;
      var aindex = a._index;
      var aptr = a._ptr;
      var cindex = c._index;
      var k, k0, k1, i;
      if (x) {
        for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
          i = aindex[k];
          if (w[i] !== mark) {
            w[i] = mark;
            cindex.push(i);
            if (update) {
              x[i] = inverse ? f(avalues[k], value) : f(value, avalues[k]);
              u[i] = mark;
            } else {
              x[i] = avalues[k];
            }
          } else {
            x[i] = inverse ? f(avalues[k], x[i]) : f(x[i], avalues[k]);
            u[i] = mark;
          }
        }
      } else {
        for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
          i = aindex[k];
          if (w[i] !== mark) {
            w[i] = mark;
            cindex.push(i);
          } else {
            u[i] = mark;
          }
        }
      }
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/type/matrix/utils/algorithm06.js
var require_algorithm06 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/type/matrix/utils/algorithm06.js"(exports) {
    "use strict";
    var scatter = require_scatter();
    var DimensionError = require_DimensionError();
    function factory(type, config, load, typed) {
      var equalScalar = load(require_equalScalar());
      var SparseMatrix = type.SparseMatrix;
      var algorithm06 = function(a, b, callback) {
        var avalues = a._values;
        var asize = a._size;
        var adt = a._datatype;
        var bvalues = b._values;
        var bsize = b._size;
        var bdt = b._datatype;
        if (asize.length !== bsize.length)
          throw new DimensionError(asize.length, bsize.length);
        if (asize[0] !== bsize[0] || asize[1] !== bsize[1])
          throw new RangeError("Dimension mismatch. Matrix A (" + asize + ") must match Matrix B (" + bsize + ")");
        var rows = asize[0];
        var columns = asize[1];
        var dt;
        var eq = equalScalar;
        var zero = 0;
        var cf = callback;
        if (typeof adt === "string" && adt === bdt) {
          dt = adt;
          eq = typed.find(equalScalar, [dt, dt]);
          zero = typed.convert(0, dt);
          cf = typed.find(callback, [dt, dt]);
        }
        var cvalues = avalues && bvalues ? [] : void 0;
        var cindex = [];
        var cptr = [];
        var c = new SparseMatrix({
          values: cvalues,
          index: cindex,
          ptr: cptr,
          size: [rows, columns],
          datatype: dt
        });
        var x = cvalues ? [] : void 0;
        var w = [];
        var u = [];
        for (var j = 0; j < columns; j++) {
          cptr[j] = cindex.length;
          var mark = j + 1;
          scatter(a, j, w, x, u, mark, c, cf);
          scatter(b, j, w, x, u, mark, c, cf);
          if (x) {
            var k = cptr[j];
            while (k < cindex.length) {
              var i = cindex[k];
              if (u[i] === mark) {
                var v = x[i];
                if (!eq(v, zero)) {
                  cvalues.push(v);
                  k++;
                } else {
                  cindex.splice(k, 1);
                }
              } else {
                cindex.splice(k, 1);
              }
            }
          } else {
            var p = cptr[j];
            while (p < cindex.length) {
              var r = cindex[p];
              if (u[r] !== mark) {
                cindex.splice(p, 1);
              } else {
                p++;
              }
            }
          }
        }
        cptr[columns] = cindex.length;
        return c;
      };
      return algorithm06;
    }
    exports.name = "algorithm06";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/arithmetic/lcm.js
var require_lcm2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/arithmetic/lcm.js"(exports) {
    "use strict";
    var isInteger = require_number().isInteger;
    function factory(type, config, load, typed) {
      var matrix = load(require_matrix());
      var algorithm02 = load(require_algorithm02());
      var algorithm06 = load(require_algorithm06());
      var algorithm11 = load(require_algorithm11());
      var algorithm13 = load(require_algorithm13());
      var algorithm14 = load(require_algorithm14());
      var lcm = typed("lcm", {
        "number, number": _lcm,
        "BigNumber, BigNumber": _lcmBigNumber,
        "Fraction, Fraction": function(x, y) {
          return x.lcm(y);
        },
        "Matrix, Matrix": function(x, y) {
          var c;
          switch (x.storage()) {
            case "sparse":
              switch (y.storage()) {
                case "sparse":
                  c = algorithm06(x, y, lcm);
                  break;
                default:
                  c = algorithm02(y, x, lcm, true);
                  break;
              }
              break;
            default:
              switch (y.storage()) {
                case "sparse":
                  c = algorithm02(x, y, lcm, false);
                  break;
                default:
                  c = algorithm13(x, y, lcm);
                  break;
              }
              break;
          }
          return c;
        },
        "Array, Array": function(x, y) {
          return lcm(matrix(x), matrix(y)).valueOf();
        },
        "Array, Matrix": function(x, y) {
          return lcm(matrix(x), y);
        },
        "Matrix, Array": function(x, y) {
          return lcm(x, matrix(y));
        },
        "Matrix, number | BigNumber": function(x, y) {
          var c;
          switch (x.storage()) {
            case "sparse":
              c = algorithm11(x, y, lcm, false);
              break;
            default:
              c = algorithm14(x, y, lcm, false);
              break;
          }
          return c;
        },
        "number | BigNumber, Matrix": function(x, y) {
          var c;
          switch (y.storage()) {
            case "sparse":
              c = algorithm11(y, x, lcm, true);
              break;
            default:
              c = algorithm14(y, x, lcm, true);
              break;
          }
          return c;
        },
        "Array, number | BigNumber": function(x, y) {
          return algorithm14(matrix(x), y, lcm, false).valueOf();
        },
        "number | BigNumber, Array": function(x, y) {
          return algorithm14(matrix(y), x, lcm, true).valueOf();
        },
        // TODO: need a smarter notation here
        "Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber": function(a, b, args) {
          var res = lcm(a, b);
          for (var i = 0; i < args.length; i++) {
            res = lcm(res, args[i]);
          }
          return res;
        }
      });
      lcm.toTex = void 0;
      return lcm;
      function _lcmBigNumber(a, b) {
        if (!a.isInt() || !b.isInt()) {
          throw new Error("Parameters in function lcm must be integer numbers");
        }
        if (a.isZero() || b.isZero()) {
          return new type.BigNumber(0);
        }
        var prod = a.times(b);
        while (!b.isZero()) {
          var t = b;
          b = a.mod(t);
          a = t;
        }
        return prod.div(a).abs();
      }
    }
    function _lcm(a, b) {
      if (!isInteger(a) || !isInteger(b)) {
        throw new Error("Parameters in function lcm must be integer numbers");
      }
      if (a == 0 || b == 0) {
        return 0;
      }
      var t;
      var prod = a * b;
      while (b != 0) {
        t = b;
        b = a % t;
        a = t;
      }
      return Math.abs(prod / a);
    }
    exports.name = "lcm";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/arithmetic/log.js
var require_log2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/arithmetic/log.js"(exports) {
    "use strict";
    var deepMap = require_deepMap();
    function factory(type, config, load, typed) {
      var divideScalar = load(require_divideScalar());
      var log = typed("log", {
        "number": function(x) {
          if (x >= 0 || config.predictable) {
            return Math.log(x);
          } else {
            return new type.Complex(x, 0).log();
          }
        },
        "Complex": function(x) {
          return x.log();
        },
        "BigNumber": function(x) {
          if (!x.isNegative() || config.predictable) {
            return x.ln();
          } else {
            return new type.Complex(x.toNumber(), 0).log();
          }
        },
        "Array | Matrix": function(x) {
          return deepMap(x, log);
        },
        "any, any": function(x, base) {
          return divideScalar(log(x), log(base));
        }
      });
      log.toTex = {
        1: "\\ln\\left(${args[0]}\\right)",
        2: "\\log_{${args[1]}}\\left(${args[0]}\\right)"
      };
      return log;
    }
    exports.name = "log";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/arithmetic/log10.js
var require_log102 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/arithmetic/log10.js"(exports) {
    "use strict";
    var deepMap = require_deepMap();
    function factory(type, config, load, typed) {
      var log10 = typed("log10", {
        "number": function(x) {
          if (x >= 0 || config.predictable) {
            return _log10(x);
          } else {
            return new type.Complex(x, 0).log().div(Math.LN10);
          }
        },
        "Complex": function(x) {
          return new type.Complex(x).log().div(Math.LN10);
        },
        "BigNumber": function(x) {
          if (!x.isNegative() || config.predictable) {
            return x.log();
          } else {
            return new type.Complex(x.toNumber(), 0).log().div(Math.LN10);
          }
        },
        "Array | Matrix": function(x) {
          return deepMap(x, log10);
        }
      });
      log10.toTex = { 1: "\\log_{10}\\left(${args[0]}\\right)" };
      return log10;
    }
    var _log10 = Math.log10 || function(x) {
      return Math.log(x) / Math.LN10;
    };
    exports.name = "log10";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/arithmetic/mod.js
var require_mod2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/arithmetic/mod.js"(exports) {
    "use strict";
    function factory(type, config, load, typed) {
      var matrix = load(require_matrix());
      var latex = require_latex();
      var algorithm02 = load(require_algorithm02());
      var algorithm03 = load(require_algorithm03());
      var algorithm05 = load(require_algorithm05());
      var algorithm11 = load(require_algorithm11());
      var algorithm12 = load(require_algorithm12());
      var algorithm13 = load(require_algorithm13());
      var algorithm14 = load(require_algorithm14());
      var mod = typed("mod", {
        "number, number": _mod,
        "BigNumber, BigNumber": function(x, y) {
          return y.isZero() ? x : x.mod(y);
        },
        "Fraction, Fraction": function(x, y) {
          return x.mod(y);
        },
        "Matrix, Matrix": function(x, y) {
          var c;
          switch (x.storage()) {
            case "sparse":
              switch (y.storage()) {
                case "sparse":
                  c = algorithm05(x, y, mod, false);
                  break;
                default:
                  c = algorithm02(y, x, mod, true);
                  break;
              }
              break;
            default:
              switch (y.storage()) {
                case "sparse":
                  c = algorithm03(x, y, mod, false);
                  break;
                default:
                  c = algorithm13(x, y, mod);
                  break;
              }
              break;
          }
          return c;
        },
        "Array, Array": function(x, y) {
          return mod(matrix(x), matrix(y)).valueOf();
        },
        "Array, Matrix": function(x, y) {
          return mod(matrix(x), y);
        },
        "Matrix, Array": function(x, y) {
          return mod(x, matrix(y));
        },
        "Matrix, any": function(x, y) {
          var c;
          switch (x.storage()) {
            case "sparse":
              c = algorithm11(x, y, mod, false);
              break;
            default:
              c = algorithm14(x, y, mod, false);
              break;
          }
          return c;
        },
        "any, Matrix": function(x, y) {
          var c;
          switch (y.storage()) {
            case "sparse":
              c = algorithm12(y, x, mod, true);
              break;
            default:
              c = algorithm14(y, x, mod, true);
              break;
          }
          return c;
        },
        "Array, any": function(x, y) {
          return algorithm14(matrix(x), y, mod, false).valueOf();
        },
        "any, Array": function(x, y) {
          return algorithm14(matrix(y), x, mod, true).valueOf();
        }
      });
      mod.toTex = {
        2: "\\left(${args[0]}" + latex.operators["mod"] + "${args[1]}\\right)"
      };
      return mod;
      function _mod(x, y) {
        if (y > 0) {
          return x - y * Math.floor(x / y);
        } else if (y === 0) {
          return x;
        } else {
          throw new Error("Cannot calculate mod for a negative divisor");
        }
      }
    }
    exports.name = "mod";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/matrix/trace.js
var require_trace2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/matrix/trace.js"(exports) {
    "use strict";
    var clone = require_object().clone;
    var format = require_string().format;
    function factory(type, config, load, typed) {
      var matrix = load(require_matrix());
      var add = load(require_add());
      var trace = typed("trace", {
        "Array": function(x) {
          return trace(matrix(x));
        },
        "Matrix": function(x) {
          var c;
          switch (x.storage()) {
            case "dense":
              c = _denseTrace(x);
              break;
            case "sparse":
              c = _sparseTrace(x);
              break;
          }
          return c;
        },
        "any": clone
      });
      var _denseTrace = function(m) {
        var size = m._size;
        var data = m._data;
        switch (size.length) {
          case 1:
            if (size[0] == 1) {
              return clone(data[0]);
            }
            throw new RangeError("Matrix must be square (size: " + format(size) + ")");
          case 2:
            var rows = size[0];
            var cols = size[1];
            if (rows === cols) {
              var sum = 0;
              for (var i = 0; i < rows; i++)
                sum = add(sum, data[i][i]);
              return sum;
            }
            throw new RangeError("Matrix must be square (size: " + format(size) + ")");
          default:
            throw new RangeError("Matrix must be two dimensional (size: " + format(size) + ")");
        }
      };
      var _sparseTrace = function(m) {
        var values = m._values;
        var index = m._index;
        var ptr = m._ptr;
        var size = m._size;
        var rows = size[0];
        var columns = size[1];
        if (rows === columns) {
          var sum = 0;
          if (values.length > 0) {
            for (var j = 0; j < columns; j++) {
              var k0 = ptr[j];
              var k1 = ptr[j + 1];
              for (var k = k0; k < k1; k++) {
                var i = index[k];
                if (i === j) {
                  sum = add(sum, values[k]);
                  break;
                }
                if (i > j) {
                  break;
                }
              }
            }
          }
          return sum;
        }
        throw new RangeError("Matrix must be square (size: " + format(size) + ")");
      };
      trace.toTex = { 1: "\\mathrm{tr}\\left(${args[0]}\\right)" };
      return trace;
    }
    exports.name = "trace";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/arithmetic/norm.js
var require_norm2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/arithmetic/norm.js"(exports) {
    "use strict";
    function factory(type, config, load, typed) {
      var abs = load(require_abs());
      var add = load(require_add());
      var pow = load(require_pow());
      var sqrt = load(require_sqrt2());
      var multiply = load(require_multiply());
      var equalScalar = load(require_equalScalar());
      var larger = load(require_larger());
      var smaller = load(require_smaller());
      var matrix = load(require_matrix());
      var trace = load(require_trace2());
      var transpose = load(require_transpose2());
      var norm = typed("norm", {
        "number": Math.abs,
        "Complex": function(x) {
          return x.abs();
        },
        "BigNumber": function(x) {
          return x.abs();
        },
        "boolean | null": function(x) {
          return Math.abs(x);
        },
        "Array": function(x) {
          return _norm(matrix(x), 2);
        },
        "Matrix": function(x) {
          return _norm(x, 2);
        },
        "number | Complex | BigNumber | boolean | null, number | BigNumber | string": function(x) {
          return norm(x);
        },
        "Array, number | BigNumber | string": function(x, p) {
          return _norm(matrix(x), p);
        },
        "Matrix, number | BigNumber | string": function(x, p) {
          return _norm(x, p);
        }
      });
      function _norm(x, p) {
        var sizeX = x.size();
        if (sizeX.length == 1) {
          if (p === Number.POSITIVE_INFINITY || p === "inf") {
            var pinf = 0;
            x.forEach(
              function(value) {
                var v = abs(value);
                if (larger(v, pinf))
                  pinf = v;
              },
              true
            );
            return pinf;
          }
          if (p === Number.NEGATIVE_INFINITY || p === "-inf") {
            var ninf;
            x.forEach(
              function(value) {
                var v = abs(value);
                if (!ninf || smaller(v, ninf))
                  ninf = v;
              },
              true
            );
            return ninf || 0;
          }
          if (p === "fro") {
            return _norm(x, 2);
          }
          if (typeof p === "number" && !isNaN(p)) {
            if (!equalScalar(p, 0)) {
              var n = 0;
              x.forEach(
                function(value) {
                  n = add(pow(abs(value), p), n);
                },
                true
              );
              return pow(n, 1 / p);
            }
            return Number.POSITIVE_INFINITY;
          }
          throw new Error("Unsupported parameter value");
        }
        if (sizeX.length == 2) {
          if (p === 1) {
            var c = [];
            var maxc = 0;
            x.forEach(
              function(value, index) {
                var j = index[1];
                var cj = add(c[j] || 0, abs(value));
                if (larger(cj, maxc))
                  maxc = cj;
                c[j] = cj;
              },
              true
            );
            return maxc;
          }
          if (p === Number.POSITIVE_INFINITY || p === "inf") {
            var r = [];
            var maxr = 0;
            x.forEach(
              function(value, index) {
                var i = index[0];
                var ri = add(r[i] || 0, abs(value));
                if (larger(ri, maxr))
                  maxr = ri;
                r[i] = ri;
              },
              true
            );
            return maxr;
          }
          if (p === "fro") {
            return sqrt(trace(multiply(transpose(x), x)));
          }
          if (p === 2) {
            throw new Error("Unsupported parameter value, missing implementation of matrix singular value decomposition");
          }
          throw new Error("Unsupported parameter value");
        }
      }
      norm.toTex = {
        1: "\\left\\|${args[0]}\\right\\|",
        2: void 0
        // use default template
      };
      return norm;
    }
    exports.name = "norm";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/arithmetic/nthRoot.js
var require_nthRoot2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/arithmetic/nthRoot.js"(exports) {
    "use strict";
    function factory(type, config, load, typed) {
      var matrix = load(require_matrix());
      var algorithm01 = load(require_algorithm01());
      var algorithm02 = load(require_algorithm02());
      var algorithm06 = load(require_algorithm06());
      var algorithm11 = load(require_algorithm11());
      var algorithm13 = load(require_algorithm13());
      var algorithm14 = load(require_algorithm14());
      var nthRoot = typed("nthRoot", {
        "number": function(x) {
          return _nthRoot(x, 2);
        },
        "number, number": _nthRoot,
        "BigNumber": function(x) {
          return _bigNthRoot(x, new type.BigNumber(2));
        },
        "Complex": function(x) {
          return _nthComplexRoot(x, 2);
        },
        "Complex, number": _nthComplexRoot,
        "BigNumber, BigNumber": _bigNthRoot,
        "Array | Matrix": function(x) {
          return nthRoot(x, 2);
        },
        "Matrix, Matrix": function(x, y) {
          var c;
          switch (x.storage()) {
            case "sparse":
              switch (y.storage()) {
                case "sparse":
                  if (y.density() === 1) {
                    c = algorithm06(x, y, nthRoot);
                  } else {
                    throw new Error("Root must be non-zero");
                  }
                  break;
                default:
                  c = algorithm02(y, x, nthRoot, true);
                  break;
              }
              break;
            default:
              switch (y.storage()) {
                case "sparse":
                  if (y.density() === 1) {
                    c = algorithm01(x, y, nthRoot, false);
                  } else {
                    throw new Error("Root must be non-zero");
                  }
                  break;
                default:
                  c = algorithm13(x, y, nthRoot);
                  break;
              }
              break;
          }
          return c;
        },
        "Array, Array": function(x, y) {
          return nthRoot(matrix(x), matrix(y)).valueOf();
        },
        "Array, Matrix": function(x, y) {
          return nthRoot(matrix(x), y);
        },
        "Matrix, Array": function(x, y) {
          return nthRoot(x, matrix(y));
        },
        "Matrix, number | BigNumber": function(x, y) {
          var c;
          switch (x.storage()) {
            case "sparse":
              c = algorithm11(x, y, nthRoot, false);
              break;
            default:
              c = algorithm14(x, y, nthRoot, false);
              break;
          }
          return c;
        },
        "number | BigNumber, Matrix": function(x, y) {
          var c;
          switch (y.storage()) {
            case "sparse":
              if (y.density() === 1) {
                c = algorithm11(y, x, nthRoot, true);
              } else {
                throw new Error("Root must be non-zero");
              }
              break;
            default:
              c = algorithm14(y, x, nthRoot, true);
              break;
          }
          return c;
        },
        "Array, number | BigNumber": function(x, y) {
          return nthRoot(matrix(x), y).valueOf();
        },
        "number | BigNumber, Array": function(x, y) {
          return nthRoot(x, matrix(y)).valueOf();
        }
      });
      nthRoot.toTex = { 2: "\\sqrt[${args[1]}]{${args[0]}}" };
      return nthRoot;
      function _bigNthRoot(a, root) {
        var precision = type.BigNumber.precision;
        var Big = type.BigNumber.clone({ precision: precision + 2 });
        var zero = new type.BigNumber(0);
        var one = new Big(1);
        var inv = root.isNegative();
        if (inv) {
          root = root.neg();
        }
        if (root.isZero()) {
          throw new Error("Root must be non-zero");
        }
        if (a.isNegative() && !root.abs().mod(2).equals(1)) {
          throw new Error("Root must be odd when a is negative.");
        }
        if (a.isZero()) {
          return inv ? new Big(Infinity) : 0;
        }
        if (!a.isFinite()) {
          return inv ? zero : a;
        }
        var x = a.abs().pow(one.div(root));
        x = a.isNeg() ? x.neg() : x;
        return new type.BigNumber((inv ? one.div(x) : x).toPrecision(precision));
      }
    }
    function _nthRoot(a, root) {
      var inv = root < 0;
      if (inv) {
        root = -root;
      }
      if (root === 0) {
        throw new Error("Root must be non-zero");
      }
      if (a < 0 && Math.abs(root) % 2 != 1) {
        throw new Error("Root must be odd when a is negative.");
      }
      if (a == 0) {
        return inv ? Infinity : 0;
      }
      if (!isFinite(a)) {
        return inv ? 0 : a;
      }
      var x = Math.pow(Math.abs(a), 1 / root);
      x = a < 0 ? -x : x;
      return inv ? 1 / x : x;
    }
    function _nthComplexRoot(a, root) {
      if (root < 0) throw new Error("Root must be greater than zero");
      if (root === 0) throw new Error("Root must be non-zero");
      if (root % 1 !== 0) throw new Error("Root must be an integer");
      var arg = a.arg();
      var abs = a.abs();
      var roots = [];
      var r = Math.pow(abs, 1 / root);
      for (var k = 0; k < root; k++) {
        roots.push({ r, phi: (arg + 2 * Math.PI * k) / root });
      }
      return roots;
    }
    exports.name = "nthRoot";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/matrix/zeros.js
var require_zeros2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/matrix/zeros.js"(exports) {
    "use strict";
    var isInteger = require_number().isInteger;
    var resize = require_array().resize;
    function factory(type, config, load, typed) {
      var matrix = load(require_matrix());
      var zeros = typed("zeros", {
        "": function() {
          return config.matrix === "Array" ? _zeros([]) : _zeros([], "default");
        },
        // math.zeros(m, n, p, ..., format)
        // TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this
        "...number | BigNumber | string": function(size) {
          var last = size[size.length - 1];
          if (typeof last === "string") {
            var format = size.pop();
            return _zeros(size, format);
          } else if (config.matrix === "Array") {
            return _zeros(size);
          } else {
            return _zeros(size, "default");
          }
        },
        "Array": _zeros,
        "Matrix": function(size) {
          var format = size.storage();
          return _zeros(size.valueOf(), format);
        },
        "Array | Matrix, string": function(size, format) {
          return _zeros(size.valueOf(), format);
        }
      });
      zeros.toTex = void 0;
      return zeros;
      function _zeros(size, format) {
        var hasBigNumbers = _normalize(size);
        var defaultValue = hasBigNumbers ? new type.BigNumber(0) : 0;
        _validate(size);
        if (format) {
          var m = matrix(format);
          if (size.length > 0) {
            return m.resize(size, defaultValue);
          }
          return m;
        } else {
          var arr = [];
          if (size.length > 0) {
            return resize(arr, size, defaultValue);
          }
          return arr;
        }
      }
      function _normalize(size) {
        var hasBigNumbers = false;
        size.forEach(function(value, index, arr) {
          if (value && value.isBigNumber === true) {
            hasBigNumbers = true;
            arr[index] = value.toNumber();
          }
        });
        return hasBigNumbers;
      }
      function _validate(size) {
        size.forEach(function(value) {
          if (typeof value !== "number" || !isInteger(value) || value < 0) {
            throw new Error("Parameters in function zeros must be positive integers");
          }
        });
      }
    }
    exports.name = "zeros";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/arithmetic/round.js
var require_round2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/arithmetic/round.js"(exports) {
    "use strict";
    var isInteger = require_number().isInteger;
    var toFixed = require_number().toFixed;
    var deepMap = require_deepMap();
    var NO_INT = "Number of decimals in function round must be an integer";
    function factory(type, config, load, typed) {
      var matrix = load(require_matrix());
      var equalScalar = load(require_equalScalar());
      var zeros = load(require_zeros2());
      var algorithm11 = load(require_algorithm11());
      var algorithm12 = load(require_algorithm12());
      var algorithm14 = load(require_algorithm14());
      var round = typed("round", {
        "number": Math.round,
        "number, number": function(x, n) {
          if (!isInteger(n)) {
            throw new TypeError(NO_INT);
          }
          if (n < 0 || n > 15) {
            throw new Error("Number of decimals in function round must be in te range of 0-15");
          }
          return _round(x, n);
        },
        "Complex": function(x) {
          return x.round();
        },
        "Complex, number": function(x, n) {
          if (n % 1) {
            throw new TypeError(NO_INT);
          }
          return x.round(n);
        },
        "Complex, BigNumber": function(x, n) {
          if (!n.isInteger()) {
            throw new TypeError(NO_INT);
          }
          var _n = n.toNumber();
          return x.round(_n);
        },
        "number, BigNumber": function(x, n) {
          if (!n.isInteger()) {
            throw new TypeError(NO_INT);
          }
          return new type.BigNumber(x).toDecimalPlaces(n.toNumber());
        },
        "BigNumber": function(x) {
          return x.toDecimalPlaces(0);
        },
        "BigNumber, BigNumber": function(x, n) {
          if (!n.isInteger()) {
            throw new TypeError(NO_INT);
          }
          return x.toDecimalPlaces(n.toNumber());
        },
        "Fraction": function(x) {
          return x.round();
        },
        "Fraction, number": function(x, n) {
          if (n % 1) {
            throw new TypeError(NO_INT);
          }
          return x.round(n);
        },
        "Array | Matrix": function(x) {
          return deepMap(x, round, true);
        },
        "Matrix, number | BigNumber": function(x, y) {
          var c;
          switch (x.storage()) {
            case "sparse":
              c = algorithm11(x, y, round, false);
              break;
            default:
              c = algorithm14(x, y, round, false);
              break;
          }
          return c;
        },
        "number | Complex | BigNumber, Matrix": function(x, y) {
          if (!equalScalar(x, 0)) {
            var c;
            switch (y.storage()) {
              case "sparse":
                c = algorithm12(y, x, round, true);
                break;
              default:
                c = algorithm14(y, x, round, true);
                break;
            }
            return c;
          }
          return zeros(y.size(), y.storage());
        },
        "Array, number | BigNumber": function(x, y) {
          return algorithm14(matrix(x), y, round, false).valueOf();
        },
        "number | Complex | BigNumber, Array": function(x, y) {
          return algorithm14(matrix(y), x, round, true).valueOf();
        }
      });
      round.toTex = {
        1: "\\left\\lfloor${args[0]}\\right\\rceil",
        2: void 0
        // use default template
      };
      return round;
    }
    function _round(value, decimals) {
      return parseFloat(toFixed(value, decimals));
    }
    exports.name = "round";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/arithmetic/sign.js
var require_sign2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/arithmetic/sign.js"(exports) {
    "use strict";
    var number = require_number();
    var deepMap = require_deepMap();
    function factory(type, config, load, typed) {
      var sign = typed("sign", {
        "number": number.sign,
        "Complex": function(x) {
          return x.sign();
        },
        "BigNumber": function(x) {
          return new type.BigNumber(x.cmp(0));
        },
        "Fraction": function(x) {
          return new type.Fraction(x.s, 1);
        },
        "Array | Matrix": function(x) {
          return deepMap(x, sign, true);
        },
        "Unit": function(x) {
          return sign(x.value);
        }
      });
      sign.toTex = { 1: "\\mathrm{${name}}\\left(${args[0]}\\right)" };
      return sign;
    }
    exports.name = "sign";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/arithmetic/square.js
var require_square2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/arithmetic/square.js"(exports) {
    "use strict";
    var deepMap = require_deepMap();
    function factory(type, config, load, typed) {
      var square = typed("square", {
        "number": function(x) {
          return x * x;
        },
        "Complex": function(x) {
          return x.mul(x);
        },
        "BigNumber": function(x) {
          return x.times(x);
        },
        "Fraction": function(x) {
          return x.mul(x);
        },
        "Array | Matrix": function(x) {
          return deepMap(x, square, true);
        },
        "Unit": function(x) {
          return x.pow(2);
        }
      });
      square.toTex = { 1: "\\left(${args[0]}\\right)^2" };
      return square;
    }
    exports.name = "square";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/arithmetic/unaryPlus.js
var require_unaryPlus2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/arithmetic/unaryPlus.js"(exports) {
    "use strict";
    var deepMap = require_deepMap();
    function factory(type, config, load, typed) {
      var latex = require_latex();
      var unaryPlus = typed("unaryPlus", {
        "number": function(x) {
          return x;
        },
        "Complex": function(x) {
          return x;
        },
        "BigNumber": function(x) {
          return x;
        },
        "Fraction": function(x) {
          return x;
        },
        "Unit": function(x) {
          return x.clone();
        },
        "Array | Matrix": function(x) {
          return deepMap(x, unaryPlus, true);
        },
        "boolean | string | null": function(x) {
          return config.number == "BigNumber" ? new type.BigNumber(+x) : +x;
        }
      });
      unaryPlus.toTex = {
        1: latex.operators["unaryPlus"] + "\\left(${args[0]}\\right)"
      };
      return unaryPlus;
    }
    exports.name = "unaryPlus";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/arithmetic/xgcd.js
var require_xgcd2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/arithmetic/xgcd.js"(exports) {
    "use strict";
    var isInteger = require_number().isInteger;
    function factory(type, config, load, typed) {
      var matrix = load(require_matrix());
      var xgcd = typed("xgcd", {
        "number, number": _xgcd,
        "BigNumber, BigNumber": _xgcdBigNumber
        // TODO: implement support for Fraction
      });
      xgcd.toTex = void 0;
      return xgcd;
      function _xgcd(a, b) {
        var t, q, r, x = 0, lastx = 1, y = 1, lasty = 0;
        if (!isInteger(a) || !isInteger(b)) {
          throw new Error("Parameters in function xgcd must be integer numbers");
        }
        while (b) {
          q = Math.floor(a / b);
          r = a - q * b;
          t = x;
          x = lastx - q * x;
          lastx = t;
          t = y;
          y = lasty - q * y;
          lasty = t;
          a = b;
          b = r;
        }
        var res;
        if (a < 0) {
          res = [-a, -lastx, -lasty];
        } else {
          res = [a, a ? lastx : 0, lasty];
        }
        return config.matrix === "Array" ? res : matrix(res);
      }
      function _xgcdBigNumber(a, b) {
        var t, q, r, zero = new type.BigNumber(0), one = new type.BigNumber(1), x = zero, lastx = one, y = one, lasty = zero;
        if (!a.isInt() || !b.isInt()) {
          throw new Error("Parameters in function xgcd must be integer numbers");
        }
        while (!b.isZero()) {
          q = a.div(b).floor();
          r = a.mod(b);
          t = x;
          x = lastx.minus(q.times(x));
          lastx = t;
          t = y;
          y = lasty.minus(q.times(y));
          lasty = t;
          a = b;
          b = r;
        }
        var res;
        if (a.lt(zero)) {
          res = [a.neg(), lastx.neg(), lasty.neg()];
        } else {
          res = [a, !a.isZero() ? lastx : 0, lasty];
        }
        return config.matrix === "Array" ? res : matrix(res);
      }
    }
    exports.name = "xgcd";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/arithmetic/index.js
var require_arithmetic = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/arithmetic/index.js"(exports, module) {
    module.exports = [
      require_abs(),
      require_add(),
      require_addScalar(),
      require_cbrt2(),
      require_ceil2(),
      require_cube2(),
      require_divide2(),
      require_dotDivide2(),
      require_dotMultiply2(),
      require_dotPow2(),
      require_exp2(),
      require_fix(),
      require_floor2(),
      require_gcd2(),
      require_hypot2(),
      require_lcm2(),
      require_log2(),
      require_log102(),
      require_mod2(),
      require_multiply(),
      require_norm2(),
      require_nthRoot2(),
      require_pow(),
      require_round2(),
      require_sign2(),
      require_sqrt2(),
      require_square2(),
      require_subtract(),
      require_unaryMinus(),
      require_unaryPlus2(),
      require_xgcd2()
    ];
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/utils/bignumber/bitNot.js
var require_bitNot2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/utils/bignumber/bitNot.js"(exports, module) {
    module.exports = function bitNot(x) {
      if (x.isFinite() && !x.isInteger()) {
        throw new Error("Integer expected in function bitNot");
      }
      var BigNumber = x.constructor;
      var prevPrec = BigNumber.precision;
      BigNumber.config({ precision: 1e9 });
      var x = x.plus(new BigNumber(1));
      x.s = -x.s || null;
      BigNumber.config({ precision: prevPrec });
      return x;
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/utils/bignumber/bitwise.js
var require_bitwise = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/utils/bignumber/bitwise.js"(exports, module) {
    var bitNot = require_bitNot2();
    module.exports = function bitwise(x, y, func) {
      var BigNumber = x.constructor;
      var xBits, yBits;
      var xSign = +(x.s < 0);
      var ySign = +(y.s < 0);
      if (xSign) {
        xBits = decCoefficientToBinaryString(bitNot(x));
        for (var i = 0; i < xBits.length; ++i) {
          xBits[i] ^= 1;
        }
      } else {
        xBits = decCoefficientToBinaryString(x);
      }
      if (ySign) {
        yBits = decCoefficientToBinaryString(bitNot(y));
        for (var i = 0; i < yBits.length; ++i) {
          yBits[i] ^= 1;
        }
      } else {
        yBits = decCoefficientToBinaryString(y);
      }
      var minBits, maxBits, minSign;
      if (xBits.length <= yBits.length) {
        minBits = xBits;
        maxBits = yBits;
        minSign = xSign;
      } else {
        minBits = yBits;
        maxBits = xBits;
        minSign = ySign;
      }
      var shortLen = minBits.length;
      var longLen = maxBits.length;
      var expFuncVal = func(xSign, ySign) ^ 1;
      var outVal = new BigNumber(expFuncVal ^ 1);
      var twoPower = new BigNumber(1);
      var two = new BigNumber(2);
      var prevPrec = BigNumber.precision;
      BigNumber.config({ precision: 1e9 });
      while (shortLen > 0) {
        if (func(minBits[--shortLen], maxBits[--longLen]) == expFuncVal) {
          outVal = outVal.plus(twoPower);
        }
        twoPower = twoPower.times(two);
      }
      while (longLen > 0) {
        if (func(minSign, maxBits[--longLen]) == expFuncVal) {
          outVal = outVal.plus(twoPower);
        }
        twoPower = twoPower.times(two);
      }
      BigNumber.config({ precision: prevPrec });
      if (expFuncVal == 0) {
        outVal.s = -outVal.s;
      }
      return outVal;
    };
    function decCoefficientToBinaryString(x) {
      var a = x.d;
      var r = a[0] + "";
      for (var i = 1; i < a.length; ++i) {
        var s = a[i] + "";
        for (var z = 7 - s.length; z--; ) {
          s = "0" + s;
        }
        r += s;
      }
      var j;
      for (j = r.length - 1; r.charAt(j) == "0"; --j) ;
      var xe = x.e;
      var str = r.slice(0, j + 1 || 1);
      var strL = str.length;
      if (xe > 0) {
        if (++xe > strL) {
          for (xe -= strL; xe--; str += "0") ;
        } else if (xe < strL) {
          str = str.slice(0, xe) + "." + str.slice(xe);
        }
      }
      var arr = [0];
      for (var i = 0; i < str.length; ) {
        for (var arrL = arr.length; arrL--; arr[arrL] *= 10) ;
        arr[0] += str.charAt(i++) << 0;
        for (var j = 0; j < arr.length; ++j) {
          if (arr[j] > 1) {
            if (arr[j + 1] == null) {
              arr[j + 1] = 0;
            }
            arr[j + 1] += arr[j] >> 1;
            arr[j] &= 1;
          }
        }
      }
      return arr.reverse();
    }
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/utils/bignumber/bitAnd.js
var require_bitAnd2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/utils/bignumber/bitAnd.js"(exports, module) {
    var bitwise = require_bitwise();
    module.exports = function bitAnd(x, y) {
      if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {
        throw new Error("Integers expected in function bitAnd");
      }
      var BigNumber = x.constructor;
      if (x.isNaN() || y.isNaN()) {
        return new BigNumber(NaN);
      }
      if (x.isZero() || y.eq(-1) || x.eq(y)) {
        return x;
      }
      if (y.isZero() || x.eq(-1)) {
        return y;
      }
      if (!x.isFinite() || !y.isFinite()) {
        if (!x.isFinite() && !y.isFinite()) {
          if (x.isNegative() == y.isNegative()) {
            return x;
          }
          return new BigNumber(0);
        }
        if (!x.isFinite()) {
          if (y.isNegative()) {
            return x;
          }
          if (x.isNegative()) {
            return new BigNumber(0);
          }
          return y;
        }
        if (!y.isFinite()) {
          if (x.isNegative()) {
            return y;
          }
          if (y.isNegative()) {
            return new BigNumber(0);
          }
          return x;
        }
      }
      return bitwise(x, y, function(a, b) {
        return a & b;
      });
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/bitwise/bitAnd.js
var require_bitAnd3 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/bitwise/bitAnd.js"(exports) {
    "use strict";
    var isInteger = require_number().isInteger;
    var bigBitAnd = require_bitAnd2();
    function factory(type, config, load, typed) {
      var latex = require_latex();
      var matrix = load(require_matrix());
      var algorithm02 = load(require_algorithm02());
      var algorithm06 = load(require_algorithm06());
      var algorithm11 = load(require_algorithm11());
      var algorithm13 = load(require_algorithm13());
      var algorithm14 = load(require_algorithm14());
      var bitAnd = typed("bitAnd", {
        "number, number": function(x, y) {
          if (!isInteger(x) || !isInteger(y)) {
            throw new Error("Integers expected in function bitAnd");
          }
          return x & y;
        },
        "BigNumber, BigNumber": bigBitAnd,
        "Matrix, Matrix": function(x, y) {
          var c;
          switch (x.storage()) {
            case "sparse":
              switch (y.storage()) {
                case "sparse":
                  c = algorithm06(x, y, bitAnd, false);
                  break;
                default:
                  c = algorithm02(y, x, bitAnd, true);
                  break;
              }
              break;
            default:
              switch (y.storage()) {
                case "sparse":
                  c = algorithm02(x, y, bitAnd, false);
                  break;
                default:
                  c = algorithm13(x, y, bitAnd);
                  break;
              }
              break;
          }
          return c;
        },
        "Array, Array": function(x, y) {
          return bitAnd(matrix(x), matrix(y)).valueOf();
        },
        "Array, Matrix": function(x, y) {
          return bitAnd(matrix(x), y);
        },
        "Matrix, Array": function(x, y) {
          return bitAnd(x, matrix(y));
        },
        "Matrix, any": function(x, y) {
          var c;
          switch (x.storage()) {
            case "sparse":
              c = algorithm11(x, y, bitAnd, false);
              break;
            default:
              c = algorithm14(x, y, bitAnd, false);
              break;
          }
          return c;
        },
        "any, Matrix": function(x, y) {
          var c;
          switch (y.storage()) {
            case "sparse":
              c = algorithm11(y, x, bitAnd, true);
              break;
            default:
              c = algorithm14(y, x, bitAnd, true);
              break;
          }
          return c;
        },
        "Array, any": function(x, y) {
          return algorithm14(matrix(x), y, bitAnd, false).valueOf();
        },
        "any, Array": function(x, y) {
          return algorithm14(matrix(y), x, bitAnd, true).valueOf();
        }
      });
      bitAnd.toTex = {
        2: "\\left(${args[0]}" + latex.operators["bitAnd"] + "${args[1]}\\right)"
      };
      return bitAnd;
    }
    exports.name = "bitAnd";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/bitwise/bitNot.js
var require_bitNot3 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/bitwise/bitNot.js"(exports) {
    "use strict";
    var deepMap = require_deepMap();
    var bigBitNot = require_bitNot2();
    var isInteger = require_number().isInteger;
    function factory(type, config, load, typed) {
      var latex = require_latex();
      var bitNot = typed("bitNot", {
        "number": function(x) {
          if (!isInteger(x)) {
            throw new Error("Integer expected in function bitNot");
          }
          return ~x;
        },
        "BigNumber": bigBitNot,
        "Array | Matrix": function(x) {
          return deepMap(x, bitNot);
        }
      });
      bitNot.toTex = {
        1: latex.operators["bitNot"] + "\\left(${args[0]}\\right)"
      };
      return bitNot;
    }
    exports.name = "bitNot";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/utils/bignumber/bitOr.js
var require_bitOr2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/utils/bignumber/bitOr.js"(exports, module) {
    var bitwise = require_bitwise();
    module.exports = function bitOr(x, y) {
      if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {
        throw new Error("Integers expected in function bitOr");
      }
      var BigNumber = x.constructor;
      if (x.isNaN() || y.isNaN()) {
        return new BigNumber(NaN);
      }
      var negOne = new BigNumber(-1);
      if (x.isZero() || y.eq(negOne) || x.eq(y)) {
        return y;
      }
      if (y.isZero() || x.eq(negOne)) {
        return x;
      }
      if (!x.isFinite() || !y.isFinite()) {
        if (!x.isFinite() && !x.isNegative() && y.isNegative() || x.isNegative() && !y.isNegative() && !y.isFinite()) {
          return negOne;
        }
        if (x.isNegative() && y.isNegative()) {
          return x.isFinite() ? x : y;
        }
        return x.isFinite() ? y : x;
      }
      return bitwise(x, y, function(a, b) {
        return a | b;
      });
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/bitwise/bitOr.js
var require_bitOr3 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/bitwise/bitOr.js"(exports) {
    "use strict";
    var isInteger = require_number().isInteger;
    var bigBitOr = require_bitOr2();
    function factory(type, config, load, typed) {
      var latex = require_latex();
      var matrix = load(require_matrix());
      var algorithm01 = load(require_algorithm01());
      var algorithm04 = load(require_algorithm04());
      var algorithm10 = load(require_algorithm10());
      var algorithm13 = load(require_algorithm13());
      var algorithm14 = load(require_algorithm14());
      var bitOr = typed("bitOr", {
        "number, number": function(x, y) {
          if (!isInteger(x) || !isInteger(y)) {
            throw new Error("Integers expected in function bitOr");
          }
          return x | y;
        },
        "BigNumber, BigNumber": bigBitOr,
        "Matrix, Matrix": function(x, y) {
          var c;
          switch (x.storage()) {
            case "sparse":
              switch (y.storage()) {
                case "sparse":
                  c = algorithm04(x, y, bitOr);
                  break;
                default:
                  c = algorithm01(y, x, bitOr, true);
                  break;
              }
              break;
            default:
              switch (y.storage()) {
                case "sparse":
                  c = algorithm01(x, y, bitOr, false);
                  break;
                default:
                  c = algorithm13(x, y, bitOr);
                  break;
              }
              break;
          }
          return c;
        },
        "Array, Array": function(x, y) {
          return bitOr(matrix(x), matrix(y)).valueOf();
        },
        "Array, Matrix": function(x, y) {
          return bitOr(matrix(x), y);
        },
        "Matrix, Array": function(x, y) {
          return bitOr(x, matrix(y));
        },
        "Matrix, any": function(x, y) {
          var c;
          switch (x.storage()) {
            case "sparse":
              c = algorithm10(x, y, bitOr, false);
              break;
            default:
              c = algorithm14(x, y, bitOr, false);
              break;
          }
          return c;
        },
        "any, Matrix": function(x, y) {
          var c;
          switch (y.storage()) {
            case "sparse":
              c = algorithm10(y, x, bitOr, true);
              break;
            default:
              c = algorithm14(y, x, bitOr, true);
              break;
          }
          return c;
        },
        "Array, any": function(x, y) {
          return algorithm14(matrix(x), y, bitOr, false).valueOf();
        },
        "any, Array": function(x, y) {
          return algorithm14(matrix(y), x, bitOr, true).valueOf();
        }
      });
      bitOr.toTex = {
        2: "\\left(${args[0]}" + latex.operators["bitOr"] + "${args[1]}\\right)"
      };
      return bitOr;
    }
    exports.name = "bitOr";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/utils/bignumber/bitXor.js
var require_bitXor2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/utils/bignumber/bitXor.js"(exports, module) {
    var bitwise = require_bitwise();
    var bitNot = require_bitNot2();
    module.exports = function bitXor(x, y) {
      if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {
        throw new Error("Integers expected in function bitXor");
      }
      var BigNumber = x.constructor;
      if (x.isNaN() || y.isNaN()) {
        return new BigNumber(NaN);
      }
      if (x.isZero()) {
        return y;
      }
      if (y.isZero()) {
        return x;
      }
      if (x.eq(y)) {
        return new BigNumber(0);
      }
      var negOne = new BigNumber(-1);
      if (x.eq(negOne)) {
        return bitNot(y);
      }
      if (y.eq(negOne)) {
        return bitNot(x);
      }
      if (!x.isFinite() || !y.isFinite()) {
        if (!x.isFinite() && !y.isFinite()) {
          return negOne;
        }
        return new BigNumber(x.isNegative() == y.isNegative() ? Infinity : -Infinity);
      }
      return bitwise(x, y, function(a, b) {
        return a ^ b;
      });
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/bitwise/bitXor.js
var require_bitXor3 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/bitwise/bitXor.js"(exports) {
    "use strict";
    var isInteger = require_number().isInteger;
    var bigBitXor = require_bitXor2();
    function factory(type, config, load, typed) {
      var latex = require_latex();
      var matrix = load(require_matrix());
      var algorithm03 = load(require_algorithm03());
      var algorithm07 = load(require_algorithm07());
      var algorithm12 = load(require_algorithm12());
      var algorithm13 = load(require_algorithm13());
      var algorithm14 = load(require_algorithm14());
      var bitXor = typed("bitXor", {
        "number, number": function(x, y) {
          if (!isInteger(x) || !isInteger(y)) {
            throw new Error("Integers expected in function bitXor");
          }
          return x ^ y;
        },
        "BigNumber, BigNumber": bigBitXor,
        "Matrix, Matrix": function(x, y) {
          var c;
          switch (x.storage()) {
            case "sparse":
              switch (y.storage()) {
                case "sparse":
                  c = algorithm07(x, y, bitXor);
                  break;
                default:
                  c = algorithm03(y, x, bitXor, true);
                  break;
              }
              break;
            default:
              switch (y.storage()) {
                case "sparse":
                  c = algorithm03(x, y, bitXor, false);
                  break;
                default:
                  c = algorithm13(x, y, bitXor);
                  break;
              }
              break;
          }
          return c;
        },
        "Array, Array": function(x, y) {
          return bitXor(matrix(x), matrix(y)).valueOf();
        },
        "Array, Matrix": function(x, y) {
          return bitXor(matrix(x), y);
        },
        "Matrix, Array": function(x, y) {
          return bitXor(x, matrix(y));
        },
        "Matrix, any": function(x, y) {
          var c;
          switch (x.storage()) {
            case "sparse":
              c = algorithm12(x, y, bitXor, false);
              break;
            default:
              c = algorithm14(x, y, bitXor, false);
              break;
          }
          return c;
        },
        "any, Matrix": function(x, y) {
          var c;
          switch (y.storage()) {
            case "sparse":
              c = algorithm12(y, x, bitXor, true);
              break;
            default:
              c = algorithm14(y, x, bitXor, true);
              break;
          }
          return c;
        },
        "Array, any": function(x, y) {
          return algorithm14(matrix(x), y, bitXor, false).valueOf();
        },
        "any, Array": function(x, y) {
          return algorithm14(matrix(y), x, bitXor, true).valueOf();
        }
      });
      bitXor.toTex = {
        2: "\\left(${args[0]}" + latex.operators["bitXor"] + "${args[1]}\\right)"
      };
      return bitXor;
    }
    exports.name = "bitXor";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/utils/bignumber/leftShift.js
var require_leftShift2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/utils/bignumber/leftShift.js"(exports, module) {
    module.exports = function leftShift(x, y) {
      if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {
        throw new Error("Integers expected in function leftShift");
      }
      var BigNumber = x.constructor;
      if (x.isNaN() || y.isNaN() || y.isNegative() && !y.isZero()) {
        return new BigNumber(NaN);
      }
      if (x.isZero() || y.isZero()) {
        return x;
      }
      if (!x.isFinite() && !y.isFinite()) {
        return new BigNumber(NaN);
      }
      if (y.lt(55)) {
        return x.times(Math.pow(2, y.toNumber()) + "");
      }
      return x.times(new BigNumber(2).pow(y));
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/type/matrix/utils/algorithm08.js
var require_algorithm08 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/type/matrix/utils/algorithm08.js"(exports) {
    "use strict";
    var DimensionError = require_DimensionError();
    function factory(type, config, load, typed) {
      var equalScalar = load(require_equalScalar());
      var SparseMatrix = type.SparseMatrix;
      var algorithm08 = function(a, b, callback) {
        var avalues = a._values;
        var aindex = a._index;
        var aptr = a._ptr;
        var asize = a._size;
        var adt = a._datatype;
        var bvalues = b._values;
        var bindex = b._index;
        var bptr = b._ptr;
        var bsize = b._size;
        var bdt = b._datatype;
        if (asize.length !== bsize.length)
          throw new DimensionError(asize.length, bsize.length);
        if (asize[0] !== bsize[0] || asize[1] !== bsize[1])
          throw new RangeError("Dimension mismatch. Matrix A (" + asize + ") must match Matrix B (" + bsize + ")");
        if (!avalues || !bvalues)
          throw new Error("Cannot perform operation on Pattern Sparse Matrices");
        var rows = asize[0];
        var columns = asize[1];
        var dt;
        var eq = equalScalar;
        var zero = 0;
        var cf = callback;
        if (typeof adt === "string" && adt === bdt) {
          dt = adt;
          eq = typed.find(equalScalar, [dt, dt]);
          zero = typed.convert(0, dt);
          cf = typed.find(callback, [dt, dt]);
        }
        var cvalues = [];
        var cindex = [];
        var cptr = [];
        var c = new SparseMatrix({
          values: cvalues,
          index: cindex,
          ptr: cptr,
          size: [rows, columns],
          datatype: dt
        });
        var x = [];
        var w = [];
        var k, k0, k1, i;
        for (var j = 0; j < columns; j++) {
          cptr[j] = cindex.length;
          var mark = j + 1;
          for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
            i = aindex[k];
            w[i] = mark;
            x[i] = avalues[k];
            cindex.push(i);
          }
          for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
            i = bindex[k];
            if (w[i] === mark) {
              x[i] = cf(x[i], bvalues[k]);
            }
          }
          k = cptr[j];
          while (k < cindex.length) {
            i = cindex[k];
            var v = x[i];
            if (!eq(v, zero)) {
              cvalues.push(v);
              k++;
            } else {
              cindex.splice(k, 1);
            }
          }
        }
        cptr[columns] = cindex.length;
        return c;
      };
      return algorithm08;
    }
    exports.name = "algorithm08";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/bitwise/leftShift.js
var require_leftShift3 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/bitwise/leftShift.js"(exports) {
    "use strict";
    var isInteger = require_number().isInteger;
    var bigLeftShift = require_leftShift2();
    function factory(type, config, load, typed) {
      var latex = require_latex();
      var matrix = load(require_matrix());
      var equalScalar = load(require_equalScalar());
      var zeros = load(require_zeros2());
      var algorithm01 = load(require_algorithm01());
      var algorithm02 = load(require_algorithm02());
      var algorithm08 = load(require_algorithm08());
      var algorithm10 = load(require_algorithm10());
      var algorithm11 = load(require_algorithm11());
      var algorithm13 = load(require_algorithm13());
      var algorithm14 = load(require_algorithm14());
      var leftShift = typed("leftShift", {
        "number, number": function(x, y) {
          if (!isInteger(x) || !isInteger(y)) {
            throw new Error("Integers expected in function leftShift");
          }
          return x << y;
        },
        "BigNumber, BigNumber": bigLeftShift,
        "Matrix, Matrix": function(x, y) {
          var c;
          switch (x.storage()) {
            case "sparse":
              switch (y.storage()) {
                case "sparse":
                  c = algorithm08(x, y, leftShift, false);
                  break;
                default:
                  c = algorithm02(y, x, leftShift, true);
                  break;
              }
              break;
            default:
              switch (y.storage()) {
                case "sparse":
                  c = algorithm01(x, y, leftShift, false);
                  break;
                default:
                  c = algorithm13(x, y, leftShift);
                  break;
              }
              break;
          }
          return c;
        },
        "Array, Array": function(x, y) {
          return leftShift(matrix(x), matrix(y)).valueOf();
        },
        "Array, Matrix": function(x, y) {
          return leftShift(matrix(x), y);
        },
        "Matrix, Array": function(x, y) {
          return leftShift(x, matrix(y));
        },
        "Matrix, number | BigNumber": function(x, y) {
          if (!equalScalar(y, 0)) {
            var c;
            switch (x.storage()) {
              case "sparse":
                c = algorithm11(x, y, leftShift, false);
                break;
              default:
                c = algorithm14(x, y, leftShift, false);
                break;
            }
            return c;
          }
          return x.clone();
        },
        "number | BigNumber, Matrix": function(x, y) {
          if (!equalScalar(x, 0)) {
            var c;
            switch (y.storage()) {
              case "sparse":
                c = algorithm10(y, x, leftShift, true);
                break;
              default:
                c = algorithm14(y, x, leftShift, true);
                break;
            }
            return c;
          }
          return zeros(y.size(), y.storage());
        },
        "Array, number | BigNumber": function(x, y) {
          return leftShift(matrix(x), y).valueOf();
        },
        "number | BigNumber, Array": function(x, y) {
          return leftShift(x, matrix(y)).valueOf();
        }
      });
      leftShift.toTex = {
        2: "\\left(${args[0]}" + latex.operators["leftShift"] + "${args[1]}\\right)"
      };
      return leftShift;
    }
    exports.name = "leftShift";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/utils/bignumber/rightArithShift.js
var require_rightArithShift2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/utils/bignumber/rightArithShift.js"(exports, module) {
    module.exports = function rightArithShift(x, y) {
      if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {
        throw new Error("Integers expected in function rightArithShift");
      }
      var BigNumber = x.constructor;
      if (x.isNaN() || y.isNaN() || y.isNegative() && !y.isZero()) {
        return new BigNumber(NaN);
      }
      if (x.isZero() || y.isZero()) {
        return x;
      }
      if (!y.isFinite()) {
        if (x.isNegative()) {
          return new BigNumber(-1);
        }
        if (!x.isFinite()) {
          return new BigNumber(NaN);
        }
        return new BigNumber(0);
      }
      if (y.lt(55)) {
        return x.div(Math.pow(2, y.toNumber()) + "").floor();
      }
      return x.div(new BigNumber(2).pow(y)).floor();
    };
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/bitwise/rightArithShift.js
var require_rightArithShift3 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/bitwise/rightArithShift.js"(exports) {
    "use strict";
    var isInteger = require_number().isInteger;
    var bigRightArithShift = require_rightArithShift2();
    function factory(type, config, load, typed) {
      var latex = require_latex();
      var matrix = load(require_matrix());
      var equalScalar = load(require_equalScalar());
      var zeros = load(require_zeros2());
      var algorithm01 = load(require_algorithm01());
      var algorithm02 = load(require_algorithm02());
      var algorithm08 = load(require_algorithm08());
      var algorithm10 = load(require_algorithm10());
      var algorithm11 = load(require_algorithm11());
      var algorithm13 = load(require_algorithm13());
      var algorithm14 = load(require_algorithm14());
      var rightArithShift = typed("rightArithShift", {
        "number, number": function(x, y) {
          if (!isInteger(x) || !isInteger(y)) {
            throw new Error("Integers expected in function rightArithShift");
          }
          return x >> y;
        },
        "BigNumber, BigNumber": bigRightArithShift,
        "Matrix, Matrix": function(x, y) {
          var c;
          switch (x.storage()) {
            case "sparse":
              switch (y.storage()) {
                case "sparse":
                  c = algorithm08(x, y, rightArithShift, false);
                  break;
                default:
                  c = algorithm02(y, x, rightArithShift, true);
                  break;
              }
              break;
            default:
              switch (y.storage()) {
                case "sparse":
                  c = algorithm01(x, y, rightArithShift, false);
                  break;
                default:
                  c = algorithm13(x, y, rightArithShift);
                  break;
              }
              break;
          }
          return c;
        },
        "Array, Array": function(x, y) {
          return rightArithShift(matrix(x), matrix(y)).valueOf();
        },
        "Array, Matrix": function(x, y) {
          return rightArithShift(matrix(x), y);
        },
        "Matrix, Array": function(x, y) {
          return rightArithShift(x, matrix(y));
        },
        "Matrix, number | BigNumber": function(x, y) {
          if (!equalScalar(y, 0)) {
            var c;
            switch (x.storage()) {
              case "sparse":
                c = algorithm11(x, y, rightArithShift, false);
                break;
              default:
                c = algorithm14(x, y, rightArithShift, false);
                break;
            }
            return c;
          }
          return x.clone();
        },
        "number | BigNumber, Matrix": function(x, y) {
          if (!equalScalar(x, 0)) {
            var c;
            switch (y.storage()) {
              case "sparse":
                c = algorithm10(y, x, rightArithShift, true);
                break;
              default:
                c = algorithm14(y, x, rightArithShift, true);
                break;
            }
            return c;
          }
          return zeros(y.size(), y.storage());
        },
        "Array, number | BigNumber": function(x, y) {
          return rightArithShift(matrix(x), y).valueOf();
        },
        "number | BigNumber, Array": function(x, y) {
          return rightArithShift(x, matrix(y)).valueOf();
        }
      });
      rightArithShift.toTex = {
        2: "\\left(${args[0]}" + latex.operators["rightArithShift"] + "${args[1]}\\right)"
      };
      return rightArithShift;
    }
    exports.name = "rightArithShift";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/bitwise/rightLogShift.js
var require_rightLogShift2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/bitwise/rightLogShift.js"(exports) {
    "use strict";
    var isInteger = require_number().isInteger;
    function factory(type, config, load, typed) {
      var latex = require_latex();
      var matrix = load(require_matrix());
      var equalScalar = load(require_equalScalar());
      var zeros = load(require_zeros2());
      var algorithm01 = load(require_algorithm01());
      var algorithm02 = load(require_algorithm02());
      var algorithm08 = load(require_algorithm08());
      var algorithm10 = load(require_algorithm10());
      var algorithm11 = load(require_algorithm11());
      var algorithm13 = load(require_algorithm13());
      var algorithm14 = load(require_algorithm14());
      var rightLogShift = typed("rightLogShift", {
        "number, number": function(x, y) {
          if (!isInteger(x) || !isInteger(y)) {
            throw new Error("Integers expected in function rightLogShift");
          }
          return x >>> y;
        },
        // 'BigNumber, BigNumber': ..., // TODO: implement BigNumber support for rightLogShift
        "Matrix, Matrix": function(x, y) {
          var c;
          switch (x.storage()) {
            case "sparse":
              switch (y.storage()) {
                case "sparse":
                  c = algorithm08(x, y, rightLogShift, false);
                  break;
                default:
                  c = algorithm02(y, x, rightLogShift, true);
                  break;
              }
              break;
            default:
              switch (y.storage()) {
                case "sparse":
                  c = algorithm01(x, y, rightLogShift, false);
                  break;
                default:
                  c = algorithm13(x, y, rightLogShift);
                  break;
              }
              break;
          }
          return c;
        },
        "Array, Array": function(x, y) {
          return rightLogShift(matrix(x), matrix(y)).valueOf();
        },
        "Array, Matrix": function(x, y) {
          return rightLogShift(matrix(x), y);
        },
        "Matrix, Array": function(x, y) {
          return rightLogShift(x, matrix(y));
        },
        "Matrix, number | BigNumber": function(x, y) {
          if (!equalScalar(y, 0)) {
            var c;
            switch (x.storage()) {
              case "sparse":
                c = algorithm11(x, y, rightLogShift, false);
                break;
              default:
                c = algorithm14(x, y, rightLogShift, false);
                break;
            }
            return c;
          }
          return x.clone();
        },
        "number | BigNumber, Matrix": function(x, y) {
          if (!equalScalar(x, 0)) {
            var c;
            switch (y.storage()) {
              case "sparse":
                c = algorithm10(y, x, rightLogShift, true);
                break;
              default:
                c = algorithm14(y, x, rightLogShift, true);
                break;
            }
            return c;
          }
          return zeros(y.size(), y.storage());
        },
        "Array, number | BigNumber": function(x, y) {
          return rightLogShift(matrix(x), y).valueOf();
        },
        "number | BigNumber, Array": function(x, y) {
          return rightLogShift(x, matrix(y)).valueOf();
        }
      });
      rightLogShift.toTex = {
        2: "\\left(${args[0]}" + latex.operators["rightLogShift"] + "${args[1]}\\right)"
      };
      return rightLogShift;
    }
    exports.name = "rightLogShift";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/bitwise/index.js
var require_bitwise2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/bitwise/index.js"(exports, module) {
    module.exports = [
      require_bitAnd3(),
      require_bitNot3(),
      require_bitOr3(),
      require_bitXor3(),
      require_leftShift3(),
      require_rightArithShift3(),
      require_rightLogShift2()
    ];
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/probability/gamma.js
var require_gamma2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/probability/gamma.js"(exports) {
    "use strict";
    var deepMap = require_deepMap();
    var isInteger = require_number().isInteger;
    function factory(type, config, load, typed) {
      var multiply = load(require_multiply());
      var pow = load(require_pow());
      var gamma = typed("gamma", {
        "number": function(n) {
          var t, x;
          if (isInteger(n)) {
            if (n <= 0) {
              return isFinite(n) ? Infinity : NaN;
            }
            if (n > 171) {
              return Infinity;
            }
            var value = n - 2;
            var res = n - 1;
            while (value > 1) {
              res *= value;
              value--;
            }
            if (res == 0) {
              res = 1;
            }
            return res;
          }
          if (n < 0.5) {
            return Math.PI / (Math.sin(Math.PI * n) * gamma(1 - n));
          }
          if (n >= 171.35) {
            return Infinity;
          }
          if (n > 85) {
            var twoN = n * n;
            var threeN = twoN * n;
            var fourN = threeN * n;
            var fiveN = fourN * n;
            return Math.sqrt(2 * Math.PI / n) * Math.pow(n / Math.E, n) * (1 + 1 / (12 * n) + 1 / (288 * twoN) - 139 / (51840 * threeN) - 571 / (2488320 * fourN) + 163879 / (209018880 * fiveN) + 5246819 / (75246796800 * fiveN * n));
          }
          --n;
          x = p[0];
          for (var i = 1; i < p.length; ++i) {
            x += p[i] / (n + i);
          }
          t = n + g + 0.5;
          return Math.sqrt(2 * Math.PI) * Math.pow(t, n + 0.5) * Math.exp(-t) * x;
        },
        "Complex": function(n) {
          var t, x;
          if (n.im == 0) {
            return gamma(n.re);
          }
          n = new type.Complex(n.re - 1, n.im);
          x = new type.Complex(p[0], 0);
          for (var i = 1; i < p.length; ++i) {
            var real = n.re + i;
            var den = real * real + n.im * n.im;
            if (den != 0) {
              x.re += p[i] * real / den;
              x.im += -(p[i] * n.im) / den;
            } else {
              x.re = p[i] < 0 ? -Infinity : Infinity;
            }
          }
          t = new type.Complex(n.re + g + 0.5, n.im);
          var twoPiSqrt = Math.sqrt(2 * Math.PI);
          n.re += 0.5;
          var result = pow(t, n);
          if (result.im == 0) {
            result.re *= twoPiSqrt;
          } else if (result.re == 0) {
            result.im *= twoPiSqrt;
          } else {
            result.re *= twoPiSqrt;
            result.im *= twoPiSqrt;
          }
          var r = Math.exp(-t.re);
          t.re = r * Math.cos(-t.im);
          t.im = r * Math.sin(-t.im);
          return multiply(multiply(result, t), x);
        },
        "BigNumber": function(n) {
          if (n.isInteger()) {
            return n.isNegative() || n.isZero() ? new type.BigNumber(Infinity) : bigFactorial(n.minus(1));
          }
          if (!n.isFinite()) {
            return new type.BigNumber(n.isNegative() ? NaN : Infinity);
          }
          throw new Error("Integer BigNumber expected");
        },
        "Array | Matrix": function(n) {
          return deepMap(n, gamma);
        }
      });
      function bigFactorial(n) {
        if (n.isZero()) {
          return new type.BigNumber(1);
        }
        var precision = config.precision + (Math.log(n.toNumber()) | 0);
        var Big = type.BigNumber.clone({ precision });
        var res = new Big(n);
        var value = n.toNumber() - 1;
        while (value > 1) {
          res = res.times(value);
          value--;
        }
        return new type.BigNumber(res.toPrecision(type.BigNumber.precision));
      }
      gamma.toTex = { 1: "\\Gamma\\left(${args[0]}\\right)" };
      return gamma;
    }
    var g = 4.7421875;
    var p = [
      0.9999999999999971,
      57.15623566586292,
      -59.59796035547549,
      14.136097974741746,
      -0.4919138160976202,
      3399464998481189e-20,
      4652362892704858e-20,
      -9837447530487956e-20,
      1580887032249125e-19,
      -21026444172410488e-20,
      21743961811521265e-20,
      -1643181065367639e-19,
      8441822398385275e-20,
      -26190838401581408e-21,
      36899182659531625e-22
    ];
    exports.name = "gamma";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/probability/factorial.js
var require_factorial2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/probability/factorial.js"(exports) {
    "use strict";
    var deepMap = require_deepMap();
    function factory(type, config, load, typed) {
      var gamma = load(require_gamma2());
      var latex = require_latex();
      var factorial = typed("factorial", {
        "number": function(n) {
          if (n < 0) {
            throw new Error("Value must be non-negative");
          }
          return gamma(n + 1);
        },
        "BigNumber": function(n) {
          if (n.isNegative()) {
            throw new Error("Value must be non-negative");
          }
          return gamma(n.plus(1));
        },
        "Array | Matrix": function(n) {
          return deepMap(n, factorial);
        }
      });
      factorial.toTex = {
        1: "\\left(${args[0]}\\right)" + latex.operators["factorial"]
      };
      return factorial;
    }
    exports.name = "factorial";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/probability/combinations.js
var require_combinations2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/probability/combinations.js"(exports) {
    "use strict";
    var isInteger = require_number().isInteger;
    function factory(type, config, load, typed) {
      var combinations = typed("combinations", {
        "number, number": function(n, k) {
          var max, result, i;
          if (!isInteger(n) || n < 0) {
            throw new TypeError("Positive integer value expected in function combinations");
          }
          if (!isInteger(k) || k < 0) {
            throw new TypeError("Positive integer value expected in function combinations");
          }
          if (k > n) {
            throw new TypeError("k must be less than or equal to n");
          }
          max = Math.max(k, n - k);
          result = 1;
          for (i = 1; i <= n - max; i++) {
            result = result * (max + i) / i;
          }
          return result;
        },
        "BigNumber, BigNumber": function(n, k) {
          var max, result, i, ii;
          var one = new type.BigNumber(1);
          if (!isPositiveInteger(n) || !isPositiveInteger(k)) {
            throw new TypeError("Positive integer value expected in function combinations");
          }
          if (k.gt(n)) {
            throw new TypeError("k must be less than n in function combinations");
          }
          max = n.minus(k);
          if (k.lt(max)) max = k;
          result = one;
          for (i = one, ii = n.minus(max); i.lte(ii); i = i.plus(1)) {
            result = result.times(max.plus(i)).dividedBy(i);
          }
          return result;
        }
        // TODO: implement support for collection in combinations
      });
      combinations.toTex = { 2: "\\binom{${args[0]}}{${args[1]}}" };
      return combinations;
    }
    function isPositiveInteger(n) {
      return n.isInteger() && n.gte(0);
    }
    exports.name = "combinations";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/utils/isInteger.js
var require_isInteger2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/utils/isInteger.js"(exports) {
    "use strict";
    var deepMap = require_deepMap();
    var number = require_number();
    function factory(type, config, load, typed) {
      var isInteger = typed("isInteger", {
        "number": number.isInteger,
        // TODO: what to do with isInteger(add(0.1, 0.2))  ?
        "BigNumber": function(x) {
          return x.isInt();
        },
        "Fraction": function(x) {
          return x.d === 1 && isFinite(x.n);
        },
        "Array | Matrix": function(x) {
          return deepMap(x, isInteger);
        }
      });
      return isInteger;
    }
    exports.name = "isInteger";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/combinatorics/stirlingS2.js
var require_stirlingS22 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/combinatorics/stirlingS2.js"(exports) {
    "use strict";
    function factory(type, config, load, typed) {
      var add = load(require_add());
      var subtract = load(require_subtract());
      var multiply = load(require_multiply());
      var divide = load(require_divide2());
      var pow = load(require_pow());
      var factorial = load(require_factorial2());
      var combinations = load(require_combinations2());
      var isNegative = load(require_isNegative2());
      var isInteger = load(require_isInteger2());
      var larger = load(require_larger());
      var stirlingS2 = typed("stirlingS2", {
        "number | BigNumber, number | BigNumber": function(n, k) {
          if (!isInteger(n) || isNegative(n) || !isInteger(k) || isNegative(k)) {
            throw new TypeError("Non-negative integer value expected in function stirlingS2");
          } else if (larger(k, n)) {
            throw new TypeError("k must be less than or equal to n in function stirlingS2");
          }
          var kFactorial = factorial(k);
          var result = 0;
          for (var i = 0; i <= k; i++) {
            var negativeOne = pow(-1, subtract(k, i));
            var kChooseI = combinations(k, i);
            var iPower = pow(i, n);
            result = add(result, multiply(multiply(kChooseI, iPower), negativeOne));
          }
          return divide(result, kFactorial);
        }
      });
      stirlingS2.toTex = { 2: "\\mathrm{S}\\left(${args}\\right)" };
      return stirlingS2;
    }
    exports.name = "stirlingS2";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/combinatorics/bellNumbers.js
var require_bellNumbers2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/combinatorics/bellNumbers.js"(exports) {
    "use strict";
    function factory(type, config, load, typed) {
      var add = load(require_add());
      var stirlingS2 = load(require_stirlingS22());
      var isNegative = load(require_isNegative2());
      var isInteger = load(require_isInteger2());
      var bellNumbers = typed("bellNumbers", {
        "number | BigNumber": function(n) {
          if (!isInteger(n) || isNegative(n)) {
            throw new TypeError("Non-negative integer value expected in function bellNumbers");
          }
          var result = 0;
          for (var i = 0; i <= n; i++) {
            result = add(result, stirlingS2(n, i));
          }
          return result;
        }
      });
      bellNumbers.toTex = { 1: "\\mathrm{B}_{${args[0]}}" };
      return bellNumbers;
    }
    exports.name = "bellNumbers";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/combinatorics/composition.js
var require_composition2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/combinatorics/composition.js"(exports) {
    "use strict";
    function factory(type, config, load, typed) {
      var combinations = load(require_combinations2());
      var add = load(require_addScalar());
      var isPositive = load(require_isPositive2());
      var isInteger = load(require_isInteger2());
      var larger = load(require_larger());
      var composition = typed("composition", {
        "number | BigNumber, number | BigNumber": function(n, k) {
          if (!isInteger(n) || !isPositive(n) || !isInteger(k) || !isPositive(k)) {
            throw new TypeError("Positive integer value expected in function composition");
          } else if (larger(k, n)) {
            throw new TypeError("k must be less than or equal to n in function composition");
          }
          return combinations(add(n, -1), add(k, -1));
        }
      });
      composition.toTex = void 0;
      return composition;
    }
    exports.name = "composition";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/combinatorics/catalan.js
var require_catalan2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/combinatorics/catalan.js"(exports) {
    "use strict";
    function factory(type, config, load, typed) {
      var add = load(require_add());
      var divide = load(require_divide2());
      var multiply = load(require_multiply());
      var combinations = load(require_combinations2());
      var isNegative = load(require_isNegative2());
      var isInteger = load(require_isInteger2());
      var catalan = typed("catalan", {
        "number | BigNumber": function(n) {
          if (!isInteger(n) || isNegative(n)) {
            throw new TypeError("Non-negative integer value expected in function catalan");
          }
          return divide(combinations(multiply(n, 2), n), add(n, 1));
        }
      });
      catalan.toTex = { 1: "\\mathrm{C}_{${args[0]}}" };
      return catalan;
    }
    exports.name = "catalan";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/combinatorics/index.js
var require_combinatorics = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/combinatorics/index.js"(exports, module) {
    module.exports = [
      require_bellNumbers2(),
      require_composition2(),
      require_stirlingS22(),
      require_catalan2()
    ];
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/complex/arg.js
var require_arg2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/complex/arg.js"(exports) {
    "use strict";
    var deepMap = require_deepMap();
    function factory(type, config, load, typed) {
      var arg = typed("arg", {
        "number": function(x) {
          return Math.atan2(0, x);
        },
        "BigNumber": function(x) {
          return type.BigNumber.atan2(0, x);
        },
        "Complex": function(x) {
          return x.arg();
        },
        // TODO: implement BigNumber support for function arg
        "Array | Matrix": function(x) {
          return deepMap(x, arg);
        }
      });
      arg.toTex = { 1: "\\arg\\left(${args[0]}\\right)" };
      return arg;
    }
    exports.name = "arg";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/complex/conj.js
var require_conj2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/complex/conj.js"(exports) {
    "use strict";
    var deepMap = require_deepMap();
    function factory(type, config, load, typed) {
      var conj = typed("conj", {
        "number": function(x) {
          return x;
        },
        "BigNumber": function(x) {
          return x;
        },
        "Complex": function(x) {
          return x.conjugate();
        },
        "Array | Matrix": function(x) {
          return deepMap(x, conj);
        }
      });
      conj.toTex = { 1: "\\left(${args[0]}\\right)^*" };
      return conj;
    }
    exports.name = "conj";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/complex/im.js
var require_im2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/complex/im.js"(exports) {
    "use strict";
    var deepMap = require_deepMap();
    function factory(type, config, load, typed) {
      var im = typed("im", {
        "number": function(x) {
          return 0;
        },
        "BigNumber": function(x) {
          return new type.BigNumber(0);
        },
        "Complex": function(x) {
          return x.im;
        },
        "Array | Matrix": function(x) {
          return deepMap(x, im);
        }
      });
      im.toTex = { 1: "\\Im\\left\\lbrace${args[0]}\\right\\rbrace" };
      return im;
    }
    exports.name = "im";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/complex/re.js
var require_re2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/complex/re.js"(exports) {
    "use strict";
    var deepMap = require_deepMap();
    function factory(type, config, load, typed) {
      var re = typed("re", {
        "number": function(x) {
          return x;
        },
        "BigNumber": function(x) {
          return x;
        },
        "Complex": function(x) {
          return x.re;
        },
        "Array | Matrix": function(x) {
          return deepMap(x, re);
        }
      });
      re.toTex = { 1: "\\Re\\left\\lbrace${args[0]}\\right\\rbrace" };
      return re;
    }
    exports.name = "re";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/complex/index.js
var require_complex5 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/complex/index.js"(exports, module) {
    module.exports = [
      require_arg2(),
      require_conj2(),
      require_im2(),
      require_re2()
    ];
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/geometry/intersect.js
var require_intersect2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/geometry/intersect.js"(exports) {
    "use strict";
    function factory(type, config, load, typed) {
      var abs = load(require_abs());
      var add = load(require_add());
      var matrix = load(require_matrix());
      var multiply = load(require_multiply());
      var subtract = load(require_subtract());
      var intersect = typed("intersect", {
        "Array, Array, Array": function(x, y, plane) {
          if (!_3d(x)) {
            throw new TypeError("Array with 3 numbers expected for first argument");
          }
          if (!_3d(y)) {
            throw new TypeError("Array with 3 numbers expected for second argument");
          }
          if (!_4d(plane)) {
            throw new TypeError("Array with 4 numbers expected as third argument");
          }
          return _intersectLinePlane(x[0], x[1], x[2], y[0], y[1], y[2], plane[0], plane[1], plane[2], plane[3]);
        },
        "Array, Array, Array, Array": function(w, x, y, z) {
          if (w.length === 2) {
            if (!_2d(w)) {
              throw new TypeError("Array with 2 numbers expected for first argument");
            }
            if (!_2d(x)) {
              throw new TypeError("Array with 2 numbers expected for second argument");
            }
            if (!_2d(y)) {
              throw new TypeError("Array with 2 numbers expected for third argument");
            }
            if (!_2d(z)) {
              throw new TypeError("Array with 2 numbers expected for fourth argument");
            }
            return _intersect2d(w, x, y, z);
          } else if (w.length === 3) {
            if (!_3d(w)) {
              throw new TypeError("Array with 3 numbers expected for first argument");
            }
            if (!_3d(x)) {
              throw new TypeError("Array with 3 numbers expected for second argument");
            }
            if (!_3d(y)) {
              throw new TypeError("Array with 3 numbers expected for third argument");
            }
            if (!_3d(z)) {
              throw new TypeError("Array with 3 numbers expected for fourth argument");
            }
            return _intersect3d(w[0], w[1], w[2], x[0], x[1], x[2], y[0], y[1], y[2], z[0], z[1], z[2]);
          } else {
            throw new TypeError("Arrays with two or thee dimensional points expected");
          }
        },
        "Matrix, Matrix, Matrix": function(x, y, plane) {
          return matrix(intersect(x.valueOf(), y.valueOf(), plane.valueOf()));
        },
        "Matrix, Matrix, Matrix, Matrix": function(w, x, y, z) {
          return matrix(intersect(w.valueOf(), x.valueOf(), y.valueOf(), z.valueOf()));
        }
      });
      function _2d(x) {
        return x.length === 2 && typeof x[0] === "number" && typeof x[1] === "number";
      }
      function _3d(x) {
        return x.length === 3 && typeof x[0] === "number" && typeof x[1] === "number" && typeof x[2] === "number";
      }
      function _4d(x) {
        return x.length === 4 && typeof x[0] === "number" && typeof x[1] === "number" && typeof x[2] === "number" && typeof x[3] === "number";
      }
      function _intersect2d(p1a, p1b, p2a, p2b) {
        var o1 = p1a;
        var o2 = p2a;
        var d1 = subtract(o1, p1b);
        var d2 = subtract(o2, p2b);
        var det = d1[0] * d2[1] - d2[0] * d1[1];
        if (abs(det) < config.epsilon) {
          return null;
        }
        var t = (d2[0] * o1[1] - d2[1] * o1[0] - d2[0] * o2[1] + d2[1] * o2[0]) / det;
        return add(multiply(d1, t), o1);
      }
      function _intersect3d(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4) {
        var d1343 = (x1 - x3) * (x4 - x3) + (y1 - y3) * (y4 - y3) + (z1 - z3) * (z4 - z3);
        var d4321 = (x4 - x3) * (x2 - x1) + (y4 - y3) * (y2 - y1) + (z4 - z3) * (z2 - z1);
        var d1321 = (x1 - x3) * (x2 - x1) + (y1 - y3) * (y2 - y1) + (z1 - z3) * (z2 - z1);
        var d4343 = (x4 - x3) * (x4 - x3) + (y4 - y3) * (y4 - y3) + (z4 - z3) * (z4 - z3);
        var d2121 = (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1) + (z2 - z1) * (z2 - z1);
        var ta = (d1343 * d4321 - d1321 * d4343) / (d2121 * d4343 - d4321 * d4321);
        var tb = (d1343 + ta * d4321) / d4343;
        var pax = x1 + ta * (x2 - x1);
        var pay = y1 + ta * (y2 - y1);
        var paz = z1 + ta * (z2 - z1);
        var pbx = x3 + tb * (x4 - x3);
        var pby = y3 + tb * (y4 - y3);
        var pbz = z3 + tb * (z4 - z3);
        if (pax === pbx && pay === pby && paz === pbz) {
          return [pax, pay, paz];
        } else {
          return null;
        }
      }
      function _intersectLinePlane(x1, y1, z1, x2, y2, z2, x, y, z, c) {
        var t = (c - x1 * x - y1 * y - z1 * z) / (x2 * x + y2 * y + z2 * z - x1 - y1 - z1);
        var px = x1 + t * (x2 - x1);
        var py = y1 + t * (y2 - y1);
        var pz = z1 + t * (z2 - z1);
        return [px, py, pz];
      }
      return intersect;
    }
    exports.name = "intersect";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/geometry/distance.js
var require_distance2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/geometry/distance.js"(exports) {
    "use strict";
    function factory(type, config, load, typed) {
      var matrix = load(require_matrix());
      var distance = typed("distance", {
        "Array, Array, Array": function(x, y, z) {
          if (x.length == 2 && y.length == 2 && z.length == 2) {
            if (!_2d(x)) {
              throw new TypeError("Array with 2 numbers expected for first argument");
            }
            if (!_2d(y)) {
              throw new TypeError("Array with 2 numbers expected for second argument");
            }
            if (!_2d(z)) {
              throw new TypeError("Array with 2 numbers expected for third argument");
            }
            var m = (z[1] - z[0]) / (y[1] - y[0]);
            var xCoeff = m * m * y[0];
            var yCoeff = -1 * (m * y[0]);
            var constant = x[1];
            return _distancePointLine2D(x[0], x[1], xCoeff, yCoeff, constant);
          } else {
            throw new TypeError("Invalid Arguments: Try again");
          }
        },
        "Object, Object, Object": function(x, y, z) {
          if (Object.keys(x).length == 2 && Object.keys(y).length == 2 && Object.keys(z).length == 2) {
            if (!_2d(x)) {
              throw new TypeError("Values of pointX and pointY should be numbers");
            }
            if (!_2d(y)) {
              throw new TypeError("Values of lineOnePtX and lineOnePtY should be numbers");
            }
            if (!_2d(z)) {
              throw new TypeError("Values of lineTwoPtX and lineTwoPtY should be numbers");
            }
            if (x.hasOwnProperty("pointX") && x.hasOwnProperty("pointY") && y.hasOwnProperty("lineOnePtX") && y.hasOwnProperty("lineOnePtY") && z.hasOwnProperty("lineTwoPtX") && z.hasOwnProperty("lineTwoPtY")) {
              var m = (z.lineTwoPtY - z.lineTwoPtX) / (y.lineOnePtY - y.lineOnePtX);
              var xCoeff = m * m * y.lineOnePtX;
              var yCoeff = -1 * (m * y.lineOnePtX);
              var constant = x.pointX;
              return _distancePointLine2D(x.pointX, x.pointY, xCoeff, yCoeff, constant);
            } else {
              throw new TypeError("Key names do not match");
            }
          } else {
            throw new TypeError("Invalid Arguments: Try again");
          }
        },
        "Array, Array": function(x, y) {
          if (x.length == 2 && y.length == 3) {
            if (!_2d(x)) {
              throw new TypeError("Array with 2 numbers expected for first argument");
            }
            if (!_3d(y)) {
              throw new TypeError("Array with 3 numbers expected for second argument");
            }
            return _distancePointLine2D(x[0], x[1], y[0], y[1], y[2]);
          } else if (x.length == 3 && y.length == 6) {
            if (!_3d(x)) {
              throw new TypeError("Array with 3 numbers expected for first argument");
            }
            if (!_parametricLine(y)) {
              throw new TypeError("Array with 6 numbers expected for second argument");
            }
            return _distancePointLine3D(x[0], x[1], x[2], y[0], y[1], y[2], y[3], y[4], y[5]);
          } else if (x.length == 2 && y.length == 2) {
            if (!_2d(x)) {
              throw new TypeError("Array with 2 numbers expected for first argument");
            }
            if (!_2d(y)) {
              throw new TypeError("Array with 2 numbers expected for second argument");
            }
            return _distance2d(x[0], x[1], y[0], y[1]);
          } else if (x.length == 3 && y.length == 3) {
            if (!_3d(x)) {
              throw new TypeError("Array with 3 numbers expected for first argument");
            }
            if (!_3d(y)) {
              throw new TypeError("Array with 3 numbers expected for second argument");
            }
            return _distance3d(x[0], x[1], x[2], y[0], y[1], y[2]);
          } else {
            throw new TypeError("Invalid Arguments: Try again");
          }
        },
        "Object, Object": function(x, y) {
          if (Object.keys(x).length == 2 && Object.keys(y).length == 3) {
            if (!_2d(x)) {
              throw new TypeError("Values of pointX and pointY should be numbers");
            }
            if (!_3d(y)) {
              throw new TypeError("Values of xCoeffLine, yCoeffLine and constant should be numbers");
            }
            if (x.hasOwnProperty("pointX") && x.hasOwnProperty("pointY") && y.hasOwnProperty("xCoeffLine") && y.hasOwnProperty("yCoeffLine") && y.hasOwnProperty("yCoeffLine")) {
              return _distancePointLine2D(x.pointX, x.pointY, y.xCoeffLine, y.yCoeffLine, y.constant);
            } else {
              throw new TypeError("Key names do not match");
            }
          } else if (Object.keys(x).length == 3 && Object.keys(y).length == 6) {
            if (!_3d(x)) {
              throw new TypeError("Values of pointX, pointY and pointZ should be numbers");
            }
            if (!_parametricLine(y)) {
              throw new TypeError("Values of x0, y0, z0, a, b and c should be numbers");
            }
            if (x.hasOwnProperty("pointX") && x.hasOwnProperty("pointY") && y.hasOwnProperty("x0") && y.hasOwnProperty("y0") && y.hasOwnProperty("z0") && y.hasOwnProperty("a") && y.hasOwnProperty("b") && y.hasOwnProperty("c")) {
              return _distancePointLine3D(x.pointX, x.pointY, x.pointZ, y.x0, y.y0, y.z0, y.a, y.b, y.c);
            } else {
              throw new TypeError("Key names do not match");
            }
          } else if (Object.keys(x).length == 2 && Object.keys(y).length == 2) {
            if (!_2d(x)) {
              throw new TypeError("Values of pointOneX and pointOneY should be numbers");
            }
            if (!_2d(y)) {
              throw new TypeError("Values of pointTwoX and pointTwoY should be numbers");
            }
            if (x.hasOwnProperty("pointOneX") && x.hasOwnProperty("pointOneY") && y.hasOwnProperty("pointTwoX") && y.hasOwnProperty("pointTwoY")) {
              return _distance2d(x.pointOneX, x.pointOneY, y.pointTwoX, y.pointTwoY);
            } else {
              throw new TypeError("Key names do not match");
            }
          } else if (Object.keys(x).length == 3 && Object.keys(y).length == 3) {
            if (!_3d(x)) {
              throw new TypeError("Values of pointOneX, pointOneY and pointOneZ should be numbers");
            }
            if (!_3d(y)) {
              throw new TypeError("Values of pointTwoX, pointTwoY and pointTwoZ should be numbers");
            }
            if (x.hasOwnProperty("pointOneX") && x.hasOwnProperty("pointOneY") && x.hasOwnProperty("pointOneZ") && y.hasOwnProperty("pointTwoX") && y.hasOwnProperty("pointTwoY") && y.hasOwnProperty("pointTwoZ")) {
              return _distance3d(x.pointOneX, x.pointOneY, x.pointOneZ, y.pointTwoX, y.pointTwoY, y.pointTwoZ);
            } else {
              throw new TypeError("Key names do not match");
            }
          } else {
            throw new TypeError("Invalid Arguments: Try again");
          }
        },
        "Array": function(arr) {
          if (!_pairwise(arr)) {
            throw new TypeError("Incorrect array format entered for pairwise distance calculation");
          }
          return _distancePairwise(arr);
        }
      });
      return distance;
    }
    function _2d(a) {
      if (a.constructor !== Array) {
        a = _objectToArray(a);
      }
      return typeof a[0] === "number" && typeof a[1] === "number";
    }
    function _3d(a) {
      if (a.constructor !== Array) {
        a = _objectToArray(a);
      }
      return typeof a[0] === "number" && typeof a[1] === "number" && typeof a[2] === "number";
    }
    function _parametricLine(a) {
      if (a.constructor !== Array) {
        a = _objectToArray(a);
      }
      return typeof a[0] === "number" && typeof a[1] === "number" && typeof a[2] === "number" && typeof a[3] === "number" && typeof a[4] === "number" && typeof a[5] === "number";
    }
    function _objectToArray(o) {
      var keys = Object.keys(o);
      var a = [];
      for (var i = 0; i < keys.length; i++) {
        a.push(o[keys[i]]);
      }
      return a;
    }
    function _pairwise(a) {
      if (a[0].length == 2 && typeof a[0][0] === "number" && typeof a[0][1] === "number") {
        for (var i in a) {
          if (a[i].length != 2 || typeof a[i][0] !== "number" || typeof a[i][1] !== "number") {
            return false;
          }
        }
      } else if (a[0].length == 3 && typeof a[0][0] === "number" && typeof a[0][1] === "number" && typeof a[0][2] === "number") {
        for (var i in a) {
          if (a[i].length != 3 || typeof a[i][0] !== "number" || typeof a[i][1] !== "number" || typeof a[i][2] !== "number") {
            return false;
          }
        }
      } else {
        return false;
      }
      return true;
    }
    function _distancePointLine2D(x, y, a, b, c) {
      var num = Math.abs(a * x + b * y + c);
      var den = Math.pow(a * a + b * b, 0.5);
      var result = num / den;
      return result;
    }
    function _distancePointLine3D(x, y, z, x0, y0, z0, a, b, c) {
      var num = [(y0 - y) * c - (z0 - z) * b, (z0 - z) * a - (x0 - x) * c, (x0 - x) * b - (y0 - y) * a];
      num = Math.pow(num[0] * num[0] + num[1] * num[1] + num[2] * num[2], 0.5);
      var den = Math.pow(a * a + b * b + c * c, 0.5);
      var result = num / den;
      return result;
    }
    function _distance2d(x1, y1, x2, y2) {
      var yDiff = y2 - y1;
      var xDiff = x2 - x1;
      var radicant = yDiff * yDiff + xDiff * xDiff;
      var result = Math.pow(radicant, 0.5);
      return result;
    }
    function _distance3d(x1, y1, z1, x2, y2, z2) {
      var zDiff = z2 - z1;
      var yDiff = y2 - y1;
      var xDiff = x2 - x1;
      var radicant = zDiff * zDiff + yDiff * yDiff + xDiff * xDiff;
      var result = Math.pow(radicant, 0.5);
      return result;
    }
    function _distancePairwise(a) {
      var result = [];
      for (var i = 0; i < a.length - 1; i++) {
        for (var j = i + 1; j < a.length; j++) {
          if (a[0].length == 2) {
            result.push(_distance2d(a[i][0], a[i][1], a[j][0], a[j][1]));
          } else if (a[0].length == 3) {
            result.push(_distance3d(a[i][0], a[i][1], a[i][2], a[j][0], a[j][1], a[j][2]));
          }
        }
      }
      return result;
    }
    exports.name = "distance";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/geometry/index.js
var require_geometry = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/geometry/index.js"(exports, module) {
    module.exports = [
      require_intersect2(),
      require_distance2()
    ];
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/logical/not.js
var require_not2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/logical/not.js"(exports) {
    "use strict";
    var deepMap = require_deepMap();
    function factory(type, config, load, typed) {
      var latex = require_latex();
      var not = typed("not", {
        "number": function(x) {
          return !x;
        },
        "Complex": function(x) {
          return x.re === 0 && x.im === 0;
        },
        "BigNumber": function(x) {
          return x.isZero() || x.isNaN();
        },
        "Unit": function(x) {
          return not(x.value);
        },
        "Array | Matrix": function(x) {
          return deepMap(x, not);
        }
      });
      not.toTex = {
        1: latex.operators["not"] + "\\left(${args[0]}\\right)"
      };
      return not;
    }
    exports.name = "not";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/utils/isZero.js
var require_isZero2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/utils/isZero.js"(exports) {
    "use strict";
    var deepMap = require_deepMap();
    var number = require_number();
    function factory(type, config, load, typed) {
      var isZero = typed("isZero", {
        "number": function(x) {
          return x === 0;
        },
        "BigNumber": function(x) {
          return x.isZero();
        },
        "Complex": function(x) {
          return x.re === 0 && x.im === 0;
        },
        "Fraction": function(x) {
          return x.d === 1 && x.n === 0;
        },
        "Unit": function(x) {
          return isZero(x.value);
        },
        "Array | Matrix": function(x) {
          return deepMap(x, isZero);
        }
      });
      return isZero;
    }
    exports.name = "isZero";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/logical/and.js
var require_and2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/logical/and.js"(exports) {
    "use strict";
    function factory(type, config, load, typed) {
      var latex = require_latex();
      var matrix = load(require_matrix());
      var zeros = load(require_zeros2());
      var not = load(require_not2());
      var isZero = load(require_isZero2());
      var algorithm02 = load(require_algorithm02());
      var algorithm06 = load(require_algorithm06());
      var algorithm11 = load(require_algorithm11());
      var algorithm13 = load(require_algorithm13());
      var algorithm14 = load(require_algorithm14());
      var and = typed("and", {
        "number, number": function(x, y) {
          return !!(x && y);
        },
        "Complex, Complex": function(x, y) {
          return (x.re !== 0 || x.im !== 0) && (y.re !== 0 || y.im !== 0);
        },
        "BigNumber, BigNumber": function(x, y) {
          return !x.isZero() && !y.isZero() && !x.isNaN() && !y.isNaN();
        },
        "Unit, Unit": function(x, y) {
          return and(x.value, y.value);
        },
        "Matrix, Matrix": function(x, y) {
          var c;
          switch (x.storage()) {
            case "sparse":
              switch (y.storage()) {
                case "sparse":
                  c = algorithm06(x, y, and, false);
                  break;
                default:
                  c = algorithm02(y, x, and, true);
                  break;
              }
              break;
            default:
              switch (y.storage()) {
                case "sparse":
                  c = algorithm02(x, y, and, false);
                  break;
                default:
                  c = algorithm13(x, y, and);
                  break;
              }
              break;
          }
          return c;
        },
        "Array, Array": function(x, y) {
          return and(matrix(x), matrix(y)).valueOf();
        },
        "Array, Matrix": function(x, y) {
          return and(matrix(x), y);
        },
        "Matrix, Array": function(x, y) {
          return and(x, matrix(y));
        },
        "Matrix, any": function(x, y) {
          if (not(y)) {
            return zeros(x.size(), x.storage());
          }
          var c;
          switch (x.storage()) {
            case "sparse":
              c = algorithm11(x, y, and, false);
              break;
            default:
              c = algorithm14(x, y, and, false);
              break;
          }
          return c;
        },
        "any, Matrix": function(x, y) {
          if (not(x)) {
            return zeros(x.size(), x.storage());
          }
          var c;
          switch (y.storage()) {
            case "sparse":
              c = algorithm11(y, x, and, true);
              break;
            default:
              c = algorithm14(y, x, and, true);
              break;
          }
          return c;
        },
        "Array, any": function(x, y) {
          return and(matrix(x), y).valueOf();
        },
        "any, Array": function(x, y) {
          return and(x, matrix(y)).valueOf();
        }
      });
      and.toTex = {
        2: "\\left(${args[0]}" + latex.operators["and"] + "${args[1]}\\right)"
      };
      return and;
    }
    exports.name = "and";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/logical/or.js
var require_or2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/logical/or.js"(exports) {
    "use strict";
    function factory(type, config, load, typed) {
      var latex = require_latex();
      var matrix = load(require_matrix());
      var algorithm03 = load(require_algorithm03());
      var algorithm05 = load(require_algorithm05());
      var algorithm12 = load(require_algorithm12());
      var algorithm13 = load(require_algorithm13());
      var algorithm14 = load(require_algorithm14());
      var or = typed("or", {
        "number, number": function(x, y) {
          return !!(x || y);
        },
        "Complex, Complex": function(x, y) {
          return x.re !== 0 || x.im !== 0 || (y.re !== 0 || y.im !== 0);
        },
        "BigNumber, BigNumber": function(x, y) {
          return !x.isZero() && !x.isNaN() || !y.isZero() && !y.isNaN();
        },
        "Unit, Unit": function(x, y) {
          return or(x.value, y.value);
        },
        "Matrix, Matrix": function(x, y) {
          var c;
          switch (x.storage()) {
            case "sparse":
              switch (y.storage()) {
                case "sparse":
                  c = algorithm05(x, y, or);
                  break;
                default:
                  c = algorithm03(y, x, or, true);
                  break;
              }
              break;
            default:
              switch (y.storage()) {
                case "sparse":
                  c = algorithm03(x, y, or, false);
                  break;
                default:
                  c = algorithm13(x, y, or);
                  break;
              }
              break;
          }
          return c;
        },
        "Array, Array": function(x, y) {
          return or(matrix(x), matrix(y)).valueOf();
        },
        "Array, Matrix": function(x, y) {
          return or(matrix(x), y);
        },
        "Matrix, Array": function(x, y) {
          return or(x, matrix(y));
        },
        "Matrix, any": function(x, y) {
          var c;
          switch (x.storage()) {
            case "sparse":
              c = algorithm12(x, y, or, false);
              break;
            default:
              c = algorithm14(x, y, or, false);
              break;
          }
          return c;
        },
        "any, Matrix": function(x, y) {
          var c;
          switch (y.storage()) {
            case "sparse":
              c = algorithm12(y, x, or, true);
              break;
            default:
              c = algorithm14(y, x, or, true);
              break;
          }
          return c;
        },
        "Array, any": function(x, y) {
          return algorithm14(matrix(x), y, or, false).valueOf();
        },
        "any, Array": function(x, y) {
          return algorithm14(matrix(y), x, or, true).valueOf();
        }
      });
      or.toTex = {
        2: "\\left(${args[0]}" + latex.operators["or"] + "${args[1]}\\right)"
      };
      return or;
    }
    exports.name = "or";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/logical/xor.js
var require_xor2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/logical/xor.js"(exports) {
    "use strict";
    function factory(type, config, load, typed) {
      var latex = require_latex();
      var matrix = load(require_matrix());
      var algorithm03 = load(require_algorithm03());
      var algorithm07 = load(require_algorithm07());
      var algorithm12 = load(require_algorithm12());
      var algorithm13 = load(require_algorithm13());
      var algorithm14 = load(require_algorithm14());
      var xor = typed("xor", {
        "number, number": function(x, y) {
          return !!(!!x ^ !!y);
        },
        "Complex, Complex": function(x, y) {
          return (x.re !== 0 || x.im !== 0) !== (y.re !== 0 || y.im !== 0);
        },
        "BigNumber, BigNumber": function(x, y) {
          return (!x.isZero() && !x.isNaN()) !== (!y.isZero() && !y.isNaN());
        },
        "Unit, Unit": function(x, y) {
          return xor(x.value, y.value);
        },
        "Matrix, Matrix": function(x, y) {
          var c;
          switch (x.storage()) {
            case "sparse":
              switch (y.storage()) {
                case "sparse":
                  c = algorithm07(x, y, xor);
                  break;
                default:
                  c = algorithm03(y, x, xor, true);
                  break;
              }
              break;
            default:
              switch (y.storage()) {
                case "sparse":
                  c = algorithm03(x, y, xor, false);
                  break;
                default:
                  c = algorithm13(x, y, xor);
                  break;
              }
              break;
          }
          return c;
        },
        "Array, Array": function(x, y) {
          return xor(matrix(x), matrix(y)).valueOf();
        },
        "Array, Matrix": function(x, y) {
          return xor(matrix(x), y);
        },
        "Matrix, Array": function(x, y) {
          return xor(x, matrix(y));
        },
        "Matrix, any": function(x, y) {
          var c;
          switch (x.storage()) {
            case "sparse":
              c = algorithm12(x, y, xor, false);
              break;
            default:
              c = algorithm14(x, y, xor, false);
              break;
          }
          return c;
        },
        "any, Matrix": function(x, y) {
          var c;
          switch (y.storage()) {
            case "sparse":
              c = algorithm12(y, x, xor, true);
              break;
            default:
              c = algorithm14(y, x, xor, true);
              break;
          }
          return c;
        },
        "Array, any": function(x, y) {
          return algorithm14(matrix(x), y, xor, false).valueOf();
        },
        "any, Array": function(x, y) {
          return algorithm14(matrix(y), x, xor, true).valueOf();
        }
      });
      xor.toTex = {
        2: "\\left(${args[0]}" + latex.operators["xor"] + "${args[1]}\\right)"
      };
      return xor;
    }
    exports.name = "xor";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/logical/index.js
var require_logical = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/logical/index.js"(exports, module) {
    module.exports = [
      require_and2(),
      require_not2(),
      require_or2(),
      require_xor2()
    ];
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/matrix/cross.js
var require_cross2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/matrix/cross.js"(exports) {
    "use strict";
    var array = require_array();
    function factory(type, config, load, typed) {
      var matrix = load(require_matrix());
      var subtract = load(require_subtract());
      var multiply = load(require_multiply());
      var cross = typed("cross", {
        "Matrix, Matrix": function(x, y) {
          return matrix(_cross(x.toArray(), y.toArray()));
        },
        "Matrix, Array": function(x, y) {
          return matrix(_cross(x.toArray(), y));
        },
        "Array, Matrix": function(x, y) {
          return matrix(_cross(x, y.toArray()));
        },
        "Array, Array": _cross
      });
      cross.toTex = {
        2: "\\left(${args[0]}\\right)\\times\\left(${args[1]}\\right)"
      };
      return cross;
      function _cross(x, y) {
        var highestDimension = Math.max(array.size(x).length, array.size(y).length);
        x = array.squeeze(x);
        y = array.squeeze(y);
        var xSize = array.size(x);
        var ySize = array.size(y);
        if (xSize.length != 1 || ySize.length != 1 || xSize[0] != 3 || ySize[0] != 3) {
          throw new RangeError("Vectors with length 3 expected (Size A = [" + xSize.join(", ") + "], B = [" + ySize.join(", ") + "])");
        }
        var product = [
          subtract(multiply(x[1], y[2]), multiply(x[2], y[1])),
          subtract(multiply(x[2], y[0]), multiply(x[0], y[2])),
          subtract(multiply(x[0], y[1]), multiply(x[1], y[0]))
        ];
        if (highestDimension > 1) {
          return [product];
        } else {
          return product;
        }
      }
    }
    exports.name = "cross";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/matrix/diag.js
var require_diag2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/matrix/diag.js"(exports) {
    "use strict";
    var array = require_array();
    var clone = require_object().clone;
    var isInteger = require_number().isInteger;
    function factory(type, config, load, typed) {
      var matrix = load(require_matrix());
      var diag = typed("diag", {
        // FIXME: simplify this huge amount of signatures as soon as typed-function supports optional arguments
        "Array": function(x) {
          return _diag(x, 0, array.size(x), null);
        },
        "Array, number": function(x, k) {
          return _diag(x, k, array.size(x), null);
        },
        "Array, BigNumber": function(x, k) {
          return _diag(x, k.toNumber(), array.size(x), null);
        },
        "Array, string": function(x, format) {
          return _diag(x, 0, array.size(x), format);
        },
        "Array, number, string": function(x, k, format) {
          return _diag(x, k, array.size(x), format);
        },
        "Array, BigNumber, string": function(x, k, format) {
          return _diag(x, k.toNumber(), array.size(x), format);
        },
        "Matrix": function(x) {
          return _diag(x, 0, x.size(), x.storage());
        },
        "Matrix, number": function(x, k) {
          return _diag(x, k, x.size(), x.storage());
        },
        "Matrix, BigNumber": function(x, k) {
          return _diag(x, k.toNumber(), x.size(), x.storage());
        },
        "Matrix, string": function(x, format) {
          return _diag(x, 0, x.size(), format);
        },
        "Matrix, number, string": function(x, k, format) {
          return _diag(x, k, x.size(), format);
        },
        "Matrix, BigNumber, string": function(x, k, format) {
          return _diag(x, k.toNumber(), x.size(), format);
        }
      });
      diag.toTex = void 0;
      return diag;
      function _diag(x, k, size, format) {
        if (!isInteger(k)) {
          throw new TypeError("Second parameter in function diag must be an integer");
        }
        var kSuper = k > 0 ? k : 0;
        var kSub = k < 0 ? -k : 0;
        switch (size.length) {
          case 1:
            return _createDiagonalMatrix(x, k, format, size[0], kSub, kSuper);
          case 2:
            return _getDiagonal(x, k, format, size, kSub, kSuper);
        }
        throw new RangeError("Matrix for function diag must be 2 dimensional");
      }
      function _createDiagonalMatrix(x, k, format, l, kSub, kSuper) {
        var ms = [l + kSub, l + kSuper];
        var F = type.Matrix.storage(format || "dense");
        var m = F.diagonal(ms, x, k);
        return format !== null ? m : m.valueOf();
      }
      function _getDiagonal(x, k, format, s, kSub, kSuper) {
        if (x && x.isMatrix === true) {
          var dm = x.diagonal(k);
          if (format !== null) {
            if (format !== dm.storage())
              return matrix(dm, format);
            return dm;
          }
          return dm.valueOf();
        }
        var n = Math.min(s[0] - kSub, s[1] - kSuper);
        var vector = [];
        for (var i = 0; i < n; i++) {
          vector[i] = x[i + kSub][i + kSuper];
        }
        return format !== null ? matrix(vector) : vector;
      }
    }
    exports.name = "diag";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/matrix/dot.js
var require_dot2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/matrix/dot.js"(exports) {
    "use strict";
    var size = require_array().size;
    function factory(type, config, load, typed) {
      var add = load(require_add());
      var multiply = load(require_multiply());
      var dot = typed("dot", {
        "Matrix, Matrix": function(x, y) {
          return _dot(x.toArray(), y.toArray());
        },
        "Matrix, Array": function(x, y) {
          return _dot(x.toArray(), y);
        },
        "Array, Matrix": function(x, y) {
          return _dot(x, y.toArray());
        },
        "Array, Array": _dot
      });
      dot.toTex = { 2: "\\left(${args[0]}\\cdot${args[1]}\\right)" };
      return dot;
      function _dot(x, y) {
        var xSize = size(x);
        var ySize = size(y);
        var len = xSize[0];
        if (xSize.length !== 1 || ySize.length !== 1) throw new RangeError("Vector expected");
        if (xSize[0] != ySize[0]) throw new RangeError("Vectors must have equal length (" + xSize[0] + " != " + ySize[0] + ")");
        if (len == 0) throw new RangeError("Cannot calculate the dot product of empty vectors");
        var prod = 0;
        for (var i = 0; i < len; i++) {
          prod = add(prod, multiply(x[i], y[i]));
        }
        return prod;
      }
    }
    exports.name = "dot";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/matrix/flatten.js
var require_flatten2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/matrix/flatten.js"(exports) {
    "use strict";
    var clone = require_object().clone;
    var _flatten = require_array().flatten;
    function factory(type, config, load, typed) {
      var matrix = load(require_matrix());
      var flatten = typed("flatten", {
        "Array": function(x) {
          return _flatten(clone(x));
        },
        "Matrix": function(x) {
          var flat = _flatten(clone(x.toArray()));
          return matrix(flat);
        }
      });
      flatten.toTex = void 0;
      return flatten;
    }
    exports.name = "flatten";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/matrix/kron.js
var require_kron2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/matrix/kron.js"(exports) {
    "use strict";
    var size = require_array().size;
    function factory(type, config, load, typed) {
      var matrix = load(require_matrix());
      var multiplyScalar = load(require_multiplyScalar());
      var kron = typed("kron", {
        "Matrix, Matrix": function(x, y) {
          return matrix(_kron(x.toArray(), y.toArray()));
        },
        "Matrix, Array": function(x, y) {
          return matrix(_kron(x.toArray(), y));
        },
        "Array, Matrix": function(x, y) {
          return matrix(_kron(x, y.toArray()));
        },
        "Array, Array": _kron
      });
      return kron;
      function _kron(a, b) {
        if (size(a).length === 1) {
          a = [a];
        }
        if (size(b).length === 1) {
          b = [b];
        }
        if (size(a).length > 2 || size(b).length > 2) {
          throw new RangeError("Vectors with dimensions greater then 2 are not supported expected (Size x = " + JSON.stringify(a.length) + ", y = " + JSON.stringify(b.length) + ")");
        }
        var t = [];
        var r = [];
        return a.map(function(a2) {
          return b.map(function(b2) {
            return a2.map(function(y) {
              return b2.map(function(x) {
                return r.push(multiplyScalar(y, x));
              });
            }, t.push(r = []));
          });
        }, t = []) && t;
      }
    }
    exports.name = "kron";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/matrix/ones.js
var require_ones2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/matrix/ones.js"(exports) {
    "use strict";
    var isInteger = require_number().isInteger;
    var resize = require_array().resize;
    function factory(type, config, load, typed) {
      var matrix = load(require_matrix());
      var ones = typed("ones", {
        "": function() {
          return config.matrix === "Array" ? _ones([]) : _ones([], "default");
        },
        // math.ones(m, n, p, ..., format)
        // TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this
        "...number | BigNumber | string": function(size) {
          var last = size[size.length - 1];
          if (typeof last === "string") {
            var format = size.pop();
            return _ones(size, format);
          } else if (config.matrix === "Array") {
            return _ones(size);
          } else {
            return _ones(size, "default");
          }
        },
        "Array": _ones,
        "Matrix": function(size) {
          var format = size.storage();
          return _ones(size.valueOf(), format);
        },
        "Array | Matrix, string": function(size, format) {
          return _ones(size.valueOf(), format);
        }
      });
      ones.toTex = void 0;
      return ones;
      function _ones(size, format) {
        var hasBigNumbers = _normalize(size);
        var defaultValue = hasBigNumbers ? new type.BigNumber(1) : 1;
        _validate(size);
        if (format) {
          var m = matrix(format);
          if (size.length > 0) {
            return m.resize(size, defaultValue);
          }
          return m;
        } else {
          var arr = [];
          if (size.length > 0) {
            return resize(arr, size, defaultValue);
          }
          return arr;
        }
      }
      function _normalize(size) {
        var hasBigNumbers = false;
        size.forEach(function(value, index, arr) {
          if (value && value.isBigNumber === true) {
            hasBigNumbers = true;
            arr[index] = value.toNumber();
          }
        });
        return hasBigNumbers;
      }
      function _validate(size) {
        size.forEach(function(value) {
          if (typeof value !== "number" || !isInteger(value) || value < 0) {
            throw new Error("Parameters in function ones must be positive integers");
          }
        });
      }
    }
    exports.name = "ones";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/relational/compare.js
var require_compare2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/relational/compare.js"(exports) {
    "use strict";
    var nearlyEqual = require_number().nearlyEqual;
    var bigNearlyEqual = require_nearlyEqual();
    function factory(type, config, load, typed) {
      var matrix = load(require_matrix());
      var algorithm03 = load(require_algorithm03());
      var algorithm05 = load(require_algorithm05());
      var algorithm12 = load(require_algorithm12());
      var algorithm13 = load(require_algorithm13());
      var algorithm14 = load(require_algorithm14());
      var compare = typed("compare", {
        "boolean, boolean": function(x, y) {
          return x === y ? 0 : x > y ? 1 : -1;
        },
        "number, number": function(x, y) {
          return x === y || nearlyEqual(x, y, config.epsilon) ? 0 : x > y ? 1 : -1;
        },
        "BigNumber, BigNumber": function(x, y) {
          return x.eq(y) || bigNearlyEqual(x, y, config.epsilon) ? new type.BigNumber(0) : new type.BigNumber(x.cmp(y));
        },
        "Fraction, Fraction": function(x, y) {
          return new type.Fraction(x.compare(y));
        },
        "Complex, Complex": function() {
          throw new TypeError("No ordering relation is defined for complex numbers");
        },
        "Unit, Unit": function(x, y) {
          if (!x.equalBase(y)) {
            throw new Error("Cannot compare units with different base");
          }
          return compare(x.value, y.value);
        },
        "string, string": function(x, y) {
          return x === y ? 0 : x > y ? 1 : -1;
        },
        "Matrix, Matrix": function(x, y) {
          var c;
          switch (x.storage()) {
            case "sparse":
              switch (y.storage()) {
                case "sparse":
                  c = algorithm05(x, y, compare);
                  break;
                default:
                  c = algorithm03(y, x, compare, true);
                  break;
              }
              break;
            default:
              switch (y.storage()) {
                case "sparse":
                  c = algorithm03(x, y, compare, false);
                  break;
                default:
                  c = algorithm13(x, y, compare);
                  break;
              }
              break;
          }
          return c;
        },
        "Array, Array": function(x, y) {
          return compare(matrix(x), matrix(y)).valueOf();
        },
        "Array, Matrix": function(x, y) {
          return compare(matrix(x), y);
        },
        "Matrix, Array": function(x, y) {
          return compare(x, matrix(y));
        },
        "Matrix, any": function(x, y) {
          var c;
          switch (x.storage()) {
            case "sparse":
              c = algorithm12(x, y, compare, false);
              break;
            default:
              c = algorithm14(x, y, compare, false);
              break;
          }
          return c;
        },
        "any, Matrix": function(x, y) {
          var c;
          switch (y.storage()) {
            case "sparse":
              c = algorithm12(y, x, compare, true);
              break;
            default:
              c = algorithm14(y, x, compare, true);
              break;
          }
          return c;
        },
        "Array, any": function(x, y) {
          return algorithm14(matrix(x), y, compare, false).valueOf();
        },
        "any, Array": function(x, y) {
          return algorithm14(matrix(y), x, compare, true).valueOf();
        }
      });
      compare.toTex = void 0;
      return compare;
    }
    exports.name = "compare";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/matrix/partitionSelect.js
var require_partitionSelect2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/matrix/partitionSelect.js"(exports) {
    "use strict";
    var isInteger = require_number().isInteger;
    function factory(type, config, load, typed) {
      var asc = load(require_compare2());
      function desc(a, b) {
        return -asc(a, b);
      }
      return typed("partitionSelect", {
        "Array | Matrix, number": function(x, k) {
          return _partitionSelect(x, k, asc);
        },
        "Array | Matrix, number, string": function(x, k, compare) {
          if (compare === "asc") {
            return _partitionSelect(x, k, asc);
          } else if (compare === "desc") {
            return _partitionSelect(x, k, desc);
          } else {
            throw new Error('Compare string must be "asc" or "desc"');
          }
        },
        "Array | Matrix, number, function": _partitionSelect
      });
      function _partitionSelect(x, k, compare) {
        if (!isInteger(k) || k < 0) {
          throw new Error("k must be a non-negative integer");
        }
        if (x && x.isMatrix) {
          var size = x.size();
          if (size.length > 1) {
            throw new Error("Only one dimensional matrices supported");
          }
          return quickSelect(x.valueOf(), k, compare);
        }
        if (Array.isArray(x)) {
          return quickSelect(x, k, compare);
        }
      }
      function quickSelect(arr, k, compare) {
        if (k >= arr.length) {
          throw new Error("k out of bounds");
        }
        var from = 0;
        var to = arr.length - 1;
        while (from < to) {
          var r = from;
          var w = to;
          var pivot = arr[Math.floor(Math.random() * (to - from + 1)) + from];
          while (r < w) {
            if (compare(arr[r], pivot) >= 0) {
              var tmp = arr[w];
              arr[w] = arr[r];
              arr[r] = tmp;
              --w;
            } else {
              ++r;
            }
          }
          if (compare(arr[r], pivot) > 0) {
            --r;
          }
          if (k <= r) {
            to = r;
          } else {
            from = r + 1;
          }
        }
        return arr[k];
      }
    }
    exports.name = "partitionSelect";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/matrix/reshape.js
var require_reshape2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/matrix/reshape.js"(exports) {
    "use strict";
    var DimensionError = require_DimensionError();
    var isInteger = require_number().isInteger;
    var array = require_array();
    function factory(type, config, load, typed) {
      var matrix = load(require_matrix());
      var reshape = typed("reshape", {
        "Matrix, Array": function(x, sizes) {
          if (x.reshape) {
            return x.reshape(sizes);
          } else {
            return matrix(array.reshape(x.valueOf(), sizes));
          }
        },
        "Array, Array": function(x, sizes) {
          sizes.forEach(function(size) {
            if (!isInteger(size)) {
              throw new TypeError("Invalid size for dimension: " + size);
            }
          });
          return array.reshape(x, sizes);
        }
      });
      reshape.toTex = void 0;
      return reshape;
    }
    exports.name = "reshape";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/matrix/resize.js
var require_resize2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/matrix/resize.js"(exports) {
    "use strict";
    var DimensionError = require_DimensionError();
    var ArgumentsError = require_ArgumentsError();
    var isInteger = require_number().isInteger;
    var format = require_string().format;
    var clone = require_object().clone;
    var array = require_array();
    function factory(type, config, load, typed) {
      var matrix = load(require_matrix());
      var resize = function resize2(x, size, defaultValue) {
        if (arguments.length != 2 && arguments.length != 3) {
          throw new ArgumentsError("resize", arguments.length, 2, 3);
        }
        if (size && size.isMatrix === true) {
          size = size.valueOf();
        }
        if (size.length && size[0] && size[0].isBigNumber === true) {
          size = size.map(function(value) {
            return value && value.isBigNumber === true ? value.toNumber() : value;
          });
        }
        if (x && x.isMatrix === true) {
          return x.resize(size, defaultValue, true);
        }
        if (typeof x === "string") {
          return _resizeString(x, size, defaultValue);
        }
        var asMatrix = Array.isArray(x) ? false : config.matrix !== "Array";
        if (size.length == 0) {
          while (Array.isArray(x)) {
            x = x[0];
          }
          return clone(x);
        } else {
          if (!Array.isArray(x)) {
            x = [x];
          }
          x = clone(x);
          var res = array.resize(x, size, defaultValue);
          return asMatrix ? matrix(res) : res;
        }
      };
      resize.toTex = void 0;
      return resize;
      function _resizeString(str, size, defaultChar) {
        if (defaultChar !== void 0) {
          if (typeof defaultChar !== "string" || defaultChar.length !== 1) {
            throw new TypeError("Single character expected as defaultValue");
          }
        } else {
          defaultChar = " ";
        }
        if (size.length !== 1) {
          throw new DimensionError(size.length, 1);
        }
        var len = size[0];
        if (typeof len !== "number" || !isInteger(len)) {
          throw new TypeError("Invalid size, must contain positive integers (size: " + format(size) + ")");
        }
        if (str.length > len) {
          return str.substring(0, len);
        } else if (str.length < len) {
          var res = str;
          for (var i = 0, ii = len - str.length; i < ii; i++) {
            res += defaultChar;
          }
          return res;
        } else {
          return str;
        }
      }
    }
    exports.name = "resize";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/matrix/size.js
var require_size2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/matrix/size.js"(exports) {
    "use strict";
    var array = require_array();
    function factory(type, config, load, typed) {
      var matrix = load(require_matrix());
      var size = typed("size", {
        "Matrix": function(x) {
          return matrix(x.size());
        },
        "Array": array.size,
        "string": function(x) {
          return config.matrix === "Array" ? [x.length] : matrix([x.length]);
        },
        "number | Complex | BigNumber | Unit | boolean | null": function(x) {
          return config.matrix === "Array" ? [] : matrix([]);
        }
      });
      size.toTex = void 0;
      return size;
    }
    exports.name = "size";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/matrix/sort.js
var require_sort2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/matrix/sort.js"(exports) {
    "use strict";
    var size = require_array().size;
    function factory(type, config, load, typed) {
      var matrix = load(require_matrix());
      var asc = load(require_compare2());
      var desc = function(a, b) {
        return -asc(a, b);
      };
      var sort = typed("sort", {
        "Array": function(x) {
          _arrayIsVector(x);
          return x.sort(asc);
        },
        "Matrix": function(x) {
          _matrixIsVector(x);
          return matrix(x.toArray().sort(asc), x.storage());
        },
        "Array, function": function(x, _comparator2) {
          _arrayIsVector(x);
          return x.sort(_comparator2);
        },
        "Matrix, function": function(x, _comparator2) {
          _matrixIsVector(x);
          return matrix(x.toArray().sort(_comparator2), x.storage());
        },
        "Array, string": function(x, order) {
          _arrayIsVector(x);
          return x.sort(_comparator(order));
        },
        "Matrix, string": function(x, order) {
          _matrixIsVector(x);
          return matrix(x.toArray().sort(_comparator(order)), x.storage());
        }
      });
      sort.toTex = void 0;
      function _comparator(order) {
        if (order === "asc") {
          return asc;
        } else if (order === "desc") {
          return desc;
        } else {
          throw new Error('String "asc" or "desc" expected');
        }
      }
      function _arrayIsVector(array) {
        if (size(array).length !== 1) {
          throw new Error("One dimensional array expected");
        }
      }
      function _matrixIsVector(matrix2) {
        if (matrix2.size().length !== 1) {
          throw new Error("One dimensional matrix expected");
        }
      }
      return sort;
    }
    exports.name = "sort";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/matrix/squeeze.js
var require_squeeze2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/matrix/squeeze.js"(exports) {
    "use strict";
    var object = require_object();
    var array = require_array();
    function factory(type, config, load, typed) {
      var matrix = load(require_matrix());
      var squeeze = typed("squeeze", {
        "Array": function(x) {
          return array.squeeze(object.clone(x));
        },
        "Matrix": function(x) {
          var res = array.squeeze(x.toArray());
          return Array.isArray(res) ? matrix(res) : res;
        },
        "any": function(x) {
          return object.clone(x);
        }
      });
      squeeze.toTex = void 0;
      return squeeze;
    }
    exports.name = "squeeze";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/matrix/index.js
var require_matrix4 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/matrix/index.js"(exports, module) {
    module.exports = [
      require_concat2(),
      require_cross2(),
      require_det2(),
      require_diag2(),
      require_dot2(),
      require_eye(),
      require_filter2(),
      require_flatten2(),
      require_forEach2(),
      require_inv2(),
      require_kron2(),
      require_map2(),
      require_ones2(),
      require_partitionSelect2(),
      require_range2(),
      require_reshape2(),
      require_resize2(),
      require_size2(),
      require_sort2(),
      require_squeeze2(),
      require_subset2(),
      require_trace2(),
      require_transpose2(),
      require_zeros2()
    ];
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/statistics/sum.js
var require_sum2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/statistics/sum.js"(exports) {
    "use strict";
    var deepForEach = require_deepForEach();
    function factory(type, config, load, typed) {
      var add = load(require_addScalar());
      var sum = typed("sum", {
        "Array | Matrix": function(args) {
          return _sum(args);
        },
        "Array | Matrix, number | BigNumber": function() {
          throw new Error("sum(A, dim) is not yet supported");
        },
        "...": function(args) {
          return _sum(args);
        }
      });
      sum.toTex = void 0;
      return sum;
      function _sum(array) {
        var sum2 = void 0;
        deepForEach(array, function(value) {
          sum2 = sum2 === void 0 ? value : add(sum2, value);
        });
        if (sum2 === void 0) {
          switch (config.number) {
            case "number":
              return 0;
            case "BigNumber":
              return new type.BigNumber(0);
            case "Fraction":
              return new type.Fraction(0);
            default:
              return 0;
          }
        }
        return sum2;
      }
    }
    exports.name = "sum";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/probability/kldivergence.js
var require_kldivergence2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/probability/kldivergence.js"(exports) {
    "use strict";
    function factory(type, config, load, typed) {
      var matrix = load(require_matrix());
      var divide = load(require_divide2());
      var sum = load(require_sum2());
      var multiply = load(require_multiply());
      var dotDivide = load(require_dotDivide2());
      var log = load(require_log2());
      var isNumeric = load(require_isNumeric());
      var kldivergence = typed("kldivergence", {
        "Array, Array": function(q, p) {
          return _kldiv(matrix(q), matrix(p));
        },
        "Matrix, Array": function(q, p) {
          return _kldiv(q, matrix(p));
        },
        "Array, Matrix": function(q, p) {
          return _kldiv(matrix(q), p);
        },
        "Matrix, Matrix": function(q, p) {
          return _kldiv(q, p);
        }
      });
      function _kldiv(q, p) {
        var plength = p.size().length;
        var qlength = q.size().length;
        if (plength > 1) {
          throw new Error("first object must be one dimensional");
        }
        if (qlength > 1) {
          throw new Error("second object must be one dimensional");
        }
        if (plength !== qlength) {
          throw new Error("Length of two vectors must be equal");
        }
        var sumq = sum(q);
        if (sumq === 0) {
          throw new Error("Sum of elements in first object must be non zero");
        }
        var sump = sum(p);
        if (sump === 0) {
          throw new Error("Sum of elements in second object must be non zero");
        }
        var qnorm = divide(q, sum(q));
        var pnorm = divide(p, sum(p));
        var result = sum(multiply(qnorm, log(dotDivide(qnorm, pnorm))));
        if (isNumeric(result)) {
          return result;
        } else {
          return Number.NaN;
        }
      }
      return kldivergence;
    }
    exports.name = "kldivergence";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/probability/multinomial.js
var require_multinomial2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/probability/multinomial.js"(exports) {
    "use strict";
    var deepForEach = require_deepForEach();
    function factory(type, config, load, typed) {
      var add = load(require_add());
      var multiply = load(require_multiply());
      var divide = load(require_divide2());
      var factorial = load(require_factorial2());
      var isInteger = load(require_isInteger2());
      var isPositive = load(require_isPositive2());
      return typed("multinomial", {
        "Array | Matrix": function(a) {
          var sum = 0;
          var denom = 1;
          deepForEach(a, function(ai) {
            if (!isInteger(ai) || !isPositive(ai)) {
              throw new TypeError("Positive integer value expected in function multinomial");
            }
            sum = add(sum, ai);
            denom = multiply(denom, factorial(ai));
          });
          return divide(factorial(sum), denom);
        }
      });
    }
    exports.name = "multinomial";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/probability/permutations.js
var require_permutations2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/probability/permutations.js"(exports) {
    "use strict";
    var isInteger = require_number().isInteger;
    function factory(type, config, load, typed) {
      var factorial = load(require_factorial2());
      var permutations = typed("permutations", {
        "number | BigNumber": factorial,
        "number, number": function(n, k) {
          var result, i;
          if (!isInteger(n) || n < 0) {
            throw new TypeError("Positive integer value expected in function permutations");
          }
          if (!isInteger(k) || k < 0) {
            throw new TypeError("Positive integer value expected in function permutations");
          }
          if (k > n) {
            throw new TypeError("second argument k must be less than or equal to first argument n");
          }
          result = 1;
          for (i = n - k + 1; i <= n; i++) {
            result = result * i;
          }
          return result;
        },
        "BigNumber, BigNumber": function(n, k) {
          var result, i;
          if (!isPositiveInteger(n) || !isPositiveInteger(k)) {
            throw new TypeError("Positive integer value expected in function permutations");
          }
          if (k.gt(n)) {
            throw new TypeError("second argument k must be less than or equal to first argument n");
          }
          result = new type.BigNumber(1);
          for (i = n.minus(k).plus(1); i.lte(n); i = i.plus(1)) {
            result = result.times(i);
          }
          return result;
        }
        // TODO: implement support for collection in permutations
      });
      permutations.toTex = void 0;
      return permutations;
    }
    function isPositiveInteger(n) {
      return n.isInteger() && n.gte(0);
    }
    exports.name = "permutations";
    exports.factory = factory;
  }
});

// node_modules/seed-random/index.js
var require_seed_random = __commonJS({
  "node_modules/seed-random/index.js"(exports, module) {
    "use strict";
    var width = 256;
    var chunks = 6;
    var digits = 52;
    var pool = [];
    var GLOBAL = typeof global === "undefined" ? window : global;
    var startdenom = Math.pow(width, chunks);
    var significance = Math.pow(2, digits);
    var overflow = significance * 2;
    var mask = width - 1;
    var oldRandom = Math.random;
    module.exports = function(seed, options) {
      if (options && options.global === true) {
        options.global = false;
        Math.random = module.exports(seed, options);
        options.global = true;
        return Math.random;
      }
      var use_entropy = options && options.entropy || false;
      var key = [];
      var shortseed = mixkey(flatten(
        use_entropy ? [seed, tostring(pool)] : 0 in arguments ? seed : autoseed(),
        3
      ), key);
      var arc4 = new ARC4(key);
      mixkey(tostring(arc4.S), pool);
      return function() {
        var n = arc4.g(chunks), d = startdenom, x = 0;
        while (n < significance) {
          n = (n + x) * width;
          d *= width;
          x = arc4.g(1);
        }
        while (n >= overflow) {
          n /= 2;
          d /= 2;
          x >>>= 1;
        }
        return (n + x) / d;
      };
    };
    module.exports.resetGlobal = function() {
      Math.random = oldRandom;
    };
    function ARC4(key) {
      var t, keylen = key.length, me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];
      if (!keylen) {
        key = [keylen++];
      }
      while (i < width) {
        s[i] = i++;
      }
      for (i = 0; i < width; i++) {
        s[i] = s[j = mask & j + key[i % keylen] + (t = s[i])];
        s[j] = t;
      }
      (me.g = function(count) {
        var t2, r = 0, i2 = me.i, j2 = me.j, s2 = me.S;
        while (count--) {
          t2 = s2[i2 = mask & i2 + 1];
          r = r * width + s2[mask & (s2[i2] = s2[j2 = mask & j2 + t2]) + (s2[j2] = t2)];
        }
        me.i = i2;
        me.j = j2;
        return r;
      })(width);
    }
    function flatten(obj, depth) {
      var result = [], typ = (typeof obj)[0], prop;
      if (depth && typ == "o") {
        for (prop in obj) {
          try {
            result.push(flatten(obj[prop], depth - 1));
          } catch (e) {
          }
        }
      }
      return result.length ? result : typ == "s" ? obj : obj + "\0";
    }
    function mixkey(seed, key) {
      var stringseed = seed + "", smear, j = 0;
      while (j < stringseed.length) {
        key[mask & j] = mask & (smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++);
      }
      return tostring(key);
    }
    function autoseed(seed) {
      try {
        GLOBAL.crypto.getRandomValues(seed = new Uint8Array(width));
        return tostring(seed);
      } catch (e) {
        return [
          +/* @__PURE__ */ new Date(),
          GLOBAL,
          GLOBAL.navigator && GLOBAL.navigator.plugins,
          GLOBAL.screen,
          tostring(pool)
        ];
      }
    }
    function tostring(a) {
      return String.fromCharCode.apply(0, a);
    }
    mixkey(Math.random(), pool);
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/probability/seededRNG.js
var require_seededRNG = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/probability/seededRNG.js"(exports) {
    "use strict";
    var seedrandom = require_seed_random();
    function factory(type, config, load, typed, math) {
      var generator = config.randomSeed === null ? seedrandom() : seedrandom(config.randomSeed.toString());
      function rng() {
        return generator();
      }
      math.on("config", function(curr, prev, changes) {
        if (changes.randomSeed !== void 0) {
          generator = curr.randomSeed === null ? seedrandom() : seedrandom(curr.randomSeed.toString());
        }
      });
      return rng;
    }
    exports.factory = factory;
    exports.math = true;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/probability/distribution.js
var require_distribution = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/probability/distribution.js"(exports) {
    "use strict";
    var ArgumentsError = require_ArgumentsError();
    var isCollection = require_isCollection();
    var isNumber = require_number().isNumber;
    function factory(type, config, load, typed, math) {
      var matrix = load(require_matrix());
      var array = require_array();
      var rng = load(require_seededRNG());
      function distribution(name) {
        if (!distributions.hasOwnProperty(name))
          throw new Error("Unknown distribution " + name);
        var args = Array.prototype.slice.call(arguments, 1), distribution2 = distributions[name].apply(this, args);
        return function(distribution3) {
          var randFunctions = {
            random: function(arg1, arg2, arg3) {
              var size, min, max;
              if (arguments.length > 3) {
                throw new ArgumentsError("random", arguments.length, 0, 3);
              } else if (arguments.length === 1) {
                if (isCollection(arg1)) {
                  size = arg1;
                } else {
                  max = arg1;
                }
              } else if (arguments.length === 2) {
                if (isCollection(arg1)) {
                  size = arg1;
                  max = arg2;
                } else {
                  min = arg1;
                  max = arg2;
                }
              } else {
                size = arg1;
                min = arg2;
                max = arg3;
              }
              if (min !== void 0 && !isNumber(min) || max !== void 0 && !isNumber(max)) {
                throw new TypeError("Invalid argument in function random");
              }
              if (max === void 0) max = 1;
              if (min === void 0) min = 0;
              if (size !== void 0) {
                var res = _randomDataForMatrix(size.valueOf(), min, max, _random);
                return size && size.isMatrix === true ? matrix(res) : res;
              }
              return _random(min, max);
            },
            randomInt: typed({
              "number | Array": function(arg) {
                var min = 0;
                if (isCollection(arg)) {
                  var size = arg;
                  var max = 1;
                  var res = _randomDataForMatrix(size.valueOf(), min, max, _randomInt);
                  return size && size.isMatrix === true ? matrix(res) : res;
                } else {
                  var max = arg;
                  return _randomInt(min, max);
                }
              },
              "number | Array, number": function(arg1, arg2) {
                if (isCollection(arg1)) {
                  var size = arg1;
                  var max = arg2;
                  var min = 0;
                  var res = _randomDataForMatrix(size.valueOf(), min, max, _randomInt);
                  return size && size.isMatrix === true ? matrix(res) : res;
                } else {
                  var min = arg1;
                  var max = arg2;
                  return _randomInt(min, max);
                }
              },
              "Array, number, number": function(size, min, max) {
                var res = _randomDataForMatrix(size.valueOf(), min, max, _randomInt);
                return size && size.isMatrix === true ? matrix(res) : res;
              }
            }),
            pickRandom: typed({
              "Array": function(possibles) {
                return _pickRandom(possibles);
              },
              "Array, number | Array": function(possibles, arg2) {
                var number, weights;
                if (Array.isArray(arg2)) {
                  weights = arg2;
                } else if (isNumber(arg2)) {
                  number = arg2;
                } else {
                  throw new TypeError("Invalid argument in function pickRandom");
                }
                return _pickRandom(possibles, number, weights);
              },
              "Array, number | Array, Array | number": function(possibles, arg2, arg3) {
                var number, weights;
                if (Array.isArray(arg2)) {
                  weights = arg2;
                  number = arg3;
                } else {
                  weights = arg3;
                  number = arg2;
                }
                if (!Array.isArray(weights) || !isNumber(number)) {
                  throw new TypeError("Invalid argument in function pickRandom");
                }
                return _pickRandom(possibles, number, weights);
              }
            })
          };
          var _pickRandom = function(possibles, number, weights) {
            var single = typeof number === "undefined";
            if (single) {
              number = 1;
            }
            if (possibles && possibles.isMatrix === true) {
              possibles = possibles.valueOf();
            } else if (!Array.isArray(possibles)) {
              throw new TypeError("Unsupported type of value in function pickRandom");
            }
            if (array.size(possibles).length > 1) {
              throw new Error("Only one dimensional vectors supported");
            }
            if (typeof weights !== "undefined") {
              if (weights.length != possibles.length) {
                throw new Error("Weights must have the same length as possibles");
              }
              var totalWeights = 0;
              for (var i = 0, len = weights.length; i < len; i++) {
                if (!isNumber(weights[i]) || weights[i] < 0) {
                  throw new Error("Weights must be an array of positive numbers");
                }
                totalWeights += weights[i];
              }
            }
            var length = possibles.length;
            if (length == 0) {
              return [];
            } else if (number >= length) {
              return possibles;
            }
            var result = [];
            var pick;
            while (result.length < number) {
              if (typeof weights === "undefined") {
                pick = possibles[Math.floor(rng() * length)];
              } else {
                var randKey = rng() * totalWeights;
                for (var i = 0, len = possibles.length; i < len; i++) {
                  randKey -= weights[i];
                  if (randKey < 0) {
                    pick = possibles[i];
                    break;
                  }
                }
              }
              if (result.indexOf(pick) == -1) {
                result.push(pick);
              }
            }
            return single ? result[0] : result;
          };
          var _random = function(min, max) {
            return min + distribution3() * (max - min);
          };
          var _randomInt = function(min, max) {
            return Math.floor(min + distribution3() * (max - min));
          };
          var _randomDataForMatrix = function(size, min, max, randFunc) {
            var data = [], length, i;
            size = size.slice(0);
            if (size.length > 1) {
              for (var i = 0, length = size.shift(); i < length; i++) {
                data.push(_randomDataForMatrix(size, min, max, randFunc));
              }
            } else {
              for (var i = 0, length = size.shift(); i < length; i++) {
                data.push(randFunc(min, max));
              }
            }
            return data;
          };
          return randFunctions;
        }(distribution2);
      }
      var distributions = {
        uniform: function() {
          return rng;
        },
        // Implementation of normal distribution using Box-Muller transform
        // ref : http://en.wikipedia.org/wiki/Box%E2%80%93Muller_transform
        // We take : mean = 0.5, standard deviation = 1/6
        // so that 99.7% values are in [0, 1].
        normal: function() {
          return function() {
            var u1, u2, picked = -1;
            while (picked < 0 || picked > 1) {
              u1 = rng();
              u2 = rng();
              picked = 1 / 6 * Math.pow(-2 * Math.log(u1), 0.5) * Math.cos(2 * Math.PI * u2) + 0.5;
            }
            return picked;
          };
        }
      };
      distribution.toTex = void 0;
      return distribution;
    }
    exports.name = "distribution";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/probability/pickRandom.js
var require_pickRandom2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/probability/pickRandom.js"(exports) {
    "use strict";
    function factory(type, config, load, typed) {
      var distribution = load(require_distribution());
      var pickRandom = distribution("uniform").pickRandom;
      pickRandom.toTex = void 0;
      return pickRandom;
    }
    exports.name = "pickRandom";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/probability/random.js
var require_random2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/probability/random.js"(exports) {
    "use strict";
    function factory(type, config, load, typed) {
      var distribution = load(require_distribution());
      var random = distribution("uniform").random;
      random.toTex = void 0;
      return random;
    }
    exports.name = "random";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/probability/randomInt.js
var require_randomInt2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/probability/randomInt.js"(exports) {
    "use strict";
    function factory(type, config, load, typed) {
      var distribution = load(require_distribution());
      var randomInt = distribution("uniform").randomInt;
      randomInt.toTex = void 0;
      return randomInt;
    }
    exports.name = "randomInt";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/probability/index.js
var require_probability = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/probability/index.js"(exports, module) {
    module.exports = [
      //require('./distribution'), // TODO: rethink math.distribution
      require_combinations2(),
      require_factorial2(),
      require_gamma2(),
      require_kldivergence2(),
      require_multinomial2(),
      require_permutations2(),
      require_pickRandom2(),
      require_random2(),
      require_randomInt2()
    ];
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/relational/deepEqual.js
var require_deepEqual2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/relational/deepEqual.js"(exports) {
    "use strict";
    function factory(type, config, load, typed) {
      var equal = load(require_equal());
      var deepEqual = typed("deepEqual", {
        "any, any": function(x, y) {
          return _deepEqual(x.valueOf(), y.valueOf());
        }
      });
      deepEqual.toTex = void 0;
      return deepEqual;
      function _deepEqual(x, y) {
        if (Array.isArray(x)) {
          if (Array.isArray(y)) {
            var len = x.length;
            if (len !== y.length) {
              return false;
            }
            for (var i = 0; i < len; i++) {
              if (!_deepEqual(x[i], y[i])) {
                return false;
              }
            }
            return true;
          } else {
            return false;
          }
        } else {
          if (Array.isArray(y)) {
            return false;
          } else {
            return equal(x, y);
          }
        }
      }
    }
    exports.name = "deepEqual";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/relational/smallerEq.js
var require_smallerEq2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/relational/smallerEq.js"(exports) {
    "use strict";
    var nearlyEqual = require_number().nearlyEqual;
    var bigNearlyEqual = require_nearlyEqual();
    function factory(type, config, load, typed) {
      var matrix = load(require_matrix());
      var algorithm03 = load(require_algorithm03());
      var algorithm07 = load(require_algorithm07());
      var algorithm12 = load(require_algorithm12());
      var algorithm13 = load(require_algorithm13());
      var algorithm14 = load(require_algorithm14());
      var latex = require_latex();
      var smallerEq = typed("smallerEq", {
        "boolean, boolean": function(x, y) {
          return x <= y;
        },
        "number, number": function(x, y) {
          return x <= y || nearlyEqual(x, y, config.epsilon);
        },
        "BigNumber, BigNumber": function(x, y) {
          return x.lte(y) || bigNearlyEqual(x, y, config.epsilon);
        },
        "Fraction, Fraction": function(x, y) {
          return x.compare(y) !== 1;
        },
        "Complex, Complex": function() {
          throw new TypeError("No ordering relation is defined for complex numbers");
        },
        "Unit, Unit": function(x, y) {
          if (!x.equalBase(y)) {
            throw new Error("Cannot compare units with different base");
          }
          return smallerEq(x.value, y.value);
        },
        "string, string": function(x, y) {
          return x <= y;
        },
        "Matrix, Matrix": function(x, y) {
          var c;
          switch (x.storage()) {
            case "sparse":
              switch (y.storage()) {
                case "sparse":
                  c = algorithm07(x, y, smallerEq);
                  break;
                default:
                  c = algorithm03(y, x, smallerEq, true);
                  break;
              }
              break;
            default:
              switch (y.storage()) {
                case "sparse":
                  c = algorithm03(x, y, smallerEq, false);
                  break;
                default:
                  c = algorithm13(x, y, smallerEq);
                  break;
              }
              break;
          }
          return c;
        },
        "Array, Array": function(x, y) {
          return smallerEq(matrix(x), matrix(y)).valueOf();
        },
        "Array, Matrix": function(x, y) {
          return smallerEq(matrix(x), y);
        },
        "Matrix, Array": function(x, y) {
          return smallerEq(x, matrix(y));
        },
        "Matrix, any": function(x, y) {
          var c;
          switch (x.storage()) {
            case "sparse":
              c = algorithm12(x, y, smallerEq, false);
              break;
            default:
              c = algorithm14(x, y, smallerEq, false);
              break;
          }
          return c;
        },
        "any, Matrix": function(x, y) {
          var c;
          switch (y.storage()) {
            case "sparse":
              c = algorithm12(y, x, smallerEq, true);
              break;
            default:
              c = algorithm14(y, x, smallerEq, true);
              break;
          }
          return c;
        },
        "Array, any": function(x, y) {
          return algorithm14(matrix(x), y, smallerEq, false).valueOf();
        },
        "any, Array": function(x, y) {
          return algorithm14(matrix(y), x, smallerEq, true).valueOf();
        }
      });
      smallerEq.toTex = {
        2: "\\left(${args[0]}" + latex.operators["smallerEq"] + "${args[1]}\\right)"
      };
      return smallerEq;
    }
    exports.name = "smallerEq";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/relational/unequal.js
var require_unequal2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/relational/unequal.js"(exports) {
    "use strict";
    var nearlyEqual = require_number().nearlyEqual;
    var bigNearlyEqual = require_nearlyEqual();
    function factory(type, config, load, typed) {
      var matrix = load(require_matrix());
      var algorithm03 = load(require_algorithm03());
      var algorithm07 = load(require_algorithm07());
      var algorithm12 = load(require_algorithm12());
      var algorithm13 = load(require_algorithm13());
      var algorithm14 = load(require_algorithm14());
      var latex = require_latex();
      var unequal = typed("unequal", {
        "any, any": function(x, y) {
          if (x === null) {
            return y !== null;
          }
          if (y === null) {
            return x !== null;
          }
          if (x === void 0) {
            return y !== void 0;
          }
          if (y === void 0) {
            return x !== void 0;
          }
          return _unequal(x, y);
        },
        "Matrix, Matrix": function(x, y) {
          var c;
          switch (x.storage()) {
            case "sparse":
              switch (y.storage()) {
                case "sparse":
                  c = algorithm07(x, y, _unequal);
                  break;
                default:
                  c = algorithm03(y, x, _unequal, true);
                  break;
              }
              break;
            default:
              switch (y.storage()) {
                case "sparse":
                  c = algorithm03(x, y, _unequal, false);
                  break;
                default:
                  c = algorithm13(x, y, _unequal);
                  break;
              }
              break;
          }
          return c;
        },
        "Array, Array": function(x, y) {
          return unequal(matrix(x), matrix(y)).valueOf();
        },
        "Array, Matrix": function(x, y) {
          return unequal(matrix(x), y);
        },
        "Matrix, Array": function(x, y) {
          return unequal(x, matrix(y));
        },
        "Matrix, any": function(x, y) {
          var c;
          switch (x.storage()) {
            case "sparse":
              c = algorithm12(x, y, _unequal, false);
              break;
            default:
              c = algorithm14(x, y, _unequal, false);
              break;
          }
          return c;
        },
        "any, Matrix": function(x, y) {
          var c;
          switch (y.storage()) {
            case "sparse":
              c = algorithm12(y, x, _unequal, true);
              break;
            default:
              c = algorithm14(y, x, _unequal, true);
              break;
          }
          return c;
        },
        "Array, any": function(x, y) {
          return algorithm14(matrix(x), y, _unequal, false).valueOf();
        },
        "any, Array": function(x, y) {
          return algorithm14(matrix(y), x, _unequal, true).valueOf();
        }
      });
      var _unequal = typed("_unequal", {
        "boolean, boolean": function(x, y) {
          return x !== y;
        },
        "number, number": function(x, y) {
          return !nearlyEqual(x, y, config.epsilon);
        },
        "BigNumber, BigNumber": function(x, y) {
          return !bigNearlyEqual(x, y, config.epsilon);
        },
        "Fraction, Fraction": function(x, y) {
          return !x.equals(y);
        },
        "Complex, Complex": function(x, y) {
          return !x.equals(y);
        },
        "Unit, Unit": function(x, y) {
          if (!x.equalBase(y)) {
            throw new Error("Cannot compare units with different base");
          }
          return unequal(x.value, y.value);
        },
        "string, string": function(x, y) {
          return x !== y;
        }
      });
      unequal.toTex = {
        2: "\\left(${args[0]}" + latex.operators["unequal"] + "${args[1]}\\right)"
      };
      return unequal;
    }
    exports.name = "unequal";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/relational/index.js
var require_relational = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/relational/index.js"(exports, module) {
    module.exports = [
      require_compare2(),
      require_deepEqual2(),
      require_equal(),
      require_larger(),
      require_largerEq2(),
      require_smaller(),
      require_smallerEq2(),
      require_unequal2()
    ];
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/special/erf.js
var require_erf2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/special/erf.js"(exports) {
    "use strict";
    var deepMap = require_deepMap();
    var sign = require_number().sign;
    function factory(type, config, load, typed) {
      var erf = typed("erf", {
        "number": function(x) {
          var y = Math.abs(x);
          if (y >= MAX_NUM) {
            return sign(x);
          }
          if (y <= THRESH) {
            return sign(x) * erf1(y);
          }
          if (y <= 4) {
            return sign(x) * (1 - erfc2(y));
          }
          return sign(x) * (1 - erfc3(y));
        },
        // TODO: Not sure if there's a way to guarantee some degree of accuracy here.
        //  Perhaps it would be best to set the precision of the number to that which
        //  is guaranteed by erf()
        "BigNumber": function(n) {
          return new type.BigNumber(erf(n.toNumber()));
        },
        "Array | Matrix": function(n) {
          return deepMap(n, erf);
        }
        // TODO: For complex numbers, use the approximation for the Faddeeva function
        //  from "More Efficient Computation of the Complex Error Function" (AMS)
      });
      function erf1(y) {
        var ysq = y * y;
        var xnum = P[0][4] * ysq;
        var xden = ysq;
        var i;
        for (i = 0; i < 3; i += 1) {
          xnum = (xnum + P[0][i]) * ysq;
          xden = (xden + Q[0][i]) * ysq;
        }
        return y * (xnum + P[0][3]) / (xden + Q[0][3]);
      }
      function erfc2(y) {
        var xnum = P[1][8] * y;
        var xden = y;
        var i;
        for (i = 0; i < 7; i += 1) {
          xnum = (xnum + P[1][i]) * y;
          xden = (xden + Q[1][i]) * y;
        }
        var result = (xnum + P[1][7]) / (xden + Q[1][7]);
        var ysq = parseInt(y * 16) / 16;
        var del = (y - ysq) * (y + ysq);
        return Math.exp(-ysq * ysq) * Math.exp(-del) * result;
      }
      function erfc3(y) {
        var ysq = 1 / (y * y);
        var xnum = P[2][5] * ysq;
        var xden = ysq;
        var i;
        for (i = 0; i < 4; i += 1) {
          xnum = (xnum + P[2][i]) * ysq;
          xden = (xden + Q[2][i]) * ysq;
        }
        var result = ysq * (xnum + P[2][4]) / (xden + Q[2][4]);
        result = (SQRPI - result) / y;
        ysq = parseInt(y * 16) / 16;
        var del = (y - ysq) * (y + ysq);
        return Math.exp(-ysq * ysq) * Math.exp(-del) * result;
      }
      erf.toTex = { 1: "erf\\left(${args[0]}\\right)" };
      return erf;
    }
    var THRESH = 0.46875;
    var SQRPI = 0.5641895835477563;
    var P = [[
      3.1611237438705655,
      113.86415415105016,
      377.485237685302,
      3209.3775891384694,
      0.18577770618460315
    ], [
      0.5641884969886701,
      8.883149794388377,
      66.11919063714163,
      298.6351381974001,
      881.952221241769,
      1712.0476126340707,
      2051.0783778260716,
      1230.3393547979972,
      21531153547440383e-24
    ], [
      0.30532663496123236,
      0.36034489994980445,
      0.12578172611122926,
      0.016083785148742275,
      6587491615298378e-19,
      0.016315387137302097
    ]];
    var Q = [[
      23.601290952344122,
      244.02463793444417,
      1282.6165260773723,
      2844.236833439171
    ], [
      15.744926110709835,
      117.6939508913125,
      537.1811018620099,
      1621.3895745666903,
      3290.7992357334597,
      4362.619090143247,
      3439.3676741437216,
      1230.3393548037495
    ], [
      2.568520192289822,
      1.8729528499234604,
      0.5279051029514285,
      0.06051834131244132,
      0.0023352049762686918
    ]];
    var MAX_NUM = Math.pow(2, 53);
    exports.name = "erf";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/special/index.js
var require_special = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/special/index.js"(exports, module) {
    module.exports = [
      require_erf2()
    ];
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/statistics/median.js
var require_median2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/statistics/median.js"(exports) {
    "use strict";
    var flatten = require_array().flatten;
    var reduce = require_reduce();
    var containsCollections = require_containsCollections();
    function factory(type, config, load, typed) {
      var add = load(require_addScalar());
      var divide = load(require_divideScalar());
      var compare = load(require_compare2());
      var partitionSelect = load(require_partitionSelect2());
      var median = typed("median", {
        // median([a, b, c, d, ...])
        "Array | Matrix": _median,
        // median([a, b, c, d, ...], dim)
        "Array | Matrix, number | BigNumber": function(array, dim) {
          throw new Error("median(A, dim) is not yet supported");
        },
        // median(a, b, c, d, ...)
        "...": function(args) {
          if (containsCollections(args)) {
            throw new TypeError("Scalar values expected in function median");
          }
          return _median(args);
        }
      });
      function _median(array) {
        array = flatten(array.valueOf());
        var num = array.length;
        if (num == 0) {
          throw new Error("Cannot calculate median of an empty array");
        }
        if (num % 2 == 0) {
          var mid = num / 2 - 1;
          var right = partitionSelect(array, mid + 1);
          var left = array[mid];
          for (var i = 0; i < mid; ++i) {
            if (compare(array[i], left) > 0) {
              left = array[i];
            }
          }
          return middle2(left, right);
        } else {
          var m = partitionSelect(array, (num - 1) / 2);
          return middle(m);
        }
      }
      var middle = typed({
        "number | BigNumber | Unit": function(value) {
          return value;
        }
      });
      var middle2 = typed({
        "number | BigNumber | Unit, number | BigNumber | Unit": function(left, right) {
          return divide(add(left, right), 2);
        }
      });
      median.toTex = void 0;
      return median;
    }
    exports.name = "median";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/statistics/mad.js
var require_mad2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/statistics/mad.js"(exports) {
    "use strict";
    var flatten = require_array().flatten;
    function factory(type, config, load, typed) {
      var abs = load(require_abs());
      var map = load(require_map2());
      var median = load(require_median2());
      var subtract = load(require_subtract());
      var mad = typed("mad", {
        // mad([a, b, c, d, ...])
        "Array | Matrix": _mad,
        // mad(a, b, c, d, ...)
        "...": function(args) {
          return _mad(args);
        }
      });
      mad.toTex = void 0;
      return mad;
      function _mad(array) {
        array = flatten(array.valueOf());
        if (array.length === 0) {
          throw new Error("Cannot calculate median absolute deviation of an empty array");
        }
        var med = median(array);
        return median(map(array, function(value) {
          return abs(subtract(value, med));
        }));
      }
    }
    exports.name = "mad";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/statistics/mode.js
var require_mode2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/statistics/mode.js"(exports) {
    "use strict";
    var flatten = require_array().flatten;
    function factory(type, config, load, typed) {
      var mode = typed("mode", {
        "Array | Matrix": _mode,
        "...": function(args) {
          return _mode(args);
        }
      });
      return mode;
      function _mode(values) {
        values = flatten(values.valueOf());
        var num = values.length;
        if (num == 0) {
          throw new Error("Cannot calculate mode of an empty array");
        }
        var count = {}, mode2 = [], max = 0;
        for (var i in values) {
          if (!(values[i] in count)) {
            count[values[i]] = 0;
          }
          count[values[i]]++;
          if (count[values[i]] == max) {
            mode2.push(values[i]);
          } else if (count[values[i]] > max) {
            max = count[values[i]];
            mode2 = [values[i]];
          }
        }
        return mode2;
      }
      ;
    }
    exports.name = "mode";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/statistics/prod.js
var require_prod2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/statistics/prod.js"(exports) {
    "use strict";
    var deepForEach = require_deepForEach();
    function factory(type, config, load, typed) {
      var multiply = load(require_multiplyScalar());
      var prod = typed("prod", {
        // prod([a, b, c, d, ...])
        "Array | Matrix": _prod,
        // prod([a, b, c, d, ...], dim)
        "Array | Matrix, number | BigNumber": function(array, dim) {
          throw new Error("prod(A, dim) is not yet supported");
        },
        // prod(a, b, c, d, ...)
        "...": function(args) {
          return _prod(args);
        }
      });
      prod.toTex = void 0;
      return prod;
      function _prod(array) {
        var prod2 = void 0;
        deepForEach(array, function(value) {
          prod2 = prod2 === void 0 ? value : multiply(prod2, value);
        });
        if (prod2 === void 0) {
          throw new Error("Cannot calculate prod of an empty array");
        }
        return prod2;
      }
    }
    exports.name = "prod";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/statistics/quantileSeq.js
var require_quantileSeq2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/statistics/quantileSeq.js"(exports) {
    "use strict";
    var isInteger = require_number().isInteger;
    var isNumber = require_number().isNumber;
    var flatten = require_array().flatten;
    var isCollection = require_isCollection();
    function factory(type, config, load, typed) {
      var add = load(require_add());
      var multiply = load(require_multiply());
      var partitionSelect = load(require_partitionSelect2());
      var compare = load(require_compare2());
      function quantileSeq(data, probOrN, sorted) {
        var probArr, dataArr, one;
        if (arguments.length < 2 || arguments.length > 3) {
          throw new SyntaxError("Function quantileSeq requires two or three parameters");
        }
        if (isCollection(data)) {
          sorted = sorted || false;
          if (typeof sorted === "boolean") {
            dataArr = data.valueOf();
            if (isNumber(probOrN)) {
              if (probOrN < 0) {
                throw new Error("N/prob must be non-negative");
              }
              if (probOrN <= 1) {
                return _quantileSeq(dataArr, probOrN, sorted);
              }
              if (probOrN > 1) {
                if (!isInteger(probOrN)) {
                  throw new Error("N must be a positive integer");
                }
                var nPlusOne = probOrN + 1;
                probArr = new Array(probOrN);
                for (var i = 0; i < probOrN; ) {
                  probArr[i] = _quantileSeq(dataArr, ++i / nPlusOne, sorted);
                }
                return probArr;
              }
            }
            if (probOrN && probOrN.isBigNumber) {
              if (probOrN.isNegative()) {
                throw new Error("N/prob must be non-negative");
              }
              one = new probOrN.constructor(1);
              if (probOrN.lte(one)) {
                return _quantileSeq(dataArr, probOrN, sorted);
              }
              if (probOrN.gt(one)) {
                if (!probOrN.isInteger()) {
                  throw new Error("N must be a positive integer");
                }
                var intN = probOrN.toNumber();
                if (intN > 4294967295) {
                  throw new Error("N must be less than or equal to 2^32-1, as that is the maximum length of an Array");
                }
                var nPlusOne = new type.BigNumber(intN + 1);
                probArr = new Array(intN);
                for (var i = 0; i < intN; ) {
                  probArr[i] = _quantileSeq(dataArr, new type.BigNumber(++i).div(nPlusOne), sorted);
                }
                return probArr;
              }
            }
            if (Array.isArray(probOrN)) {
              probArr = new Array(probOrN.length);
              for (var i = 0; i < probArr.length; ++i) {
                var currProb = probOrN[i];
                if (isNumber(currProb)) {
                  if (currProb < 0 || currProb > 1) {
                    throw new Error("Probability must be between 0 and 1, inclusive");
                  }
                } else if (currProb && currProb.isBigNumber) {
                  one = new currProb.constructor(1);
                  if (currProb.isNegative() || currProb.gt(one)) {
                    throw new Error("Probability must be between 0 and 1, inclusive");
                  }
                } else {
                  throw new TypeError("Unexpected type of argument in function quantileSeq");
                }
                probArr[i] = _quantileSeq(dataArr, currProb, sorted);
              }
              return probArr;
            }
            throw new TypeError("Unexpected type of argument in function quantileSeq");
          }
          throw new TypeError("Unexpected type of argument in function quantileSeq");
        }
        throw new TypeError("Unexpected type of argument in function quantileSeq");
      }
      function _quantileSeq(array, prob, sorted) {
        var flat = flatten(array);
        var len = flat.length;
        if (len === 0) {
          throw new Error("Cannot calculate quantile of an empty sequence");
        }
        if (isNumber(prob)) {
          var index = prob * (len - 1);
          var fracPart = index % 1;
          if (fracPart === 0) {
            var value = sorted ? flat[index] : partitionSelect(flat, index);
            validate(value);
            return value;
          }
          var integerPart = Math.floor(index);
          var left, right;
          if (sorted) {
            left = flat[integerPart];
            right = flat[integerPart + 1];
          } else {
            right = partitionSelect(flat, integerPart + 1);
            left = flat[integerPart];
            for (var i = 0; i < integerPart; ++i) {
              if (compare(flat[i], left) > 0) {
                left = flat[i];
              }
            }
          }
          validate(left);
          validate(right);
          return add(multiply(left, 1 - fracPart), multiply(right, fracPart));
        }
        var index = prob.times(len - 1);
        if (index.isInteger()) {
          index = index.toNumber();
          var value = sorted ? flat[index] : partitionSelect(flat, index);
          validate(value);
          return value;
        }
        var integerPart = index.floor();
        var fracPart = index.minus(integerPart);
        var integerPartNumber = integerPart.toNumber();
        var left, right;
        if (sorted) {
          left = flat[integerPartNumber];
          right = flat[integerPartNumber + 1];
        } else {
          right = partitionSelect(flat, integerPartNumber + 1);
          left = flat[integerPartNumber];
          for (var i = 0; i < integerPartNumber; ++i) {
            if (compare(flat[i], left) > 0) {
              left = flat[i];
            }
          }
        }
        validate(left);
        validate(right);
        var one = new fracPart.constructor(1);
        return add(multiply(left, one.minus(fracPart)), multiply(right, fracPart));
      }
      var validate = typed({
        "number | BigNumber | Unit": function(x) {
          return x;
        }
      });
      return quantileSeq;
    }
    exports.name = "quantileSeq";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/statistics/var.js
var require_var2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/statistics/var.js"(exports) {
    "use strict";
    var DEFAULT_NORMALIZATION = "unbiased";
    var deepForEach = require_deepForEach();
    function factory(type, config, load, typed) {
      var add = load(require_addScalar());
      var subtract = load(require_subtract());
      var multiply = load(require_multiplyScalar());
      var divide = load(require_divideScalar());
      var variance = typed("variance", {
        // var([a, b, c, d, ...])
        "Array | Matrix": function(array) {
          return _var(array, DEFAULT_NORMALIZATION);
        },
        // var([a, b, c, d, ...], normalization)
        "Array | Matrix, string": _var,
        // var(a, b, c, d, ...)
        "...": function(args) {
          return _var(args, DEFAULT_NORMALIZATION);
        }
      });
      variance.toTex = "\\mathrm{Var}\\left(${args}\\right)";
      return variance;
      function _var(array, normalization) {
        var sum = 0;
        var num = 0;
        if (array.length == 0) {
          throw new SyntaxError("Function var requires one or more parameters (0 provided)");
        }
        deepForEach(array, function(value) {
          sum = add(sum, value);
          num++;
        });
        if (num === 0) throw new Error("Cannot calculate var of an empty array");
        var mean = divide(sum, num);
        sum = 0;
        deepForEach(array, function(value) {
          var diff = subtract(value, mean);
          sum = add(sum, multiply(diff, diff));
        });
        switch (normalization) {
          case "uncorrected":
            return divide(sum, num);
          case "biased":
            return divide(sum, num + 1);
          case "unbiased":
            var zero = sum && sum.isBigNumber === true ? new type.BigNumber(0) : 0;
            return num == 1 ? zero : divide(sum, num - 1);
          default:
            throw new Error('Unknown normalization "' + normalization + '". Choose "unbiased" (default), "uncorrected", or "biased".');
        }
      }
    }
    exports.name = "var";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/statistics/std.js
var require_std2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/statistics/std.js"(exports) {
    "use strict";
    function factory(type, config, load, typed) {
      var sqrt = load(require_sqrt2());
      var variance = load(require_var2());
      var std = typed("std", {
        // std([a, b, c, d, ...])
        "Array | Matrix": _std,
        // std([a, b, c, d, ...], normalization)
        "Array | Matrix, string": _std,
        // std(a, b, c, d, ...)
        "...": function(args) {
          return _std(args);
        }
      });
      std.toTex = void 0;
      return std;
      function _std(array, normalization) {
        if (array.length == 0) {
          throw new SyntaxError("Function std requires one or more parameters (0 provided)");
        }
        return sqrt(variance.apply(null, arguments));
      }
    }
    exports.name = "std";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/statistics/index.js
var require_statistics = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/statistics/index.js"(exports, module) {
    module.exports = [
      require_mad2(),
      require_max2(),
      require_mean2(),
      require_median2(),
      require_min2(),
      require_mode2(),
      require_prod2(),
      require_quantileSeq2(),
      require_std2(),
      require_sum2(),
      require_var2()
    ];
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/string/print.js
var require_print = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/string/print.js"(exports) {
    "use strict";
    var isString = require_string().isString;
    var format = require_string().format;
    function factory(type, config, load, typed) {
      var print2 = typed("print", {
        "string, Object": _print,
        "string, Object, number | Object": _print
      });
      print2.toTex = void 0;
      return print2;
    }
    function _print(template, values, options) {
      return template.replace(
        /\$([\w\.]+)/g,
        function(original, key) {
          var keys = key.split(".");
          var value = values[keys.shift()];
          while (keys.length && value !== void 0) {
            var k = keys.shift();
            value = k ? value[k] : value + ".";
          }
          if (value !== void 0) {
            if (!isString(value)) {
              return format(value, options);
            } else {
              return value;
            }
          }
          return original;
        }
      );
    }
    exports.name = "print";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/string/index.js
var require_string4 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/string/index.js"(exports, module) {
    module.exports = [
      require_format(),
      require_print()
    ];
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/trigonometry/acos.js
var require_acos2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/trigonometry/acos.js"(exports) {
    "use strict";
    var deepMap = require_deepMap();
    function factory(type, config, load, typed) {
      var acos = typed("acos", {
        "number": function(x) {
          if (x >= -1 && x <= 1 || config.predictable) {
            return Math.acos(x);
          } else {
            return new type.Complex(x, 0).acos();
          }
        },
        "Complex": function(x) {
          return x.acos();
        },
        "BigNumber": function(x) {
          return x.acos();
        },
        "Array | Matrix": function(x) {
          return deepMap(x, acos);
        }
      });
      acos.toTex = { 1: "\\cos^{-1}\\left(${args[0]}\\right)" };
      return acos;
    }
    exports.name = "acos";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/trigonometry/acosh.js
var require_acosh2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/trigonometry/acosh.js"(exports) {
    "use strict";
    var deepMap = require_deepMap();
    function factory(type, config, load, typed) {
      var acosh = typed("acosh", {
        "number": function(x) {
          if (x >= 1 || config.predictable) {
            return _acosh(x);
          }
          if (x <= -1) {
            return new type.Complex(Math.log(Math.sqrt(x * x - 1) - x), Math.PI);
          }
          return new type.Complex(x, 0).acosh();
        },
        "Complex": function(x) {
          return x.acosh();
        },
        "BigNumber": function(x) {
          return x.acosh();
        },
        "Array | Matrix": function(x) {
          return deepMap(x, acosh);
        }
      });
      acosh.toTex = { 1: "\\cosh^{-1}\\left(${args[0]}\\right)" };
      return acosh;
    }
    var _acosh = Math.acosh || function(x) {
      return Math.log(Math.sqrt(x * x - 1) + x);
    };
    exports.name = "acosh";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/trigonometry/acot.js
var require_acot2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/trigonometry/acot.js"(exports) {
    "use strict";
    var deepMap = require_deepMap();
    function factory(type, config, load, typed) {
      var acot = typed("acot", {
        "number": function(x) {
          return Math.atan(1 / x);
        },
        "Complex": function(x) {
          return x.acot();
        },
        "BigNumber": function(x) {
          return new type.BigNumber(1).div(x).atan();
        },
        "Array | Matrix": function(x) {
          return deepMap(x, acot);
        }
      });
      acot.toTex = { 1: "\\cot^{-1}\\left(${args[0]}\\right)" };
      return acot;
    }
    exports.name = "acot";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/trigonometry/acoth.js
var require_acoth2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/trigonometry/acoth.js"(exports) {
    "use strict";
    var deepMap = require_deepMap();
    function factory(type, config, load, typed) {
      var acoth = typed("acoth", {
        "number": function(x) {
          if (x >= 1 || x <= -1 || config.predictable) {
            return isFinite(x) ? (Math.log((x + 1) / x) + Math.log(x / (x - 1))) / 2 : 0;
          }
          return new type.Complex(x, 0).acoth();
        },
        "Complex": function(x) {
          return x.acoth();
        },
        "BigNumber": function(x) {
          return new type.BigNumber(1).div(x).atanh();
        },
        "Array | Matrix": function(x) {
          return deepMap(x, acoth);
        }
      });
      acoth.toTex = { 1: "\\coth^{-1}\\left(${args[0]}\\right)" };
      return acoth;
    }
    exports.name = "acoth";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/trigonometry/acsc.js
var require_acsc2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/trigonometry/acsc.js"(exports) {
    "use strict";
    var deepMap = require_deepMap();
    function factory(type, config, load, typed) {
      var acsc = typed("acsc", {
        "number": function(x) {
          if (x <= -1 || x >= 1 || config.predictable) {
            return Math.asin(1 / x);
          }
          return new type.Complex(x, 0).acsc();
        },
        "Complex": function(x) {
          return x.acsc();
        },
        "BigNumber": function(x) {
          return new type.BigNumber(1).div(x).asin();
        },
        "Array | Matrix": function(x) {
          return deepMap(x, acsc);
        }
      });
      acsc.toTex = { 1: "\\csc^{-1}\\left(${args[0]}\\right)" };
      return acsc;
    }
    exports.name = "acsc";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/trigonometry/acsch.js
var require_acsch2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/trigonometry/acsch.js"(exports) {
    "use strict";
    var deepMap = require_deepMap();
    function factory(type, config, load, typed) {
      var acsch = typed("acsch", {
        "number": function(x) {
          x = 1 / x;
          return Math.log(x + Math.sqrt(x * x + 1));
        },
        "Complex": function(x) {
          return x.acsch();
        },
        "BigNumber": function(x) {
          return new type.BigNumber(1).div(x).asinh();
        },
        "Array | Matrix": function(x) {
          return deepMap(x, acsch);
        }
      });
      acsch.toTex = { 1: "\\mathrm{csch}^{-1}\\left(${args[0]}\\right)" };
      return acsch;
    }
    exports.name = "acsch";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/trigonometry/asec.js
var require_asec2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/trigonometry/asec.js"(exports) {
    "use strict";
    var deepMap = require_deepMap();
    function factory(type, config, load, typed) {
      var asec = typed("asec", {
        "number": function(x) {
          if (x <= -1 || x >= 1 || config.predictable) {
            return Math.acos(1 / x);
          }
          return new type.Complex(x, 0).asec();
        },
        "Complex": function(x) {
          return x.asec();
        },
        "BigNumber": function(x) {
          return new type.BigNumber(1).div(x).acos();
        },
        "Array | Matrix": function(x) {
          return deepMap(x, asec);
        }
      });
      asec.toTex = { 1: "\\sec^{-1}\\left(${args[0]}\\right)" };
      return asec;
    }
    exports.name = "asec";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/trigonometry/asech.js
var require_asech2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/trigonometry/asech.js"(exports) {
    "use strict";
    var deepMap = require_deepMap();
    function factory(type, config, load, typed) {
      var acosh = typed.find(load(require_acosh2()), ["Complex"]);
      var asech = typed("asech", {
        "number": function(x) {
          if (x <= 1 && x >= -1 || config.predictable) {
            x = 1 / x;
            var ret = Math.sqrt(x * x - 1);
            if (x > 0 || config.predictable) {
              return Math.log(ret + x);
            }
            return new type.Complex(Math.log(ret - x), Math.PI);
          }
          return new type.Complex(x, 0).asech();
        },
        "Complex": function(x) {
          return x.asech();
        },
        "BigNumber": function(x) {
          return new type.BigNumber(1).div(x).acosh();
        },
        "Array | Matrix": function(x) {
          return deepMap(x, asech);
        }
      });
      asech.toTex = { 1: "\\mathrm{sech}^{-1}\\left(${args[0]}\\right)" };
      return asech;
    }
    exports.name = "asech";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/trigonometry/asin.js
var require_asin2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/trigonometry/asin.js"(exports) {
    "use strict";
    var deepMap = require_deepMap();
    function factory(type, config, load, typed) {
      var asin = typed("asin", {
        "number": function(x) {
          if (x >= -1 && x <= 1 || config.predictable) {
            return Math.asin(x);
          } else {
            return new type.Complex(x, 0).asin();
          }
        },
        "Complex": function(x) {
          return x.asin();
        },
        "BigNumber": function(x) {
          return x.asin();
        },
        "Array | Matrix": function(x) {
          return deepMap(x, asin, true);
        }
      });
      asin.toTex = { 1: "\\sin^{-1}\\left(${args[0]}\\right)" };
      return asin;
    }
    exports.name = "asin";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/trigonometry/asinh.js
var require_asinh2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/trigonometry/asinh.js"(exports) {
    "use strict";
    var deepMap = require_deepMap();
    function factory(type, config, load, typed) {
      var asinh = typed("asinh", {
        "number": Math.asinh || function(x) {
          return Math.log(Math.sqrt(x * x + 1) + x);
        },
        "Complex": function(x) {
          return x.asinh();
        },
        "BigNumber": function(x) {
          return x.asinh();
        },
        "Array | Matrix": function(x) {
          return deepMap(x, asinh, true);
        }
      });
      asinh.toTex = { 1: "\\sinh^{-1}\\left(${args[0]}\\right)" };
      return asinh;
    }
    exports.name = "asinh";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/trigonometry/atan.js
var require_atan3 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/trigonometry/atan.js"(exports) {
    "use strict";
    var deepMap = require_deepMap();
    function factory(type, config, load, typed) {
      var atan = typed("atan", {
        "number": function(x) {
          return Math.atan(x);
        },
        "Complex": function(x) {
          return x.atan();
        },
        "BigNumber": function(x) {
          return x.atan();
        },
        "Array | Matrix": function(x) {
          return deepMap(x, atan, true);
        }
      });
      atan.toTex = { 1: "\\tan^{-1}\\left(${args[0]}\\right)" };
      return atan;
    }
    exports.name = "atan";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/trigonometry/atan2.js
var require_atan22 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/trigonometry/atan2.js"(exports) {
    "use strict";
    function factory(type, config, load, typed) {
      var matrix = load(require_matrix());
      var algorithm02 = load(require_algorithm02());
      var algorithm03 = load(require_algorithm03());
      var algorithm09 = load(require_algorithm09());
      var algorithm11 = load(require_algorithm11());
      var algorithm12 = load(require_algorithm12());
      var algorithm13 = load(require_algorithm13());
      var algorithm14 = load(require_algorithm14());
      var atan2 = typed("atan2", {
        "number, number": Math.atan2,
        // Complex numbers doesn't seem to have a reasonable implementation of
        // atan2(). Even Matlab removed the support, after they only calculated
        // the atan only on base of the real part of the numbers and ignored the imaginary.
        "BigNumber, BigNumber": function(y, x) {
          return type.BigNumber.atan2(y, x);
        },
        "Matrix, Matrix": function(x, y) {
          var c;
          switch (x.storage()) {
            case "sparse":
              switch (y.storage()) {
                case "sparse":
                  c = algorithm09(x, y, atan2, false);
                  break;
                default:
                  c = algorithm02(y, x, atan2, true);
                  break;
              }
              break;
            default:
              switch (y.storage()) {
                case "sparse":
                  c = algorithm03(x, y, atan2, false);
                  break;
                default:
                  c = algorithm13(x, y, atan2);
                  break;
              }
              break;
          }
          return c;
        },
        "Array, Array": function(x, y) {
          return atan2(matrix(x), matrix(y)).valueOf();
        },
        "Array, Matrix": function(x, y) {
          return atan2(matrix(x), y);
        },
        "Matrix, Array": function(x, y) {
          return atan2(x, matrix(y));
        },
        "Matrix, number | BigNumber": function(x, y) {
          var c;
          switch (x.storage()) {
            case "sparse":
              c = algorithm11(x, y, atan2, false);
              break;
            default:
              c = algorithm14(x, y, atan2, false);
              break;
          }
          return c;
        },
        "number | BigNumber, Matrix": function(x, y) {
          var c;
          switch (y.storage()) {
            case "sparse":
              c = algorithm12(y, x, atan2, true);
              break;
            default:
              c = algorithm14(y, x, atan2, true);
              break;
          }
          return c;
        },
        "Array, number | BigNumber": function(x, y) {
          return algorithm14(matrix(x), y, atan2, false).valueOf();
        },
        "number | BigNumber, Array": function(x, y) {
          return algorithm14(matrix(y), x, atan2, true).valueOf();
        }
      });
      atan2.toTex = { 2: "\\mathrm{atan2}\\left(${args}\\right)" };
      return atan2;
    }
    exports.name = "atan2";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/trigonometry/atanh.js
var require_atanh2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/trigonometry/atanh.js"(exports) {
    "use strict";
    var deepMap = require_deepMap();
    function factory(type, config, load, typed) {
      var atanh = typed("atanh", {
        "number": function(x) {
          if (x <= 1 && x >= -1 || config.predictable) {
            return _atanh(x);
          }
          return new type.Complex(x, 0).atanh();
        },
        "Complex": function(x) {
          return x.atanh();
        },
        "BigNumber": function(x) {
          return x.atanh();
        },
        "Array | Matrix": function(x) {
          return deepMap(x, atanh, true);
        }
      });
      atanh.toTex = { 1: "\\tanh^{-1}\\left(${args[0]}\\right)" };
      return atanh;
    }
    var _atanh = Math.atanh || function(x) {
      return Math.log((1 + x) / (1 - x)) / 2;
    };
    exports.name = "atanh";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/trigonometry/cos.js
var require_cos2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/trigonometry/cos.js"(exports) {
    "use strict";
    var deepMap = require_deepMap();
    function factory(type, config, load, typed) {
      var cos = typed("cos", {
        "number": Math.cos,
        "Complex": function(x) {
          return x.cos();
        },
        "BigNumber": function(x) {
          return x.cos();
        },
        "Unit": function(x) {
          if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
            throw new TypeError("Unit in function cos is no angle");
          }
          return cos(x.value);
        },
        "Array | Matrix": function(x) {
          return deepMap(x, cos);
        }
      });
      cos.toTex = { 1: "\\cos\\left(${args[0]}\\right)" };
      return cos;
    }
    exports.name = "cos";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/trigonometry/cosh.js
var require_cosh2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/trigonometry/cosh.js"(exports) {
    "use strict";
    var deepMap = require_deepMap();
    function factory(type, config, load, typed) {
      var cosh = typed("cosh", {
        "number": _cosh,
        "Complex": function(x) {
          return x.cosh();
        },
        "BigNumber": function(x) {
          return x.cosh();
        },
        "Unit": function(x) {
          if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
            throw new TypeError("Unit in function cosh is no angle");
          }
          return cosh(x.value);
        },
        "Array | Matrix": function(x) {
          return deepMap(x, cosh);
        }
      });
      cosh.toTex = { 1: "\\cosh\\left(${args[0]}\\right)" };
      return cosh;
    }
    var _cosh = Math.cosh || function(x) {
      return (Math.exp(x) + Math.exp(-x)) / 2;
    };
    exports.name = "cosh";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/trigonometry/cot.js
var require_cot2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/trigonometry/cot.js"(exports) {
    "use strict";
    var deepMap = require_deepMap();
    function factory(type, config, load, typed) {
      var cot = typed("cot", {
        "number": function(x) {
          return 1 / Math.tan(x);
        },
        "Complex": function(x) {
          return x.cot();
        },
        "BigNumber": function(x) {
          return new type.BigNumber(1).div(x.tan());
        },
        "Unit": function(x) {
          if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
            throw new TypeError("Unit in function cot is no angle");
          }
          return cot(x.value);
        },
        "Array | Matrix": function(x) {
          return deepMap(x, cot);
        }
      });
      cot.toTex = { 1: "\\cot\\left(${args[0]}\\right)" };
      return cot;
    }
    exports.name = "cot";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/trigonometry/coth.js
var require_coth2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/trigonometry/coth.js"(exports) {
    "use strict";
    var deepMap = require_deepMap();
    function factory(type, config, load, typed) {
      var coth = typed("coth", {
        "number": _coth,
        "Complex": function(x) {
          return x.coth();
        },
        "BigNumber": function(x) {
          return new type.BigNumber(1).div(x.tanh());
        },
        "Unit": function(x) {
          if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
            throw new TypeError("Unit in function coth is no angle");
          }
          return coth(x.value);
        },
        "Array | Matrix": function(x) {
          return deepMap(x, coth);
        }
      });
      coth.toTex = { 1: "\\coth\\left(${args[0]}\\right)" };
      return coth;
    }
    function _coth(x) {
      var e = Math.exp(2 * x);
      return (e + 1) / (e - 1);
    }
    exports.name = "coth";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/trigonometry/csc.js
var require_csc2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/trigonometry/csc.js"(exports) {
    "use strict";
    var deepMap = require_deepMap();
    function factory(type, config, load, typed) {
      var csc = typed("csc", {
        "number": function(x) {
          return 1 / Math.sin(x);
        },
        "Complex": function(x) {
          return x.csc();
        },
        "BigNumber": function(x) {
          return new type.BigNumber(1).div(x.sin());
        },
        "Unit": function(x) {
          if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
            throw new TypeError("Unit in function csc is no angle");
          }
          return csc(x.value);
        },
        "Array | Matrix": function(x) {
          return deepMap(x, csc);
        }
      });
      csc.toTex = { 1: "\\csc\\left(${args[0]}\\right)" };
      return csc;
    }
    exports.name = "csc";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/trigonometry/csch.js
var require_csch2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/trigonometry/csch.js"(exports) {
    "use strict";
    var deepMap = require_deepMap();
    var sign = require_number().sign;
    function factory(type, config, load, typed) {
      var csch = typed("csch", {
        "number": _csch,
        "Complex": function(x) {
          return x.csch();
        },
        "BigNumber": function(x) {
          return new type.BigNumber(1).div(x.sinh());
        },
        "Unit": function(x) {
          if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
            throw new TypeError("Unit in function csch is no angle");
          }
          return csch(x.value);
        },
        "Array | Matrix": function(x) {
          return deepMap(x, csch);
        }
      });
      csch.toTex = { 1: "\\mathrm{csch}\\left(${args[0]}\\right)" };
      return csch;
    }
    function _csch(x) {
      if (x == 0) {
        return Number.POSITIVE_INFINITY;
      } else {
        return Math.abs(2 / (Math.exp(x) - Math.exp(-x))) * sign(x);
      }
    }
    exports.name = "csch";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/trigonometry/sec.js
var require_sec2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/trigonometry/sec.js"(exports) {
    "use strict";
    var deepMap = require_deepMap();
    function factory(type, config, load, typed) {
      var sec = typed("sec", {
        "number": function(x) {
          return 1 / Math.cos(x);
        },
        "Complex": function(x) {
          return x.sec();
        },
        "BigNumber": function(x) {
          return new type.BigNumber(1).div(x.cos());
        },
        "Unit": function(x) {
          if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
            throw new TypeError("Unit in function sec is no angle");
          }
          return sec(x.value);
        },
        "Array | Matrix": function(x) {
          return deepMap(x, sec);
        }
      });
      sec.toTex = { 1: "\\sec\\left(${args[0]}\\right)" };
      return sec;
    }
    exports.name = "sec";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/trigonometry/sech.js
var require_sech2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/trigonometry/sech.js"(exports) {
    "use strict";
    var deepMap = require_deepMap();
    function factory(type, config, load, typed) {
      var sech = typed("sech", {
        "number": _sech,
        "Complex": function(x) {
          return x.sech();
        },
        "BigNumber": function(x) {
          return new type.BigNumber(1).div(x.cosh());
        },
        "Unit": function(x) {
          if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
            throw new TypeError("Unit in function sech is no angle");
          }
          return sech(x.value);
        },
        "Array | Matrix": function(x) {
          return deepMap(x, sech);
        }
      });
      sech.toTex = { 1: "\\mathrm{sech}\\left(${args[0]}\\right)" };
      return sech;
    }
    function _sech(x) {
      return 2 / (Math.exp(x) + Math.exp(-x));
    }
    exports.name = "sech";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/trigonometry/sin.js
var require_sin2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/trigonometry/sin.js"(exports) {
    "use strict";
    var deepMap = require_deepMap();
    function factory(type, config, load, typed) {
      var sin = typed("sin", {
        "number": Math.sin,
        "Complex": function(x) {
          return x.sin();
        },
        "BigNumber": function(x) {
          return x.sin();
        },
        "Unit": function(x) {
          if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
            throw new TypeError("Unit in function sin is no angle");
          }
          return sin(x.value);
        },
        "Array | Matrix": function(x) {
          return deepMap(x, sin, true);
        }
      });
      sin.toTex = { 1: "\\sin\\left(${args[0]}\\right)" };
      return sin;
    }
    exports.name = "sin";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/trigonometry/sinh.js
var require_sinh2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/trigonometry/sinh.js"(exports) {
    "use strict";
    var deepMap = require_deepMap();
    function factory(type, config, load, typed) {
      var sinh = typed("sinh", {
        "number": _sinh,
        "Complex": function(x) {
          return x.sinh();
        },
        "BigNumber": function(x) {
          return x.sinh();
        },
        "Unit": function(x) {
          if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
            throw new TypeError("Unit in function sinh is no angle");
          }
          return sinh(x.value);
        },
        "Array | Matrix": function(x) {
          return deepMap(x, sinh, true);
        }
      });
      sinh.toTex = { 1: "\\sinh\\left(${args[0]}\\right)" };
      return sinh;
    }
    var _sinh = Math.sinh || function(x) {
      return (Math.exp(x) - Math.exp(-x)) / 2;
    };
    exports.name = "sinh";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/trigonometry/tan.js
var require_tan2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/trigonometry/tan.js"(exports) {
    "use strict";
    var deepMap = require_deepMap();
    function factory(type, config, load, typed) {
      var tan = typed("tan", {
        "number": Math.tan,
        "Complex": function(x) {
          return x.tan();
        },
        "BigNumber": function(x) {
          return x.tan();
        },
        "Unit": function(x) {
          if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
            throw new TypeError("Unit in function tan is no angle");
          }
          return tan(x.value);
        },
        "Array | Matrix": function(x) {
          return deepMap(x, tan, true);
        }
      });
      tan.toTex = { 1: "\\tan\\left(${args[0]}\\right)" };
      return tan;
    }
    exports.name = "tan";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/trigonometry/tanh.js
var require_tanh2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/trigonometry/tanh.js"(exports) {
    "use strict";
    var deepMap = require_deepMap();
    function factory(type, config, load, typed) {
      var tanh = typed("tanh", {
        "number": _tanh,
        "Complex": function(x) {
          return x.tanh();
        },
        "BigNumber": function(x) {
          return x.tanh();
        },
        "Unit": function(x) {
          if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
            throw new TypeError("Unit in function tanh is no angle");
          }
          return tanh(x.value);
        },
        "Array | Matrix": function(x) {
          return deepMap(x, tanh, true);
        }
      });
      tanh.toTex = { 1: "\\tanh\\left(${args[0]}\\right)" };
      return tanh;
    }
    var _tanh = Math.tanh || function(x) {
      var e = Math.exp(2 * x);
      return (e - 1) / (e + 1);
    };
    exports.name = "tanh";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/trigonometry/index.js
var require_trigonometry = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/trigonometry/index.js"(exports, module) {
    module.exports = [
      require_acos2(),
      require_acosh2(),
      require_acot2(),
      require_acoth2(),
      require_acsc2(),
      require_acsch2(),
      require_asec2(),
      require_asech2(),
      require_asin2(),
      require_asinh2(),
      require_atan3(),
      require_atan22(),
      require_atanh2(),
      require_cos2(),
      require_cosh2(),
      require_cot2(),
      require_coth2(),
      require_csc2(),
      require_csch2(),
      require_sec2(),
      require_sech2(),
      require_sin2(),
      require_sinh2(),
      require_tan2(),
      require_tanh2()
    ];
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/unit/to.js
var require_to2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/unit/to.js"(exports) {
    "use strict";
    function factory(type, config, load, typed) {
      var latex = require_latex();
      var matrix = load(require_matrix());
      var algorithm13 = load(require_algorithm13());
      var algorithm14 = load(require_algorithm14());
      var to = typed("to", {
        "Unit, Unit | string": function(x, unit) {
          return x.to(unit);
        },
        "Matrix, Matrix": function(x, y) {
          return algorithm13(x, y, to);
        },
        "Array, Array": function(x, y) {
          return to(matrix(x), matrix(y)).valueOf();
        },
        "Array, Matrix": function(x, y) {
          return to(matrix(x), y);
        },
        "Matrix, Array": function(x, y) {
          return to(x, matrix(y));
        },
        "Matrix, any": function(x, y) {
          return algorithm14(x, y, to, false);
        },
        "any, Matrix": function(x, y) {
          return algorithm14(y, x, to, true);
        },
        "Array, any": function(x, y) {
          return algorithm14(matrix(x), y, to, false).valueOf();
        },
        "any, Array": function(x, y) {
          return algorithm14(matrix(y), x, to, true).valueOf();
        }
      });
      to.toTex = {
        2: "\\left(${args[0]}" + latex.operators["to"] + "${args[1]}\\right)"
      };
      return to;
    }
    exports.name = "to";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/unit/index.js
var require_unit4 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/unit/index.js"(exports, module) {
    module.exports = [
      require_to2()
    ];
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/utils/clone.js
var require_clone2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/utils/clone.js"(exports) {
    "use strict";
    var object = require_object();
    function factory(type, config, load, typed) {
      var clone = typed("clone", {
        "any": object.clone
      });
      clone.toTex = void 0;
      return clone;
    }
    exports.name = "clone";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/utils/isPrime.js
var require_isPrime2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/utils/isPrime.js"(exports) {
    "use strict";
    var deepMap = require_deepMap();
    function factory(type, config, load, typed) {
      var isPrime = typed("isPrime", {
        "number": function(x) {
          if (x < 2) {
            return false;
          }
          if (x == 2) {
            return true;
          }
          if (x % 2 == 0) {
            return false;
          }
          for (var i = 3; i * i <= x; i += 2) {
            if (x % i == 0) {
              return false;
            }
          }
          return true;
        },
        "BigNumber": function(x) {
          if (x.lt(2)) {
            return false;
          }
          if (x.equals(2)) {
            return true;
          }
          if (x.mod(2).isZero()) {
            return false;
          }
          for (var i = type.BigNumber(3); i.times(i).lte(x); i = i.plus(1)) {
            if (x.mod(i).isZero()) {
              return false;
            }
          }
          return true;
        },
        "Array | Matrix": function(x) {
          return deepMap(x, isPrime);
        }
      });
      return isPrime;
    }
    exports.name = "isPrime";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/utils/isNaN.js
var require_isNaN2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/utils/isNaN.js"(exports) {
    "use strict";
    var deepMap = require_deepMap();
    var number = require_number();
    function factory(type, config, load, typed) {
      var isNaN2 = typed("isNaN", {
        "number": function(x) {
          return Number.isNaN(x);
        },
        "BigNumber": function(x) {
          return x.isNaN();
        },
        "Fraction": function(x) {
          return false;
        },
        "Complex": function(x) {
          return Number.isNaN(x.re) && Number.isNaN(x.im);
        },
        "Unit": function(x) {
          return Number.isNaN(x.value);
        },
        "Array | Matrix": function(x) {
          return deepMap(x, Number.isNaN);
        }
      });
      return isNaN2;
    }
    exports.name = "isNaN";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/utils/index.js
var require_utils2 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/utils/index.js"(exports, module) {
    module.exports = [
      require_clone2(),
      require_isInteger2(),
      require_isNegative2(),
      require_isNumeric(),
      require_isPositive2(),
      require_isPrime2(),
      require_isZero2(),
      require_isNaN2(),
      require_typeof()
    ];
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/function/index.js
var require_function4 = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/function/index.js"(exports, module) {
    module.exports = [
      require_algebra(),
      require_arithmetic(),
      require_bitwise2(),
      require_combinatorics(),
      require_complex5(),
      require_geometry(),
      require_logical(),
      require_matrix4(),
      require_probability(),
      require_relational(),
      require_special(),
      require_statistics(),
      require_string4(),
      require_trigonometry(),
      require_unit4(),
      require_utils2()
    ];
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/json/reviver.js
var require_reviver = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/json/reviver.js"(exports) {
    "use strict";
    function factory(type, config, load, typed) {
      return function reviver(key, value) {
        var constructor = type[value && value.mathjs];
        if (constructor && typeof constructor.fromJSON === "function") {
          return constructor.fromJSON(value);
        }
        return value;
      };
    }
    exports.name = "reviver";
    exports.path = "json";
    exports.factory = factory;
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/json/index.js
var require_json = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/json/index.js"(exports, module) {
    module.exports = [
      require_reviver()
    ];
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/error/index.js
var require_error = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/error/index.js"(exports, module) {
    "use strict";
    var ArgumentsError = require_ArgumentsError();
    var DimensionError = require_DimensionError();
    var IndexError = require_IndexError();
    module.exports = [
      {
        name: "ArgumentsError",
        path: "error",
        factory: function() {
          return ArgumentsError;
        }
      },
      {
        name: "DimensionError",
        path: "error",
        factory: function() {
          return DimensionError;
        }
      },
      {
        name: "IndexError",
        path: "error",
        factory: function() {
          return IndexError;
        }
      }
    ];
  }
});

// node_modules/mathsteps/node_modules/mathjs/lib/index.js
var require_lib = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/lib/index.js"(exports, module) {
    module.exports = [
      require_type(),
      // data types (Matrix, Complex, Unit, ...)
      require_constants2(),
      // constants
      require_expression(),
      // expression parsing
      require_function4(),
      // functions
      require_json(),
      // serialization utility (math.json.reviver)
      require_error()
      // errors
    ];
  }
});

// node_modules/mathsteps/node_modules/mathjs/index.js
var require_mathjs = __commonJS({
  "node_modules/mathsteps/node_modules/mathjs/index.js"(exports, module) {
    var core = require_core2();
    function create(config) {
      var math = core.create(config);
      math.create = create;
      math["import"](require_lib());
      return math;
    }
    module.exports = create();
  }
});

// node_modules/mathsteps/lib/node/Type.js
var require_Type = __commonJS({
  "node_modules/mathsteps/lib/node/Type.js"(exports, module) {
    var NodeType = {};
    NodeType.isOperator = function(node, operator = null) {
      return node.type === "OperatorNode" && node.fn !== "unaryMinus" && "*+-/^".includes(node.op) && (operator ? node.op === operator : true);
    };
    NodeType.isParenthesis = function(node) {
      return node.type === "ParenthesisNode";
    };
    NodeType.isUnaryMinus = function(node) {
      return node.type === "OperatorNode" && node.fn === "unaryMinus";
    };
    NodeType.isFunction = function(node, functionName = null) {
      if (node.type !== "FunctionNode") {
        return false;
      }
      if (functionName && node.fn.name !== functionName) {
        return false;
      }
      return true;
    };
    NodeType.isSymbol = function(node, allowUnaryMinus = false) {
      if (node.type === "SymbolNode") {
        return true;
      } else if (allowUnaryMinus && NodeType.isUnaryMinus(node)) {
        return NodeType.isSymbol(node.args[0], false);
      } else {
        return false;
      }
    };
    NodeType.isConstant = function(node, allowUnaryMinus = false) {
      if (node.type === "ConstantNode") {
        return true;
      } else if (allowUnaryMinus && NodeType.isUnaryMinus(node)) {
        if (NodeType.isConstant(node.args[0], false)) {
          const value = parseFloat(node.args[0].value);
          return value >= 0;
        } else {
          return false;
        }
      } else {
        return false;
      }
    };
    NodeType.isConstantFraction = function(node, allowUnaryMinus = false) {
      if (NodeType.isOperator(node, "/")) {
        return node.args.every((n) => NodeType.isConstant(n, allowUnaryMinus));
      } else {
        return false;
      }
    };
    NodeType.isConstantOrConstantFraction = function(node, allowUnaryMinus = false) {
      if (NodeType.isConstant(node, allowUnaryMinus) || NodeType.isConstantFraction(node, allowUnaryMinus)) {
        return true;
      } else {
        return false;
      }
    };
    NodeType.isIntegerFraction = function(node, allowUnaryMinus = false) {
      if (!NodeType.isConstantFraction(node, allowUnaryMinus)) {
        return false;
      }
      let numerator = node.args[0];
      let denominator = node.args[1];
      if (allowUnaryMinus) {
        if (NodeType.isUnaryMinus(numerator)) {
          numerator = numerator.args[0];
        }
        if (NodeType.isUnaryMinus(denominator)) {
          denominator = denominator.args[0];
        }
      }
      return Number.isInteger(parseFloat(numerator.value)) && Number.isInteger(parseFloat(denominator.value));
    };
    module.exports = NodeType;
  }
});

// node_modules/mathsteps/lib/node/Creator.js
var require_Creator = __commonJS({
  "node_modules/mathsteps/lib/node/Creator.js"(exports, module) {
    var math = require_mathjs();
    var NodeType = require_Type();
    var NodeCreator = {
      operator(op, args, implicit = false) {
        switch (op) {
          case "+":
            return new math.expression.node.OperatorNode("+", "add", args);
          case "-":
            return new math.expression.node.OperatorNode("-", "subtract", args);
          case "/":
            return new math.expression.node.OperatorNode("/", "divide", args);
          case "*":
            return new math.expression.node.OperatorNode(
              "*",
              "multiply",
              args,
              implicit
            );
          case "^":
            return new math.expression.node.OperatorNode("^", "pow", args);
          default:
            throw Error("Unsupported operation: " + op);
        }
      },
      // In almost all cases, use Negative.negate (with naive = true) to add a
      // unary minus to your node, rather than calling this constructor directly
      unaryMinus(content) {
        return new math.expression.node.OperatorNode(
          "-",
          "unaryMinus",
          [content]
        );
      },
      constant(val) {
        return new math.expression.node.ConstantNode(val);
      },
      symbol(name) {
        return new math.expression.node.SymbolNode(name);
      },
      parenthesis(content) {
        return new math.expression.node.ParenthesisNode(content);
      },
      list(content) {
        return new math.expression.node.ArrayNode(content);
      },
      // exponent might be null, which means there's no exponent node.
      // similarly, coefficient might be null, which means there's no coefficient
      // the base node can never be null.
      term(base, exponent, coeff, explicitCoeff = false) {
        let term = base;
        if (exponent) {
          term = this.operator("^", [term, exponent]);
        }
        if (coeff && (explicitCoeff || parseFloat(coeff.value) !== 1)) {
          if (NodeType.isConstant(coeff) && parseFloat(coeff.value) === -1 && !explicitCoeff) {
            term = this.unaryMinus(term);
          } else {
            term = this.operator("*", [coeff, term], true);
          }
        }
        return term;
      },
      polynomialTerm(symbol, exponent, coeff, explicitCoeff = false) {
        return this.term(symbol, exponent, coeff, explicitCoeff);
      },
      // Given a root value and a radicand (what is under the radical)
      nthRoot(radicandNode, rootNode) {
        const symbol = NodeCreator.symbol("nthRoot");
        return new math.expression.node.FunctionNode(symbol, [radicandNode, rootNode]);
      }
    };
    module.exports = NodeCreator;
  }
});

// node_modules/mathsteps/lib/util/evaluate.js
var require_evaluate = __commonJS({
  "node_modules/mathsteps/lib/util/evaluate.js"(exports, module) {
    function evaluate(node) {
      return node.eval();
    }
    module.exports = evaluate;
  }
});

// node_modules/mathsteps/lib/node/Term.js
var require_Term = __commonJS({
  "node_modules/mathsteps/lib/node/Term.js"(exports, module) {
    var NodeCreator = require_Creator();
    var NodeType = require_Type();
    var evaluate = require_evaluate();
    var Term = class _Term {
      // Params:
      // -- node: The node from which to construct the Term
      // -- baseNodeFunc: A boolean function returning true if the base node
      //    is of the right type
      //    e.g., for PolynomialTerms, baseNodeFunc checks if the base is a symbol
      //    for NthRootTerms, baseNodeFunc checks if the base node is an nth root
      // -- onlyImplicitMultiplication: If onlyImplicitMultiplication is true,
      //    we throw an error if `node` is a term without implicit multiplication
      //    (i.e. 2*x instead of 2x) and therefore isTerm will return false.
      constructor(node, baseNodeFunc, onlyImplicitMultiplication = false) {
        const values = _Term.parseNode(node, baseNodeFunc, onlyImplicitMultiplication);
        this.base = values.base;
        this.exponent = values.exponent;
        this.coeff = values.coeff;
      }
      /* GETTER FUNCTIONS */
      getBaseNode() {
        return this.base;
      }
      getCoeffNode(defaultOne = false) {
        if (!this.coeff && defaultOne) {
          return NodeCreator.constant(1);
        } else {
          return this.coeff;
        }
      }
      getCoeffValue() {
        if (this.coeff) {
          return evaluate(this.coeff);
        } else {
          return 1;
        }
      }
      getExponentNode(defaultOne = false) {
        if (!this.exponent && defaultOne) {
          return NodeCreator.constant(1);
        } else {
          return this.exponent;
        }
      }
      // note: there is no exponent value getter function because the exponent
      // can be any expression and not necessarily a number.
      /* CHECKER FUNCTIONS (returns true / false for certain conditions) */
      // Returns true if the coefficient is a fraction
      hasFractionCoeff() {
        return this.coeff && NodeType.isOperator(this.coeff);
      }
      hasCoeff() {
        return !!this.coeff;
      }
    };
    Term.isTerm = function(node, baseNodeFunc, onlyImplicitMultiplication = false) {
      try {
        new Term(node, baseNodeFunc, onlyImplicitMultiplication);
        return true;
      } catch (err) {
        return false;
      }
    };
    Term.parseNode = function(node, baseNodeFunc, onlyImplicitMultiplication) {
      let base, exponent, coeff;
      if (NodeType.isOperator(node)) {
        if (node.op === "^") {
          const baseNode = node.args[0];
          if (!baseNodeFunc(baseNode)) {
            throw Error("Expected base term, got " + baseNode);
          }
          base = baseNode;
          exponent = node.args[1];
        } else if (node.op === "*") {
          if (onlyImplicitMultiplication && !node.implicit) {
            throw Error("Expected implicit multiplication");
          }
          if (node.args.length !== 2) {
            throw Error("Expected two arguments to *");
          }
          const coeffNode = node.args[0];
          if (!NodeType.isConstantOrConstantFraction(coeffNode)) {
            throw Error("Expected coefficient to be constant or fraction of constants term, got " + coeffNode);
          }
          coeff = coeffNode;
          const nonCoefficientTerm = new Term(
            node.args[1],
            baseNodeFunc,
            onlyImplicitMultiplication
          );
          if (nonCoefficientTerm.hasCoeff()) {
            throw Error("Cannot have two coefficients " + coeffNode + " and " + nonCoefficientTerm.getCoeffNode());
          }
          base = nonCoefficientTerm.getBaseNode();
          exponent = nonCoefficientTerm.getExponentNode();
        } else if (node.op === "/") {
          const denominatorNode = node.args[1];
          if (!NodeType.isConstant(denominatorNode)) {
            throw Error("denominator must be constant node, instead of " + denominatorNode);
          }
          const numeratorNode = new Term(
            node.args[0],
            baseNodeFunc,
            onlyImplicitMultiplication
          );
          if (numeratorNode.hasFractionCoeff()) {
            throw Error("Terms with coefficients cannot have nested fractions");
          }
          exponent = numeratorNode.getExponentNode();
          base = numeratorNode.getBaseNode();
          const numeratorConstantNode = numeratorNode.getCoeffNode(true);
          coeff = NodeCreator.operator(
            "/",
            [numeratorConstantNode, denominatorNode]
          );
        } else {
          throw Error("Unsupported operatation for term with coefficent: " + node.op);
        }
      } else if (NodeType.isUnaryMinus(node)) {
        var arg = node.args[0];
        if (NodeType.isParenthesis(arg)) {
          arg = arg.content;
        }
        const termNode = new Term(
          arg,
          baseNodeFunc,
          onlyImplicitMultiplication
        );
        exponent = termNode.getExponentNode();
        base = termNode.getBaseNode();
        if (!termNode.hasCoeff()) {
          coeff = NodeCreator.constant(-1);
        } else {
          coeff = negativeCoefficient(termNode.getCoeffNode());
        }
      } else if (baseNodeFunc(node)) {
        base = node;
      } else if (NodeType.isParenthesis(node)) {
        return Term.parseNode(node.content, baseNodeFunc, onlyImplicitMultiplication);
      } else {
        throw Error("Unsupported node type: " + node.type);
      }
      return {
        base,
        exponent,
        coeff
      };
    };
    function negativeCoefficient(node) {
      if (NodeType.isConstant(node)) {
        node = NodeCreator.constant(0 - parseFloat(node.value));
      } else {
        const numeratorValue = 0 - parseFloat(node.args[0].value);
        node.args[0] = NodeCreator.constant(numeratorValue);
      }
      return node;
    }
    module.exports = Term;
  }
});

// node_modules/mathsteps/lib/node/PolynomialTerm.js
var require_PolynomialTerm = __commonJS({
  "node_modules/mathsteps/lib/node/PolynomialTerm.js"(exports, module) {
    var NodeType = require_Type();
    var Term = require_Term();
    var PolynomialTerm = class _PolynomialTerm extends Term {
      constructor(node, onlyImplicitMultiplication = false) {
        super(node, _PolynomialTerm.baseNodeFunc, onlyImplicitMultiplication);
      }
      getSymbolNode() {
        return this.base;
      }
      getSymbolName() {
        return this.base.name;
      }
    };
    PolynomialTerm.baseNodeFunc = function(node) {
      return NodeType.isSymbol(node);
    };
    PolynomialTerm.isPolynomialTerm = function(node, onlyImplicitMultiplication = false) {
      return Term.isTerm(
        node,
        PolynomialTerm.baseNodeFunc,
        onlyImplicitMultiplication
      );
    };
    module.exports = PolynomialTerm;
  }
});

// node_modules/mathsteps/lib/Negative.js
var require_Negative = __commonJS({
  "node_modules/mathsteps/lib/Negative.js"(exports, module) {
    var NodeCreator = require_Creator();
    var NodeType = require_Type();
    var PolynomialTerm = require_PolynomialTerm();
    var Negative = {};
    Negative.isNegative = function(node) {
      if (NodeType.isUnaryMinus(node)) {
        return !Negative.isNegative(node.args[0]);
      } else if (NodeType.isConstant(node)) {
        return parseFloat(node.value) < 0;
      } else if (NodeType.isConstantFraction(node)) {
        const numeratorValue = parseFloat(node.args[0].value);
        const denominatorValue = parseFloat(node.args[1].value);
        if (numeratorValue < 0 || denominatorValue < 0) {
          return !(numeratorValue < 0 && denominatorValue < 0);
        }
      } else if (PolynomialTerm.isPolynomialTerm(node)) {
        const polyNode = new PolynomialTerm(node);
        return Negative.isNegative(polyNode.getCoeffNode(true));
      }
      return false;
    };
    Negative.negate = function(node, naive = false) {
      if (NodeType.isConstantFraction(node)) {
        node.args[0] = Negative.negate(node.args[0], naive);
        return node;
      } else if (PolynomialTerm.isPolynomialTerm(node)) {
        return Negative.negatePolynomialTerm(node, naive);
      } else if (!naive) {
        if (NodeType.isUnaryMinus(node)) {
          return node.args[0];
        } else if (NodeType.isConstant(node)) {
          return NodeCreator.constant(0 - parseFloat(node.value));
        }
      }
      return NodeCreator.unaryMinus(node);
    };
    Negative.negatePolynomialTerm = function(node, naive = false) {
      if (!PolynomialTerm.isPolynomialTerm(node)) {
        throw Error("node is not a polynomial term");
      }
      const polyNode = new PolynomialTerm(node);
      let newCoeff;
      if (!polyNode.hasCoeff()) {
        newCoeff = NodeCreator.constant(-1);
      } else {
        const oldCoeff = polyNode.getCoeffNode();
        if (oldCoeff.value === "-1") {
          newCoeff = null;
        } else if (polyNode.hasFractionCoeff()) {
          let numerator = oldCoeff.args[0];
          numerator = Negative.negate(numerator, naive);
          const denominator = oldCoeff.args[1];
          newCoeff = NodeCreator.operator("/", [numerator, denominator]);
        } else {
          newCoeff = Negative.negate(oldCoeff, naive);
          if (newCoeff.value === "1") {
            newCoeff = null;
          }
        }
      }
      return NodeCreator.polynomialTerm(
        polyNode.getSymbolNode(),
        polyNode.getExponentNode(),
        newCoeff
      );
    };
    module.exports = Negative;
  }
});

// node_modules/mathsteps/lib/node/CustomType.js
var require_CustomType = __commonJS({
  "node_modules/mathsteps/lib/node/CustomType.js"(exports, module) {
    var Negative = require_Negative();
    var NodeCreator = require_Creator();
    var NodeType = require_Type();
    var NodeCustomType = {};
    NodeCustomType.isType = function(node, isTypeFunc, allowUnaryMinus = true, allowParens = true) {
      if (isTypeFunc(node)) {
        return true;
      } else if (allowUnaryMinus && NodeType.isUnaryMinus(node)) {
        return NodeCustomType.isType(node.args[0], isTypeFunc, allowUnaryMinus, allowParens);
      } else if (allowParens && NodeType.isParenthesis(node)) {
        return NodeCustomType.isType(node.content, isTypeFunc, allowUnaryMinus, allowParens);
      }
      return false;
    };
    NodeCustomType.getType = function(node, isTypeFunc, allowUnaryMinus = true, allowParens = true, moveUnaryMinus = void 0) {
      if (allowUnaryMinus === true && moveUnaryMinus === void 0) {
        throw Error("Error in `getType`: moveUnaryMinus is undefined");
      }
      if (isTypeFunc(node)) {
        return node;
      } else if (allowUnaryMinus && NodeType.isUnaryMinus(node)) {
        return moveUnaryMinus(
          NodeCustomType.getType(
            node.args[0],
            isTypeFunc,
            allowUnaryMinus,
            allowParens,
            moveUnaryMinus
          )
        );
      } else if (allowParens && NodeType.isParenthesis(node)) {
        return NodeCustomType.getType(
          node.content,
          isTypeFunc,
          allowUnaryMinus,
          allowParens,
          moveUnaryMinus
        );
      }
      throw Error("`getType` called on a node that does not belong to specified type");
    };
    NodeCustomType.isFraction = function(node, allowUnaryMinus = true, allowParens = true) {
      return NodeCustomType.isType(
        node,
        (node2) => NodeType.isOperator(node2, "/"),
        allowUnaryMinus,
        allowParens
      );
    };
    NodeCustomType.getFraction = function(node, allowUnaryMinus = true, allowParens = true) {
      const moveUnaryMinus = function(node2) {
        if (!NodeType.isOperator(node2, "/")) {
          throw Error("Expected a fraction");
        }
        const numerator = node2.args[0];
        const denominator = node2.args[1];
        const newNumerator = Negative.negate(numerator);
        return NodeCreator.operator("/", [newNumerator, denominator]);
      };
      return NodeCustomType.getType(
        node,
        (node2) => NodeType.isOperator(node2, "/"),
        allowParens,
        allowUnaryMinus,
        moveUnaryMinus
      );
    };
    module.exports = NodeCustomType;
  }
});

// node_modules/mathsteps/lib/node/MixedNumber.js
var require_MixedNumber = __commonJS({
  "node_modules/mathsteps/lib/node/MixedNumber.js"(exports, module) {
    var Negative = require_Negative();
    var NodeType = require_Type();
    function isMixedNumber(node) {
      if (!NodeType.isOperator(node, "/")) {
        return false;
      }
      if (node.args.length !== 2) {
        return false;
      }
      const numerator = node.args[0];
      const denominator = node.args[1];
      if (!(NodeType.isOperator(numerator, "*") && numerator.implicit)) {
        return false;
      }
      const numeratorFirstArg = NodeType.isUnaryMinus(numerator.args[0]) ? Negative.negate(numerator.args[0].args[0]) : numerator.args[0];
      const numeratorSecondArg = NodeType.isParenthesis(numerator.args[1]) ? numerator.args[1].content : numerator.args[1];
      if (!(NodeType.isConstant(numeratorFirstArg) && NodeType.isConstant(numeratorSecondArg))) {
        return false;
      }
      const denominatorValue = NodeType.isParenthesis(denominator) ? denominator.content : denominator;
      if (!NodeType.isConstant(denominatorValue)) {
        return false;
      }
      return true;
    }
    function isNegativeMixedNumber(node) {
      if (!isMixedNumber(node)) {
        throw Error("Expected a mixed number");
      }
      return NodeType.isUnaryMinus(node.args[0].args[0]);
    }
    function getWholeNumberValue(node) {
      if (!isMixedNumber(node)) {
        throw Error("Expected a mixed number");
      }
      const wholeNumberNode = NodeType.isUnaryMinus(node.args[0].args[0]) ? node.args[0].args[0].args[0] : node.args[0].args[0];
      return parseInt(wholeNumberNode.value);
    }
    function getNumeratorValue(node) {
      if (!isMixedNumber(node)) {
        throw Error("Expected a mixed number");
      }
      const numeratorNode = NodeType.isParenthesis(node.args[0].args[1]) ? node.args[0].args[1].content : node.args[0].args[1];
      return parseInt(numeratorNode.value);
    }
    function getDenominatorValue(node) {
      if (!isMixedNumber(node)) {
        throw Error("Expected a mixed number");
      }
      const denominatorNode = NodeType.isParenthesis(node.args[1]) ? node.args[1].content : node.args[1];
      return parseInt(denominatorNode.value);
    }
    module.exports = {
      isMixedNumber,
      isNegativeMixedNumber,
      getWholeNumberValue,
      getNumeratorValue,
      getDenominatorValue
    };
  }
});

// node_modules/mathsteps/lib/node/NthRootTerm.js
var require_NthRootTerm = __commonJS({
  "node_modules/mathsteps/lib/node/NthRootTerm.js"(exports, module) {
    var NodeType = require_Type();
    var Term = require_Term();
    var NthRootTerm = class _NthRootTerm extends Term {
      constructor(node, onlyImplicitMultiplication = false) {
        super(node, _NthRootTerm.baseNodeFunc, onlyImplicitMultiplication);
      }
    };
    NthRootTerm.baseNodeFunc = function(node) {
      return NodeType.isFunction(node, "nthRoot");
    };
    NthRootTerm.isNthRootTerm = function(node, onlyImplicitMultiplication = false) {
      return Term.isTerm(
        node,
        NthRootTerm.baseNodeFunc,
        onlyImplicitMultiplication
      );
    };
    module.exports = NthRootTerm;
  }
});

// node_modules/mathsteps/lib/util/clone.js
var require_clone3 = __commonJS({
  "node_modules/mathsteps/lib/util/clone.js"(exports, module) {
    function clone(node) {
      const copy = node.clone();
      copy.changeGroup = node.changeGroup;
      if (node.args) {
        node.args.forEach((child, i) => {
          copy.args[i] = clone(child);
        });
      } else if (node.content) {
        copy.content = clone(node.content);
      }
      return copy;
    }
    module.exports = clone;
  }
});

// node_modules/mathsteps/lib/node/Status.js
var require_Status = __commonJS({
  "node_modules/mathsteps/lib/node/Status.js"(exports, module) {
    var clone = require_clone3();
    var ChangeTypes = require_ChangeTypes();
    var Type = require_Type();
    var Status = class {
      constructor(changeType, oldNode, newNode, substeps = []) {
        if (!newNode) {
          throw Error("node is not defined");
        }
        if (changeType === void 0 || typeof changeType !== "string") {
          throw Error("changetype isn't valid");
        }
        this.changeType = changeType;
        this.oldNode = oldNode;
        this.newNode = newNode;
        this.substeps = substeps;
      }
      hasChanged() {
        return this.changeType !== ChangeTypes.NO_CHANGE;
      }
    };
    Status.resetChangeGroups = function(node) {
      node = clone(node);
      node.filter((node2) => node2.changeGroup).forEach((change) => {
        delete change.changeGroup;
      });
      return node;
    };
    Status.noChange = function(node) {
      return new Status(ChangeTypes.NO_CHANGE, null, node);
    };
    Status.nodeChanged = function(changeType, oldNode, newNode, defaultChangeGroup = true, steps = []) {
      if (defaultChangeGroup) {
        oldNode.changeGroup = 1;
        newNode.changeGroup = 1;
      }
      return new Status(changeType, oldNode, newNode, steps);
    };
    Status.childChanged = function(node, childStatus, childArgIndex = null) {
      const oldNode = clone(node);
      const newNode = clone(node);
      let substeps = childStatus.substeps;
      if (!childStatus.oldNode) {
        throw Error("Expected old node for changeType: " + childStatus.changeType);
      }
      function updateSubsteps(substeps2, fn) {
        substeps2.map((step) => {
          step = fn(step);
          step.substeps = updateSubsteps(step.substeps, fn);
        });
        return substeps2;
      }
      if (Type.isParenthesis(node)) {
        oldNode.content = childStatus.oldNode;
        newNode.content = childStatus.newNode;
        substeps = updateSubsteps(substeps, (step) => {
          const oldNode2 = clone(node);
          const newNode2 = clone(node);
          oldNode2.content = step.oldNode;
          newNode2.content = step.newNode;
          step.oldNode = oldNode2;
          step.newNode = newNode2;
          return step;
        });
      } else if (Type.isOperator(node) || Type.isFunction(node) && childArgIndex !== null) {
        oldNode.args[childArgIndex] = childStatus.oldNode;
        newNode.args[childArgIndex] = childStatus.newNode;
        substeps = updateSubsteps(substeps, (step) => {
          const oldNode2 = clone(node);
          const newNode2 = clone(node);
          oldNode2.args[childArgIndex] = step.oldNode;
          newNode2.args[childArgIndex] = step.newNode;
          step.oldNode = oldNode2;
          step.newNode = newNode2;
          return step;
        });
      } else if (Type.isUnaryMinus(node)) {
        oldNode.args[0] = childStatus.oldNode;
        newNode.args[0] = childStatus.newNode;
        substeps = updateSubsteps(substeps, (step) => {
          const oldNode2 = clone(node);
          const newNode2 = clone(node);
          oldNode2.args[0] = step.oldNode;
          newNode2.args[0] = step.newNode;
          step.oldNode = oldNode2;
          step.newNode = newNode2;
          return step;
        });
      } else {
        throw Error("Unexpected node type: " + node.type);
      }
      return new Status(childStatus.changeType, oldNode, newNode, substeps);
    };
    module.exports = Status;
  }
});

// node_modules/mathsteps/lib/node/index.js
var require_node2 = __commonJS({
  "node_modules/mathsteps/lib/node/index.js"(exports, module) {
    var Creator = require_Creator();
    var CustomType = require_CustomType();
    var MixedNumber = require_MixedNumber();
    var NthRootTerm = require_NthRootTerm();
    var PolynomialTerm = require_PolynomialTerm();
    var Status = require_Status();
    var Term = require_Term();
    var Type = require_Type();
    module.exports = {
      Creator,
      CustomType,
      MixedNumber,
      NthRootTerm,
      PolynomialTerm,
      Status,
      Term,
      Type
    };
  }
});

// node_modules/mathsteps/lib/checks/canAddLikeTerms.js
var require_canAddLikeTerms = __commonJS({
  "node_modules/mathsteps/lib/checks/canAddLikeTerms.js"(exports, module) {
    var Node = require_node2();
    function canAddLikeTermNodes(node, termSubclass) {
      if (!Node.Type.isOperator(node, "+")) {
        return false;
      }
      const args = node.args;
      if (!args.every((n) => Node.Term.isTerm(n, termSubclass.baseNodeFunc))) {
        return false;
      }
      if (args.length === 1) {
        return false;
      }
      const termList = args.map((n) => new termSubclass(n));
      const firstTerm = termList[0];
      const sharedBase = firstTerm.getBaseNode();
      const sharedExponentNode = firstTerm.getExponentNode(true);
      const restTerms = termList.slice(1);
      return restTerms.every((term) => {
        const haveSameBase = sharedBase.equals(term.getBaseNode());
        const exponentNode = term.getExponentNode(true);
        const haveSameExponent = exponentNode.equals(sharedExponentNode);
        return haveSameBase && haveSameExponent;
      });
    }
    function canAddLikeTermNthRootNodes(node) {
      return canAddLikeTermNodes(node, Node.NthRootTerm);
    }
    function canAddLikeTermPolynomialNodes(node) {
      return canAddLikeTermNodes(node, Node.PolynomialTerm);
    }
    module.exports = {
      canAddLikeTermNodes,
      canAddLikeTermNthRootNodes,
      canAddLikeTermPolynomialNodes
    };
  }
});

// node_modules/mathsteps/lib/checks/resolvesToConstant.js
var require_resolvesToConstant = __commonJS({
  "node_modules/mathsteps/lib/checks/resolvesToConstant.js"(exports, module) {
    var Node = require_node2();
    function resolvesToConstant(node) {
      if (Node.Type.isOperator(node) || Node.Type.isFunction(node)) {
        return node.args.every(
          (child) => resolvesToConstant(child)
        );
      } else if (Node.Type.isParenthesis(node)) {
        return resolvesToConstant(node.content);
      } else if (Node.Type.isConstant(node, true)) {
        return true;
      } else if (Node.Type.isSymbol(node)) {
        return false;
      } else if (Node.Type.isUnaryMinus(node)) {
        return resolvesToConstant(node.args[0]);
      } else {
        throw Error("Unsupported node type: " + node.type);
      }
    }
    module.exports = resolvesToConstant;
  }
});

// node_modules/mathsteps/lib/checks/canFindRoots.js
var require_canFindRoots = __commonJS({
  "node_modules/mathsteps/lib/checks/canFindRoots.js"(exports, module) {
    var Node = require_node2();
    var resolvesToConstant = require_resolvesToConstant();
    function canFindRoots(equation) {
      const left = equation.leftNode;
      const right = equation.rightNode;
      const zeroRightSide = Node.Type.isConstant(right) && parseFloat(right.value) === 0;
      const isMulOrPower = Node.Type.isOperator(left, "*") || Node.Type.isOperator(left, "^");
      if (!(zeroRightSide && isMulOrPower)) {
        return false;
      }
      if (Node.Type.isOperator(left, "*")) {
        const factors = left.args.filter((arg) => !resolvesToConstant(arg));
        return factors.length >= 1;
      } else if (Node.Type.isOperator(left, "^")) {
        return !resolvesToConstant(left);
      }
    }
    module.exports = canFindRoots;
  }
});

// node_modules/mathsteps/lib/simplifyExpression/collectAndCombineSearch/ConstantOrConstantPower.js
var require_ConstantOrConstantPower = __commonJS({
  "node_modules/mathsteps/lib/simplifyExpression/collectAndCombineSearch/ConstantOrConstantPower.js"(exports, module) {
    var NodeCreator = require_Creator();
    var NodeType = require_Type();
    function getBaseNode(node) {
      if (node.args) {
        return node.args[0];
      } else {
        return node;
      }
    }
    function getExponentNode(node) {
      if (NodeType.isConstant(node)) {
        return NodeCreator.constant(1);
      } else {
        return node.args[1];
      }
    }
    function isConstantOrConstantPower(node) {
      return NodeType.isOperator(node, "^") && NodeType.isConstant(node.args[0]) || NodeType.isConstant(node);
    }
    module.exports = {
      getBaseNode,
      getExponentNode,
      isConstantOrConstantPower
    };
  }
});

// node_modules/mathsteps/lib/checks/canMultiplyLikeTermConstantNodes.js
var require_canMultiplyLikeTermConstantNodes = __commonJS({
  "node_modules/mathsteps/lib/checks/canMultiplyLikeTermConstantNodes.js"(exports, module) {
    var ConstantOrPowerTerm = require_ConstantOrConstantPower();
    var Node = require_node2();
    function canMultiplyLikeTermConstantNodes(node) {
      if (!Node.Type.isOperator(node) || node.op !== "*") {
        return false;
      }
      const args = node.args;
      if (!args.every((n) => ConstantOrPowerTerm.isConstantOrConstantPower(n))) {
        return false;
      }
      if (args.every((arg) => !Node.Type.isOperator(arg, "^"))) {
        return false;
      }
      const constantTermBaseList = args.map((n) => ConstantOrPowerTerm.getBaseNode(n));
      const firstTerm = constantTermBaseList[0];
      const restTerms = constantTermBaseList.slice(1);
      return restTerms.every((term) => firstTerm.value === term.value);
    }
    module.exports = canMultiplyLikeTermConstantNodes;
  }
});

// node_modules/mathsteps/lib/checks/canMultiplyLikeTermPolynomialNodes.js
var require_canMultiplyLikeTermPolynomialNodes = __commonJS({
  "node_modules/mathsteps/lib/checks/canMultiplyLikeTermPolynomialNodes.js"(exports, module) {
    var Node = require_node2();
    function canMultiplyLikeTermPolynomialNodes(node) {
      if (!Node.Type.isOperator(node) || node.op !== "*") {
        return false;
      }
      const args = node.args;
      if (!args.every((n) => Node.PolynomialTerm.isPolynomialTerm(n))) {
        return false;
      }
      if (args.length === 1) {
        return false;
      }
      const polynomialTermList = node.args.map((n) => new Node.PolynomialTerm(n));
      if (!polynomialTermList.every((polyTerm) => !polyTerm.hasCoeff())) {
        return false;
      }
      const firstTerm = polynomialTermList[0];
      const restTerms = polynomialTermList.slice(1);
      return restTerms.every((term) => firstTerm.getSymbolName() === term.getSymbolName());
    }
    module.exports = canMultiplyLikeTermPolynomialNodes;
  }
});

// node_modules/mathsteps/lib/factor/ConstantFactors.js
var require_ConstantFactors = __commonJS({
  "node_modules/mathsteps/lib/factor/ConstantFactors.js"(exports, module) {
    var ConstantFactors = {};
    ConstantFactors.getPrimeFactors = function(number) {
      let factors = [];
      if (number < 0) {
        factors = [-1];
        factors = factors.concat(ConstantFactors.getPrimeFactors(-1 * number));
        return factors;
      }
      const root = Math.sqrt(number);
      let candidate = 2;
      if (number % 2) {
        candidate = 3;
        while (number % candidate && candidate <= root) {
          candidate = candidate + 2;
        }
      }
      if (candidate > root) {
        factors.push(number);
      } else {
        factors.push(candidate);
        factors = factors.concat(ConstantFactors.getPrimeFactors(number / candidate));
      }
      return factors;
    };
    ConstantFactors.getFactorPairs = function(number) {
      const factors = [];
      const bound = Math.floor(Math.sqrt(Math.abs(number)));
      for (var divisor = -bound; divisor <= bound; divisor++) {
        if (divisor === 0) {
          continue;
        }
        if (number % divisor === 0) {
          const quotient = number / divisor;
          factors.push([divisor, quotient]);
        }
      }
      return factors;
    };
    module.exports = ConstantFactors;
  }
});

// node_modules/mathsteps/lib/util/flattenOperands.js
var require_flattenOperands = __commonJS({
  "node_modules/mathsteps/lib/util/flattenOperands.js"(exports, module) {
    var evaluate = require_evaluate();
    var Negative = require_Negative();
    var Node = require_node2();
    function flattenOperands(node) {
      if (Node.MixedNumber.isMixedNumber(node)) {
        return node;
      }
      if (Node.Type.isConstant(node, true)) {
        const constNode = Node.Creator.constant(evaluate(node));
        if (node.changeGroup) {
          constNode.changeGroup = node.changeGroup;
        }
        return constNode;
      } else if (Node.Type.isOperator(node)) {
        if ("+-/*".includes(node.op)) {
          let parentOp;
          if (node.op === "/") {
            parentOp = "*";
          } else if (node.op === "-") {
            parentOp = "+";
          } else {
            parentOp = node.op;
          }
          return flattenSupportedOperation(node, parentOp);
        } else {
          node.args.forEach((child, i) => {
            node.args[i] = flattenOperands(child);
          });
        }
        return node;
      } else if (Node.Type.isParenthesis(node)) {
        node.content = flattenOperands(node.content);
        return node;
      } else if (Node.Type.isUnaryMinus(node)) {
        const arg = flattenOperands(node.args[0]);
        const flattenedNode = Negative.negate(arg, true);
        if (node.changeGroup) {
          flattenedNode.changeGroup = node.changeGroup;
        }
        return flattenedNode;
      } else if (Node.Type.isFunction(node) && node.fn.args) {
        const flattenedFn = flattenOperands(node.fn);
        const flattenedArg = flattenOperands(node.args[0]);
        const newNode = Node.Creator.operator(
          "*",
          [flattenedFn, Node.Creator.parenthesis(flattenedArg)]
        );
        return newNode;
      } else if (Node.Type.isFunction(node, "abs")) {
        node.args[0] = flattenOperands(node.args[0]);
        return node;
      } else if (Node.Type.isFunction(node, "nthRoot")) {
        node.args[0] = flattenOperands(node.args[0]);
        if (node.args[1]) {
          node.args[1] = flattenOperands(node.args[1]);
        }
        return node;
      } else {
        return node;
      }
    }
    function flattenSupportedOperation(node, parentOp) {
      const operands = getOperands(node, parentOp);
      if (operands.length === 1) {
        node = operands[0];
      } else {
        if (node.op === "/" && (operands.length > 2 || hasMultiplicationBesideDivision(node))) {
          node = Node.Creator.operator("*", operands);
        } else if (node.op === "-") {
          node = Node.Creator.operator("+", operands);
        } else {
          node.args = operands;
        }
        if (node.op === "*") {
          node.implicit = false;
        }
      }
      return node;
    }
    function getOperands(node, parentOp) {
      if (!Node.Type.isOperator(node)) {
        return [flattenOperands(node)];
      }
      switch (node.op) {
        case "*":
        case "/":
          if (parentOp !== "*") {
            return [flattenOperands(node)];
          }
          break;
        case "+":
        case "-":
          if (parentOp !== "+") {
            return [flattenOperands(node)];
          }
          break;
        default:
          return [flattenOperands(node)];
      }
      if (Node.PolynomialTerm.isPolynomialTerm(node, true)) {
        node.args.forEach((arg, i) => {
          node.args[i] = flattenOperands(node.args[i]);
        });
        return [node];
      } else if (parentOp === "*" && isPolynomialTermMultiplication(node)) {
        return maybeFlattenPolynomialTerm(node);
      } else if (parentOp === "*" && node.op === "/") {
        return flattenDivision(node);
      } else if (node.op === "-") {
        const secondOperand = node.args[1];
        const negativeSecondOperand = Negative.negate(secondOperand, true);
        const operands = [
          getOperands(node.args[0], parentOp),
          getOperands(negativeSecondOperand, parentOp)
        ];
        return [].concat.apply([], operands);
      } else {
        const operands = [];
        node.args.forEach((child) => {
          operands.push(getOperands(child, parentOp));
        });
        return [].concat.apply([], operands);
      }
    }
    function isPolynomialTermMultiplication(node) {
      if (node.op !== "*") {
        return false;
      }
      if (node.args.length !== 2) {
        return false;
      }
      const secondOperand = node.args[1];
      if (Node.PolynomialTerm.isPolynomialTerm(secondOperand)) {
        const polyNode = new Node.PolynomialTerm(secondOperand);
        return !polyNode.hasCoeff();
      } else {
        return false;
      }
    }
    function maybeFlattenPolynomialTerm(node) {
      const operands = getOperands(node.args[0], "*");
      const lastOperand = operands.pop();
      const nextOperand = flattenOperands(node.args[1]);
      if (Node.Type.isConstantOrConstantFraction(lastOperand)) {
        operands.push(
          Node.Creator.operator("*", [lastOperand, nextOperand], true)
        );
      } else {
        operands.push(lastOperand);
        operands.push(nextOperand);
      }
      return operands;
    }
    function flattenDivision(node) {
      let operands = getOperands(node.args[0], "*");
      if (operands.length === 1) {
        node.args[0] = operands.pop();
        node.args[1] = flattenOperands(node.args[1]);
        operands = [node];
      } else {
        const numerator = operands.pop();
        const denominator = flattenOperands(node.args[1]);
        const divisionNode = Node.Creator.operator("/", [numerator, denominator]);
        operands.push(divisionNode);
      }
      return operands;
    }
    function hasMultiplicationBesideDivision(node) {
      if (!Node.Type.isOperator(node)) {
        return false;
      }
      if (node.op === "*") {
        return true;
      }
      if (node.op !== "/") {
        return false;
      }
      return node.args.some(hasMultiplicationBesideDivision);
    }
    module.exports = flattenOperands;
  }
});

// node_modules/mathsteps/lib/util/print.js
var require_print2 = __commonJS({
  "node_modules/mathsteps/lib/util/print.js"(exports, module) {
    var clone = require_clone3();
    var flatten = require_flattenOperands();
    var Node = require_node2();
    function printAscii(node, showPlusMinus = false) {
      node = flatten(clone(node));
      let string = printTreeTraversal(node);
      if (!showPlusMinus) {
        string = string.replace(/\s*?\+\s*?\-\s*?/g, " - ");
      }
      return string;
    }
    function printTreeTraversal(node, parentNode) {
      if (Node.PolynomialTerm.isPolynomialTerm(node)) {
        const polyTerm = new Node.PolynomialTerm(node);
        if (polyTerm.hasFractionCoeff() && node.op !== "/") {
          const coeffTerm = polyTerm.getCoeffNode();
          const coeffStr = printTreeTraversal(coeffTerm);
          const nonCoeffTerm = Node.Creator.polynomialTerm(
            polyTerm.getSymbolNode(),
            polyTerm.exponent,
            null
          );
          const nonCoeffStr = printTreeTraversal(nonCoeffTerm);
          return `${coeffStr} ${nonCoeffStr}`;
        }
      }
      if (Node.Type.isIntegerFraction(node)) {
        return `${node.args[0]}/${node.args[1]}`;
      }
      if (Node.Type.isOperator(node)) {
        if (node.op === "/" && Node.Type.isOperator(node.args[1])) {
          return `${printTreeTraversal(node.args[0])} / (${printTreeTraversal(node.args[1])})`;
        }
        let opString = "";
        switch (node.op) {
          case "+":
          case "-":
            opString = ` ${node.op} `;
            break;
          case "*":
            if (node.implicit) {
              break;
            }
            opString = ` ${node.op} `;
            break;
          case "/":
            if (Node.Type.isConstantFraction(node, true)) {
              opString = `${node.op}`;
            } else {
              opString = ` ${node.op} `;
            }
            break;
          case "^":
            opString = `${node.op}`;
            break;
        }
        let str = node.args.map((arg) => printTreeTraversal(arg, node)).join(opString);
        if (parentNode && Node.Type.isOperator(parentNode) && node.op && parentNode.op && "*/^".indexOf(parentNode.op) >= 0 && "+-".indexOf(node.op) >= 0) {
          str = `(${str})`;
        }
        return str;
      } else if (Node.Type.isParenthesis(node)) {
        return `(${printTreeTraversal(node.content)})`;
      } else if (Node.Type.isUnaryMinus(node)) {
        if (Node.Type.isOperator(node.args[0]) && "*/^".indexOf(node.args[0].op) === -1 && !Node.PolynomialTerm.isPolynomialTerm(node)) {
          return `-(${printTreeTraversal(node.args[0])})`;
        } else {
          return `-${printTreeTraversal(node.args[0])}`;
        }
      } else {
        return node.toString();
      }
    }
    function printLatex(node, showPlusMinus = false) {
      let nodeTex = node.toTex({ implicit: "hide" });
      if (!showPlusMinus) {
        nodeTex = nodeTex.replace(/\s*?\+\s*?\-\s*?/g, " - ");
      }
      return nodeTex;
    }
    module.exports = {
      ascii: printAscii,
      latex: printLatex
    };
  }
});

// node_modules/mathsteps/lib/simplifyExpression/functionsSearch/nthRoot.js
var require_nthRoot3 = __commonJS({
  "node_modules/mathsteps/lib/simplifyExpression/functionsSearch/nthRoot.js"(exports, module) {
    var clone = require_clone3();
    var math = require_mathjs();
    var ChangeTypes = require_ChangeTypes();
    var ConstantFactors = require_ConstantFactors();
    var Negative = require_Negative();
    var Node = require_node2();
    var print2 = require_print2();
    function nthRoot(node) {
      if (!Node.Type.isFunction(node, "nthRoot")) {
        return Node.Status.noChange(node);
      }
      const radicandNode = getRadicandNode(node);
      if (Node.Type.isOperator(radicandNode)) {
        if (radicandNode.op === "^") {
          return nthRootExponent(node);
        } else if (radicandNode.op === "*") {
          return nthRootMultiplication(node);
        }
      } else if (Node.Type.isConstant(radicandNode)) {
        return nthRootConstant(node);
      }
      return Node.Status.noChange(node);
    }
    function nthRootExponent(node) {
      let newNode = clone(node);
      const radicandNode = getRadicandNode(node);
      const rootNode = getRootNode(node);
      const baseNode = radicandNode.args[0];
      const exponentNode = Node.Type.isParenthesis(radicandNode.args[1]) ? radicandNode.args[1].content : radicandNode.args[1];
      if (rootNode.equals(exponentNode)) {
        newNode = baseNode;
        return Node.Status.nodeChanged(
          ChangeTypes.CANCEL_EXPONENT_AND_ROOT,
          node,
          newNode
        );
      } else if (Node.Type.isConstant(rootNode) && Node.Type.isConstant(exponentNode)) {
        const rootValue = parseFloat(rootNode.value);
        const exponentValue = parseFloat(exponentNode.value);
        if (rootValue % exponentValue === 0) {
          const newRootValue = rootValue / exponentValue;
          const newRootNode = Node.Creator.constant(newRootValue);
          newNode = Node.Creator.nthRoot(baseNode, newRootNode);
          return Node.Status.nodeChanged(
            ChangeTypes.CANCEL_EXPONENT,
            node,
            newNode
          );
        } else if (exponentValue % rootValue === 0) {
          const newExponentValue = exponentValue / rootValue;
          const newExponentNode = Node.Creator.constant(newExponentValue);
          newNode = Node.Creator.operator("^", [baseNode, newExponentNode]);
          return Node.Status.nodeChanged(
            ChangeTypes.CANCEL_ROOT,
            node,
            newNode
          );
        }
      }
      return Node.Status.noChange(node);
    }
    function nthRootMultiplication(node) {
      let newNode = clone(node);
      const rootNode = getRootNode(node);
      const substeps = [];
      let status;
      if (Node.Type.isConstant(rootNode) && !Negative.isNegative(rootNode)) {
        status = factorMultiplicands(newNode);
        if (status.hasChanged()) {
          substeps.push(status);
          newNode = Node.Status.resetChangeGroups(status.newNode);
        }
        status = groupTermsByRoot(newNode);
        if (status.hasChanged()) {
          substeps.push(status);
          newNode = Node.Status.resetChangeGroups(status.newNode);
        }
        status = convertMultiplicationToExponent(newNode);
        if (status.hasChanged()) {
          substeps.push(status);
          newNode = Node.Status.resetChangeGroups(status.newNode);
          if (newNode.args[0].op === "^") {
            status = nthRootExponent(newNode);
            substeps.push(status);
            return Node.Status.nodeChanged(
              ChangeTypes.NTH_ROOT_VALUE,
              node,
              status.newNode,
              true,
              substeps
            );
          }
        }
      }
      status = distributeNthRoot(newNode);
      substeps.push(status);
      newNode = Node.Status.resetChangeGroups(status.newNode);
      status = evaluateNthRootForChildren(newNode);
      if (status.hasChanged()) {
        substeps.push(status);
        newNode = Node.Status.resetChangeGroups(status.newNode);
        status = combineRoots(newNode);
        if (status.hasChanged()) {
          substeps.push(status);
          newNode = Node.Status.resetChangeGroups(status.newNode);
        }
        return Node.Status.nodeChanged(
          ChangeTypes.NTH_ROOT_VALUE,
          node,
          newNode,
          true,
          substeps
        );
      }
      return Node.Status.noChange(node);
    }
    function factorMultiplicands(node) {
      const newNode = clone(node);
      const radicandNode = getRadicandNode(node);
      let children = [];
      let factored = false;
      radicandNode.args.forEach((child) => {
        if (Node.PolynomialTerm.isPolynomialTerm(child)) {
          const polyTerm = new Node.PolynomialTerm(child);
          const coeffNode = polyTerm.getCoeffNode();
          const polyTermNoCoeff = Node.Creator.polynomialTerm(
            polyTerm.getSymbolNode(),
            polyTerm.getExponentNode(),
            null
          );
          if (coeffNode) {
            const factorNodes = getFactorNodes(coeffNode);
            if (factorNodes.length > 1) {
              factored = true;
            }
            children = children.concat(factorNodes);
          }
          children.push(polyTermNoCoeff);
        } else {
          const factorNodes = getFactorNodes(child);
          if (factorNodes.length > 1) {
            factored = true;
          }
          children = children.concat(factorNodes);
        }
      });
      if (factored) {
        newNode.args[0] = Node.Creator.operator("*", children);
        return Node.Status.nodeChanged(
          ChangeTypes.FACTOR_INTO_PRIMES,
          node,
          newNode
        );
      }
      return Node.Status.noChange(node);
    }
    function getFactorNodes(node) {
      if (Node.Type.isConstant(node) && !Negative.isNegative(node)) {
        const value = parseFloat(node.value);
        const factors = ConstantFactors.getPrimeFactors(value);
        const factorNodes = factors.map(Node.Creator.constant);
        return factorNodes;
      }
      return [node];
    }
    function groupTermsByRoot(node) {
      let newNode = clone(node);
      const radicandNode = getRadicandNode(node);
      const rootNode = getRootNode(node);
      const rootValue = parseFloat(rootNode.value);
      radicandNode.args.sort(sortNodes);
      const termStrings = radicandNode.args.map((arg) => print2.ascii(arg));
      if ([...new Set(termStrings)].length === termStrings.length) {
        return Node.Status.noChange(node);
      }
      const count = {};
      radicandNode.args.forEach((arg) => {
        const argString = print2.ascii(arg);
        count[argString] ? count[argString]++ : count[argString] = 1;
      });
      const termString = Object.keys(count);
      const newTermGroups = termString.map((key) => {
        let leftover = count[key];
        const term = math.parse(key);
        const times = rootValue;
        const args = [];
        while (leftover - times > 0) {
          leftover -= times;
          args.push(Node.Creator.parenthesis(
            Node.Creator.operator("*", Array(times).fill(term))
          ));
        }
        const remainder = leftover === 1 ? term : Node.Creator.parenthesis(
          Node.Creator.operator("*", Array(leftover).fill(term))
        );
        args.push(remainder);
        return args;
      });
      const newTerms = newTermGroups.reduce((acc, val) => acc.concat(val), []);
      const newBase = Node.Creator.operator("*", newTerms);
      newNode = Node.Creator.nthRoot(newBase, rootNode);
      return Node.Status.nodeChanged(
        ChangeTypes.GROUP_TERMS_BY_ROOT,
        node,
        newNode
      );
    }
    function convertMultiplicationToExponent(node) {
      const newNode = clone(node);
      const radicandNode = getRadicandNode(node);
      if (Node.Type.isParenthesis(radicandNode)) {
        const child = radicandNode.content;
        if (isMultiplicationOfEqualNodes(child)) {
          const baseNode = child.args[0];
          const exponentNode = Node.Creator.constant(child.args.length);
          newNode.args[0] = Node.Creator.operator("^", [baseNode, exponentNode]);
          return Node.Status.nodeChanged(
            ChangeTypes.CONVERT_MULTIPLICATION_TO_EXPONENT,
            node,
            newNode
          );
        }
      } else if (Node.Type.isOperator(radicandNode, "*")) {
        const children = [];
        radicandNode.args.forEach((child) => {
          if (Node.Type.isParenthesis(child)) {
            const grandChild = child.content;
            if (isMultiplicationOfEqualNodes(grandChild)) {
              const baseNode = grandChild.args[0];
              const exponentNode = Node.Creator.constant(grandChild.args.length);
              children.push(Node.Creator.operator("^", [baseNode, exponentNode]));
              return;
            }
          }
          children.push(child);
        });
        newNode.args[0] = Node.Creator.operator("*", children);
        return Node.Status.nodeChanged(
          ChangeTypes.CONVERT_MULTIPLICATION_TO_EXPONENT,
          node,
          newNode
        );
      }
      return Node.Status.noChange(node);
    }
    function distributeNthRoot(node) {
      let newNode = clone(node);
      const radicandNode = getRadicandNode(node);
      const rootNode = getRootNode(node);
      const children = [];
      for (let i = 0; i < radicandNode.args.length; i++) {
        const child = radicandNode.args[i];
        children.push(Node.Creator.nthRoot(child, rootNode));
      }
      newNode = Node.Creator.operator("*", children);
      return Node.Status.nodeChanged(
        ChangeTypes.DISTRIBUTE_NTH_ROOT,
        node,
        newNode
      );
    }
    function evaluateNthRootForChildren(node) {
      const newNode = clone(node);
      const substeps = [];
      for (let i = 0; i < newNode.args.length; i++) {
        const child = newNode.args[i];
        const childNodeStatus = nthRoot(child);
        if (childNodeStatus.hasChanged()) {
          newNode.args[i] = childNodeStatus.newNode;
          substeps.push(Node.Status.childChanged(newNode, childNodeStatus, i));
        }
      }
      if (substeps.length === 0) {
        return Node.Status.noChange(node);
      } else if (substeps.length === 1) {
        return substeps[0];
      } else {
        return Node.Status.nodeChanged(
          ChangeTypes.EVALUATE_DISTRIBUTED_NTH_ROOT,
          node,
          newNode,
          true,
          substeps
        );
      }
    }
    function combineRoots(node) {
      let newNode = clone(node);
      let rootNode;
      const children = [];
      const radicandArgs = [];
      for (let i = 0; i < newNode.args.length; i++) {
        const child = newNode.args[i];
        if (Node.Type.isFunction(child, "nthRoot")) {
          radicandArgs.push(child.args[0]);
          rootNode = getRootNode(child);
        } else {
          children.push(child);
        }
      }
      if (children.length > 0) {
        if (radicandArgs.length > 0) {
          const radicandNode = radicandArgs.length === 1 ? radicandArgs[0] : Node.Creator.operator("*", radicandArgs);
          children.push(Node.Creator.nthRoot(radicandNode, rootNode));
        }
        newNode = Node.Creator.operator("*", children);
        if (!newNode.equals(node)) {
          return Node.Status.nodeChanged(
            ChangeTypes.COMBINE_UNDER_ROOT,
            node,
            newNode
          );
        }
      }
      return Node.Status.noChange(node);
    }
    function nthRootConstant(node) {
      let newNode = clone(node);
      const radicandNode = getRadicandNode(node);
      const rootNode = getRootNode(node);
      if (Negative.isNegative(radicandNode)) {
        return Node.Status.noChange(node);
      } else if (!Node.Type.isConstant(rootNode) || Negative.isNegative(rootNode)) {
        return Node.Status.noChange(node);
      }
      const radicandValue = parseFloat(radicandNode.value);
      const rootValue = parseFloat(rootNode.value);
      const nthRootValue = math.nthRoot(radicandValue, rootValue);
      const roundedNthRootValue = math.round(nthRootValue);
      if (math.pow(roundedNthRootValue, rootValue) === radicandValue) {
        newNode = Node.Creator.constant(roundedNthRootValue);
        return Node.Status.nodeChanged(
          ChangeTypes.NTH_ROOT_VALUE,
          node,
          newNode
        );
      } else {
        const factors = ConstantFactors.getPrimeFactors(radicandValue);
        if (factors.length > 1) {
          let substeps = [];
          const factorNodes = factors.map(Node.Creator.constant);
          newNode.args[0] = Node.Creator.operator("*", factorNodes);
          substeps.push(Node.Status.nodeChanged(
            ChangeTypes.FACTOR_INTO_PRIMES,
            node,
            newNode
          ));
          const nodeStatus = nthRootMultiplication(newNode);
          if (nodeStatus.hasChanged()) {
            substeps = substeps.concat(nodeStatus.substeps);
            newNode = nodeStatus.newNode;
            return Node.Status.nodeChanged(
              ChangeTypes.NTH_ROOT_VALUE,
              node,
              newNode,
              true,
              substeps
            );
          }
        }
      }
      return Node.Status.noChange(node);
    }
    function getRootNode(node) {
      if (!Node.Type.isFunction(node, "nthRoot")) {
        throw Error("Expected nthRoot");
      }
      return node.args.length === 2 ? node.args[1] : Node.Creator.constant(2);
    }
    function getRadicandNode(node) {
      if (!Node.Type.isFunction(node, "nthRoot")) {
        throw Error("Expected nthRoot");
      }
      return node.args[0];
    }
    function sortNodes(a, b) {
      if (Node.Type.isConstant(a) && Node.Type.isConstant(b)) {
        return parseFloat(a.value) - parseFloat(b.value);
      } else if (Node.Type.isConstant(a)) {
        return -1;
      } else if (Node.Type.isConstant(b)) {
        return 1;
      }
      return 0;
    }
    function isMultiplicationOfEqualNodes(node) {
      if (!Node.Type.isOperator(node) || node.op !== "*") {
        return false;
      }
      const termStrings = node.args.map(print2.ascii);
      return [...new Set(termStrings)].length === 1;
    }
    module.exports = {
      getRadicandNode,
      getRootNode,
      nthRoot
    };
  }
});

// node_modules/mathsteps/lib/checks/canMultiplyLikeTermsNthRoots.js
var require_canMultiplyLikeTermsNthRoots = __commonJS({
  "node_modules/mathsteps/lib/checks/canMultiplyLikeTermsNthRoots.js"(exports, module) {
    var Node = require_node2();
    var NthRoot = require_nthRoot3();
    function canMultiplyLikeTermsNthRoots(node) {
      if (!Node.Type.isOperator(node, "*") || !node.args.every((term) => Node.Type.isFunction(term, "nthRoot"))) {
        return false;
      }
      const firstTerm = node.args[0];
      const rootNode = NthRoot.getRootNode(firstTerm);
      return node.args.every(
        (term) => NthRoot.getRootNode(term).equals(rootNode)
      );
    }
    module.exports = canMultiplyLikeTermsNthRoots;
  }
});

// node_modules/mathsteps/lib/checks/canRearrangeCoefficient.js
var require_canRearrangeCoefficient = __commonJS({
  "node_modules/mathsteps/lib/checks/canRearrangeCoefficient.js"(exports, module) {
    var Node = require_node2();
    function canRearrangeCoefficient(node) {
      if (node.op !== "*" || node.implicit) {
        return false;
      }
      if (node.args.length !== 2) {
        return false;
      }
      if (!Node.Type.isConstantOrConstantFraction(node.args[1])) {
        return false;
      }
      if (!Node.PolynomialTerm.isPolynomialTerm(node.args[0])) {
        return false;
      }
      const polyNode = new Node.PolynomialTerm(node.args[0]);
      return !polyNode.hasCoeff();
    }
    module.exports = canRearrangeCoefficient;
  }
});

// node_modules/mathsteps/lib/checks/canSimplifyPolynomialTerms.js
var require_canSimplifyPolynomialTerms = __commonJS({
  "node_modules/mathsteps/lib/checks/canSimplifyPolynomialTerms.js"(exports, module) {
    var canAddLikeTerms = require_canAddLikeTerms();
    var canMultiplyLikeTermPolynomialNodes = require_canMultiplyLikeTermPolynomialNodes();
    var canRearrangeCoefficient = require_canRearrangeCoefficient();
    function canSimplifyPolynomialTerms(node) {
      return canAddLikeTerms.canAddLikeTermPolynomialNodes(node) || canMultiplyLikeTermPolynomialNodes(node) || canRearrangeCoefficient(node);
    }
    module.exports = canSimplifyPolynomialTerms;
  }
});

// node_modules/mathsteps/lib/checks/hasUnsupportedNodes.js
var require_hasUnsupportedNodes = __commonJS({
  "node_modules/mathsteps/lib/checks/hasUnsupportedNodes.js"(exports, module) {
    var Node = require_node2();
    var resolvesToConstant = require_resolvesToConstant();
    function hasUnsupportedNodes(node) {
      if (Node.Type.isParenthesis(node)) {
        return hasUnsupportedNodes(node.content);
      } else if (Node.Type.isUnaryMinus(node)) {
        return hasUnsupportedNodes(node.args[0]);
      } else if (Node.Type.isOperator(node)) {
        return node.args.some(hasUnsupportedNodes);
      } else if (Node.Type.isSymbol(node) || Node.Type.isConstant(node)) {
        return false;
      } else if (Node.Type.isFunction(node, "abs")) {
        if (node.args.length !== 1) {
          return true;
        }
        if (node.args.some(hasUnsupportedNodes)) {
          return true;
        }
        return !resolvesToConstant(node.args[0]);
      } else if (Node.Type.isFunction(node, "nthRoot")) {
        return node.args.some(hasUnsupportedNodes) || node.args.length < 1;
      } else {
        return true;
      }
    }
    module.exports = hasUnsupportedNodes;
  }
});

// node_modules/mathsteps/lib/Symbols.js
var require_Symbols = __commonJS({
  "node_modules/mathsteps/lib/Symbols.js"(exports, module) {
    var Node = require_node2();
    var Symbols = {};
    Symbols.getSymbolsInEquation = function(equation) {
      const leftSymbols = Symbols.getSymbolsInExpression(equation.leftNode);
      const rightSymbols = Symbols.getSymbolsInExpression(equation.rightNode);
      const symbols = /* @__PURE__ */ new Set([...leftSymbols, ...rightSymbols]);
      return symbols;
    };
    Symbols.getSymbolsInExpression = function(expression) {
      const symbolNodes = expression.filter((node) => node.isSymbolNode);
      const symbols = symbolNodes.map((node) => node.name);
      const symbolSet = new Set(symbols);
      return symbolSet;
    };
    Symbols.getLastSymbolTerm = function(node, symbolName) {
      if (isSymbolTerm(node, symbolName)) {
        return node;
      } else if (Node.Type.isOperator(node, "+")) {
        for (let i = node.args.length - 1; i >= 0; i--) {
          const child = node.args[i];
          if (Node.Type.isOperator(child, "+")) {
            return Symbols.getLastSymbolTerm(child, symbolName);
          } else if (isSymbolTerm(child, symbolName)) {
            return child;
          }
        }
      }
      return null;
    };
    Symbols.getLastNonSymbolTerm = function(node, symbolName) {
      if (isPolynomialTermWithSymbol(node, symbolName)) {
        return new Node.PolynomialTerm(node).getCoeffNode();
      } else if (hasDenominatorSymbol(node, symbolName)) {
        return null;
      } else if (Node.Type.isOperator(node)) {
        for (let i = node.args.length - 1; i >= 0; i--) {
          const child = node.args[i];
          if (Node.Type.isOperator(child, "+")) {
            return Symbols.getLastNonSymbolTerm(child, symbolName);
          } else if (!isSymbolTerm(child, symbolName)) {
            return child;
          }
        }
      }
      return null;
    };
    Symbols.getLastDenominatorWithSymbolTerm = function(node, symbolName) {
      if (hasDenominatorSymbol(node, symbolName)) {
        return node.args[1];
      } else if (Node.Type.isOperator(node, "+")) {
        for (let i = node.args.length - 1; i >= 0; i--) {
          const child = node.args[i];
          if (Node.Type.isOperator(child, "+")) {
            return Symbols.getLastDenominatorWithSymbolTerm(child, symbolName);
          } else if (hasDenominatorSymbol(child, symbolName)) {
            return child.args[1];
          }
        }
      }
      return null;
    };
    function isSymbolTerm(node, symbolName) {
      return isPolynomialTermWithSymbol(node, symbolName) || hasDenominatorSymbol(node, symbolName);
    }
    function isPolynomialTermWithSymbol(node, symbolName) {
      if (Node.PolynomialTerm.isPolynomialTerm(node)) {
        const polyTerm = new Node.PolynomialTerm(node);
        if (polyTerm.getSymbolName() === symbolName) {
          return true;
        }
      }
      return false;
    }
    function hasDenominatorSymbol(node, symbolName) {
      if (Node.Type.isOperator(node) && node.op === "/") {
        const allSymbols = Symbols.getSymbolsInExpression(node.args[1]);
        return allSymbols.has(symbolName);
      }
      return false;
    }
    module.exports = Symbols;
  }
});

// node_modules/mathsteps/lib/checks/isQuadratic.js
var require_isQuadratic = __commonJS({
  "node_modules/mathsteps/lib/checks/isQuadratic.js"(exports, module) {
    var Node = require_node2();
    var Symbols = require_Symbols();
    function isQuadratic(node) {
      if (!Node.Type.isOperator(node, "+")) {
        return false;
      }
      if (node.args.length > 3) {
        return false;
      }
      const symbolSet = Symbols.getSymbolsInExpression(node);
      if (symbolSet.size !== 1) {
        return false;
      }
      const secondDegreeTerms = node.args.filter(isPolynomialTermOfDegree(2));
      const firstDegreeTerms = node.args.filter(isPolynomialTermOfDegree(1));
      const constantTerms = node.args.filter(Node.Type.isConstant);
      if (secondDegreeTerms.length !== 1 || firstDegreeTerms.length > 1 || constantTerms.length > 1) {
        return false;
      }
      if (secondDegreeTerms.length + firstDegreeTerms.length + constantTerms.length !== node.args.length) {
        return false;
      }
      return true;
    }
    function isPolynomialTermOfDegree(degree) {
      return function(node) {
        if (Node.PolynomialTerm.isPolynomialTerm(node)) {
          const polyTerm = new Node.PolynomialTerm(node);
          const exponent = polyTerm.getExponentNode(true);
          return exponent && parseFloat(exponent.value) === degree;
        }
        return false;
      };
    }
    module.exports = isQuadratic;
  }
});

// node_modules/mathsteps/lib/checks/index.js
var require_checks = __commonJS({
  "node_modules/mathsteps/lib/checks/index.js"(exports, module) {
    var canAddLikeTerms = require_canAddLikeTerms();
    var canFindRoots = require_canFindRoots();
    var canMultiplyLikeTermConstantNodes = require_canMultiplyLikeTermConstantNodes();
    var canMultiplyLikeTermPolynomialNodes = require_canMultiplyLikeTermPolynomialNodes();
    var canMultiplyLikeTermsNthRoots = require_canMultiplyLikeTermsNthRoots();
    var canRearrangeCoefficient = require_canRearrangeCoefficient();
    var canSimplifyPolynomialTerms = require_canSimplifyPolynomialTerms();
    var hasUnsupportedNodes = require_hasUnsupportedNodes();
    var isQuadratic = require_isQuadratic();
    var resolvesToConstant = require_resolvesToConstant();
    module.exports = {
      canFindRoots,
      canAddLikeTerms,
      canMultiplyLikeTermConstantNodes,
      canMultiplyLikeTermPolynomialNodes,
      canMultiplyLikeTermsNthRoots,
      canRearrangeCoefficient,
      canSimplifyPolynomialTerms,
      hasUnsupportedNodes,
      isQuadratic,
      resolvesToConstant
    };
  }
});

// node_modules/mathsteps/lib/factor/factorQuadratic.js
var require_factorQuadratic = __commonJS({
  "node_modules/mathsteps/lib/factor/factorQuadratic.js"(exports, module) {
    var math = require_mathjs();
    var ConstantFactors = require_ConstantFactors();
    var ChangeTypes = require_ChangeTypes();
    var evaluate = require_evaluate();
    var Negative = require_Negative();
    var Node = require_node2();
    var FACTOR_FUNCTIONS = [
      // factor just the symbol e.g. x^2 + 2x -> x(x + 2)
      factorSymbol,
      // factor difference of squares e.g. x^2 - 4
      factorDifferenceOfSquares,
      // factor perfect square e.g. x^2 + 2x + 1
      factorPerfectSquare,
      // factor sum product rule e.g. x^2 + 3x + 2
      factorSumProductRule
    ];
    function factorQuadratic(node) {
      let symbol, aValue = 0, bValue = 0, cValue = 0;
      for (const term of node.args) {
        if (Node.Type.isConstant(term)) {
          cValue = evaluate(term);
        } else if (Node.PolynomialTerm.isPolynomialTerm(term)) {
          const polyTerm = new Node.PolynomialTerm(term);
          const exponent = polyTerm.getExponentNode(true);
          if (exponent.value === "2") {
            symbol = polyTerm.getSymbolNode();
            aValue = polyTerm.getCoeffValue();
          } else if (exponent.value === "1") {
            bValue = polyTerm.getCoeffValue();
          } else {
            return Node.Status.noChange(node);
          }
        } else {
          return Node.Status.noChange(node);
        }
      }
      if (!symbol || !aValue) {
        return Node.Status.noChange(node);
      }
      let negate = false;
      if (aValue < 0) {
        negate = true;
        aValue = -aValue;
        bValue = -bValue;
        cValue = -cValue;
      }
      for (let i = 0; i < FACTOR_FUNCTIONS.length; i++) {
        const nodeStatus = FACTOR_FUNCTIONS[i](node, symbol, aValue, bValue, cValue, negate);
        if (nodeStatus.hasChanged()) {
          return nodeStatus;
        }
      }
      return Node.Status.noChange(node);
    }
    function factorSymbol(node, symbol, aValue, bValue, cValue, negate) {
      if (!bValue || cValue) {
        return Node.Status.noChange(node);
      }
      const gcd = math.gcd(aValue, bValue);
      const gcdNode = Node.Creator.constant(gcd);
      const aNode = Node.Creator.constant(aValue / gcd);
      const bNode = Node.Creator.constant(bValue / gcd);
      const factoredNode = Node.Creator.polynomialTerm(symbol, null, gcdNode);
      const polyTerm = Node.Creator.polynomialTerm(symbol, null, aNode);
      const paren = Node.Creator.parenthesis(
        Node.Creator.operator("+", [polyTerm, bNode])
      );
      let newNode = Node.Creator.operator("*", [factoredNode, paren], true);
      if (negate) {
        newNode = Negative.negate(newNode);
      }
      return Node.Status.nodeChanged(ChangeTypes.FACTOR_SYMBOL, node, newNode);
    }
    function factorDifferenceOfSquares(node, symbol, aValue, bValue, cValue, negate) {
      if (bValue || !cValue) {
        return Node.Status.noChange(node);
      }
      const gcd = math.gcd(aValue, cValue);
      aValue = aValue / gcd;
      cValue = cValue / gcd;
      const aRootValue = Math.sqrt(Math.abs(aValue));
      const cRootValue = Math.sqrt(Math.abs(cValue));
      if (Number.isInteger(aRootValue) && Number.isInteger(cRootValue) && cValue < 0) {
        const aRootNode = Node.Creator.constant(aRootValue);
        const cRootNode = Node.Creator.constant(cRootValue);
        const polyTerm = Node.Creator.polynomialTerm(symbol, null, aRootNode);
        const firstParen = Node.Creator.parenthesis(
          Node.Creator.operator("+", [polyTerm, cRootNode])
        );
        const secondParen = Node.Creator.parenthesis(
          Node.Creator.operator("-", [polyTerm, cRootNode])
        );
        let newNode = Node.Creator.operator("*", [firstParen, secondParen], true);
        if (gcd !== 1) {
          const gcdNode = Node.Creator.constant(gcd);
          newNode = Node.Creator.operator("*", [gcdNode, newNode], true);
        }
        if (negate) {
          newNode = Negative.negate(newNode);
        }
        return Node.Status.nodeChanged(
          ChangeTypes.FACTOR_DIFFERENCE_OF_SQUARES,
          node,
          newNode
        );
      }
      return Node.Status.noChange(node);
    }
    function factorPerfectSquare(node, symbol, aValue, bValue, cValue, negate) {
      if (!bValue || !cValue) {
        return Node.Status.noChange(node);
      }
      const gcd = math.gcd(aValue, bValue, cValue);
      aValue = aValue / gcd;
      cValue = cValue / gcd;
      const aRootValue = Math.sqrt(Math.abs(aValue));
      let cRootValue = Math.sqrt(Math.abs(cValue));
      if (bValue < 0) {
        cRootValue = cRootValue * -1;
      }
      const perfectProduct = 2 * aRootValue * cRootValue;
      if (Number.isInteger(aRootValue) && Number.isInteger(cRootValue) && bValue / gcd === perfectProduct) {
        const aRootNode = Node.Creator.constant(aRootValue);
        const cRootNode = Node.Creator.constant(cRootValue);
        const polyTerm = Node.Creator.polynomialTerm(symbol, null, aRootNode);
        const paren = Node.Creator.parenthesis(
          Node.Creator.operator("+", [polyTerm, cRootNode])
        );
        const exponent = Node.Creator.constant(2);
        let newNode = Node.Creator.operator("^", [paren, exponent]);
        if (gcd !== 1) {
          const gcdNode = Node.Creator.constant(gcd);
          newNode = Node.Creator.operator("*", [gcdNode, newNode], true);
        }
        if (negate) {
          newNode = Negative.negate(newNode);
        }
        return Node.Status.nodeChanged(
          ChangeTypes.FACTOR_PERFECT_SQUARE,
          node,
          newNode
        );
      }
      return Node.Status.noChange(node);
    }
    function factorSumProductRule(node, symbol, aValue, bValue, cValue, negate) {
      let newNode;
      if (bValue && cValue) {
        const gcd = math.gcd(aValue, bValue, cValue);
        const gcdNode = Node.Creator.constant(gcd);
        aValue = aValue / gcd;
        bValue = bValue / gcd;
        cValue = cValue / gcd;
        const product = aValue * cValue;
        const factorPairs = ConstantFactors.getFactorPairs(product, true);
        for (const pair of factorPairs) {
          if (pair[0] + pair[1] === bValue) {
            const substeps = [];
            let status;
            const a = Node.Creator.constant(aValue);
            const b = Node.Creator.constant(bValue);
            const c = Node.Creator.constant(cValue);
            const ax2 = Node.Creator.polynomialTerm(symbol, Node.Creator.constant(2), a);
            const bx = Node.Creator.polynomialTerm(symbol, null, b);
            if (negate) {
              newNode = Node.Creator.operator("+", [ax2, bx, c], true);
              newNode = Negative.negate(newNode);
              status = Node.Status.nodeChanged(
                ChangeTypes.REARRANGE_COEFF,
                node,
                newNode
              );
              substeps.push(status);
              newNode = Node.Status.resetChangeGroups(status.newNode);
            }
            const pValue = pair[0];
            const qValue = pair[1];
            const p = Node.Creator.constant(pValue);
            const q = Node.Creator.constant(qValue);
            const px = Node.Creator.polynomialTerm(symbol, null, p);
            const qx = Node.Creator.polynomialTerm(symbol, null, q);
            newNode = Node.Creator.operator("+", [ax2, px, qx, c], true);
            if (negate) {
              newNode = Negative.negate(newNode);
            }
            status = Node.Status.nodeChanged(
              ChangeTypes.BREAK_UP_TERM,
              node,
              newNode
            );
            substeps.push(status);
            newNode = Node.Status.resetChangeGroups(status.newNode);
            const firstTerm = Node.Creator.parenthesis(
              Node.Creator.operator("+", [ax2, px])
            );
            const secondTerm = Node.Creator.parenthesis(
              Node.Creator.operator("+", [qx, c])
            );
            newNode = Node.Creator.operator("+", [firstTerm, secondTerm], true);
            if (negate) {
              newNode = Negative.negate(newNode);
            }
            status = Node.Status.nodeChanged(
              ChangeTypes.COLLECT_LIKE_TERMS,
              node,
              newNode
            );
            substeps.push(status);
            newNode = Node.Status.resetChangeGroups(status.newNode);
            const u = Node.Creator.constant(math.gcd(aValue, pValue));
            const r = Node.Creator.constant(aValue / u);
            const s = Node.Creator.constant(pValue / u);
            const ux = Node.Creator.polynomialTerm(symbol, null, u);
            const rx = Node.Creator.polynomialTerm(symbol, null, r);
            const firstParen = Node.Creator.parenthesis(
              Node.Creator.operator("+", [rx, s])
            );
            const firstFactoredGroup = Node.Creator.operator("*", [ux, firstParen], true);
            newNode = Node.Creator.operator("+", [firstFactoredGroup, secondTerm], true);
            if (negate) {
              newNode = Negative.negate(newNode);
            }
            status = Node.Status.nodeChanged(
              ChangeTypes.FACTOR_SYMBOL,
              node,
              newNode
            );
            substeps.push(status);
            newNode = Node.Status.resetChangeGroups(status.newNode);
            let vValue = math.gcd(cValue, qValue);
            if (qValue < 0) {
              vValue = vValue * -1;
            }
            const v = Node.Creator.constant(vValue);
            const secondParen = Node.Creator.parenthesis(
              Node.Creator.operator("+", [ux, v])
            );
            const secondFactoredGroup = Node.Creator.operator("*", [v, firstParen], true);
            newNode = Node.Creator.operator("+", [firstFactoredGroup, secondFactoredGroup], true);
            if (negate) {
              newNode = Negative.negate(newNode);
            }
            status = Node.Status.nodeChanged(
              ChangeTypes.FACTOR_SYMBOL,
              node,
              newNode
            );
            substeps.push(status);
            newNode = Node.Status.resetChangeGroups(status.newNode);
            if (gcd === 1) {
              newNode = Node.Creator.operator(
                "*",
                [firstParen, secondParen],
                true
              );
            } else {
              newNode = Node.Creator.operator(
                "*",
                [gcdNode, firstParen, secondParen],
                true
              );
            }
            if (negate) {
              newNode = Negative.negate(newNode);
            }
            status = Node.Status.nodeChanged(
              ChangeTypes.FACTOR_SUM_PRODUCT_RULE,
              node,
              newNode
            );
            substeps.push(status);
            newNode = Node.Status.resetChangeGroups(status.newNode);
            return Node.Status.nodeChanged(
              ChangeTypes.FACTOR_SUM_PRODUCT_RULE,
              node,
              newNode,
              true,
              substeps
            );
          }
        }
      }
      return Node.Status.noChange(node);
    }
    module.exports = factorQuadratic;
  }
});

// node_modules/mathsteps/lib/util/Util.js
var require_Util = __commonJS({
  "node_modules/mathsteps/lib/util/Util.js"(exports, module) {
    var Util = {};
    Util.appendToArrayInObject = function(dict, key, value) {
      if (dict[key]) {
        dict[key].push(value);
      } else {
        dict[key] = [value];
      }
      return dict;
    };
    module.exports = Util;
  }
});

// node_modules/mathsteps/lib/simplifyExpression/collectAndCombineSearch/LikeTermCollector.js
var require_LikeTermCollector = __commonJS({
  "node_modules/mathsteps/lib/simplifyExpression/collectAndCombineSearch/LikeTermCollector.js"(exports, module) {
    var clone = require_clone3();
    var print2 = require_print2();
    var ChangeTypes = require_ChangeTypes();
    var Node = require_node2();
    var NthRoot = require_nthRoot3();
    var Util = require_Util();
    var CONSTANT = "constant";
    var CONSTANT_FRACTION = "constantFraction";
    var NTH_ROOT = "nthRoot";
    var OTHER = "other";
    var LikeTermCollector = {};
    LikeTermCollector.canCollectLikeTerms = function(node) {
      if (!(Node.Type.isOperator(node, "+") || Node.Type.isOperator(node, "*"))) {
        return false;
      }
      let terms;
      if (node.op === "+") {
        terms = getTermsForCollectingAddition(node);
      } else if (node.op === "*") {
        terms = getTermsForCollectingMultiplication(node);
      } else {
        throw Error("Operation not supported: " + node.op);
      }
      const termTypes = Object.keys(terms);
      const filteredTermTypes = termTypes.filter((x) => x !== OTHER);
      return termTypes.length > 1 && filteredTermTypes.some((x) => terms[x].length > 1);
    };
    LikeTermCollector.collectLikeTerms = function(node) {
      if (!LikeTermCollector.canCollectLikeTerms(node)) {
        return Node.Status.noChange(node);
      }
      const op = node.op;
      let terms = [];
      if (op === "+") {
        terms = getTermsForCollectingAddition(node);
      } else if (op === "*") {
        terms = getTermsForCollectingMultiplication(node);
      } else {
        throw Error("Operation not supported: " + op);
      }
      const termTypesSorted = Object.keys(terms).filter((x) => x !== CONSTANT && x !== CONSTANT_FRACTION && x !== OTHER).sort(sortTerms);
      if (terms[CONSTANT]) {
        if (op === "+") {
          termTypesSorted.push(CONSTANT);
        }
        if (op === "*") {
          termTypesSorted.unshift(CONSTANT);
        }
      }
      if (terms[CONSTANT_FRACTION]) {
        termTypesSorted.push(CONSTANT_FRACTION);
      }
      let newOperands = [];
      let changeGroup = 1;
      termTypesSorted.forEach((termType) => {
        const termsOfType = terms[termType];
        if (termsOfType.length === 1) {
          const singleTerm = clone(termsOfType[0]);
          singleTerm.changeGroup = changeGroup;
          newOperands.push(singleTerm);
        } else {
          const termList = clone(Node.Creator.parenthesis(
            Node.Creator.operator(op, termsOfType)
          ));
          termList.changeGroup = changeGroup;
          newOperands.push(termList);
        }
        termsOfType.forEach((term) => {
          term.changeGroup = changeGroup;
        });
        changeGroup++;
      });
      if (terms[OTHER]) {
        newOperands = newOperands.concat(terms[OTHER]);
      }
      const newNode = clone(node);
      newNode.args = newOperands;
      return Node.Status.nodeChanged(
        ChangeTypes.COLLECT_LIKE_TERMS,
        node,
        newNode,
        false
      );
    };
    function getTermName(node, termSubclass, op) {
      const term = new termSubclass(node);
      let termName = print2.ascii(term.getBaseNode());
      if (op === "+") {
        const exponent = print2.ascii(term.getExponentNode(true));
        termName += "^" + exponent;
      }
      return termName;
    }
    function getTermsForCollectingAddition(node) {
      let terms = {};
      for (let i = 0; i < node.args.length; i++) {
        const child = node.args[i];
        if (Node.PolynomialTerm.isPolynomialTerm(child)) {
          const termName = getTermName(child, Node.PolynomialTerm, "+");
          terms = Util.appendToArrayInObject(terms, termName, child);
        } else if (Node.NthRootTerm.isNthRootTerm(child)) {
          const termName = getTermName(child, Node.NthRootTerm, "+");
          terms = Util.appendToArrayInObject(terms, termName, child);
        } else if (Node.Type.isIntegerFraction(child)) {
          terms = Util.appendToArrayInObject(terms, CONSTANT_FRACTION, child);
        } else if (Node.Type.isConstant(child)) {
          terms = Util.appendToArrayInObject(terms, CONSTANT, child);
        } else if (Node.Type.isOperator(node) || Node.Type.isFunction(node) || Node.Type.isParenthesis(node) || Node.Type.isUnaryMinus(node)) {
          terms = Util.appendToArrayInObject(terms, OTHER, child);
        } else {
          throw Error("Unsupported node type: " + child.type);
        }
      }
      if (terms[CONSTANT] && terms[CONSTANT].length === 1 && terms[CONSTANT_FRACTION] && terms[CONSTANT_FRACTION].length === 1) {
        const fraction = terms[CONSTANT_FRACTION][0];
        terms = Util.appendToArrayInObject(terms, CONSTANT, fraction);
        delete terms[CONSTANT_FRACTION];
      }
      return terms;
    }
    function getTermsForCollectingMultiplication(node) {
      let terms = {};
      for (let i = 0; i < node.args.length; i++) {
        let child = node.args[i];
        if (Node.Type.isUnaryMinus(child)) {
          terms = Util.appendToArrayInObject(
            terms,
            CONSTANT,
            Node.Creator.constant(-1)
          );
          child = child.args[0];
        }
        if (Node.PolynomialTerm.isPolynomialTerm(child)) {
          terms = addToTermsforPolynomialMultiplication(terms, child);
        } else if (Node.Type.isFunction(child, "nthRoot")) {
          terms = addToTermsforNthRootMultiplication(terms, child);
        } else if (Node.Type.isIntegerFraction(child)) {
          terms = Util.appendToArrayInObject(terms, CONSTANT, child);
        } else if (Node.Type.isConstant(child)) {
          terms = Util.appendToArrayInObject(terms, CONSTANT, child);
        } else if (Node.Type.isOperator(node) || Node.Type.isFunction(node) || Node.Type.isParenthesis(node) || Node.Type.isUnaryMinus(node)) {
          terms = Util.appendToArrayInObject(terms, OTHER, child);
        } else {
          throw Error("Unsupported node type: " + child.type);
        }
      }
      return terms;
    }
    function addToTermsforNthRootMultiplication(terms, node) {
      const rootNode = NthRoot.getRootNode(node);
      const rootNodeValue = rootNode.value;
      terms = Util.appendToArrayInObject(terms, NTH_ROOT + rootNodeValue, node);
      return terms;
    }
    function addToTermsforPolynomialMultiplication(terms, node) {
      const polyNode = new Node.PolynomialTerm(node);
      let termName;
      if (!polyNode.hasCoeff()) {
        termName = getTermName(node, Node.PolynomialTerm, "*");
        terms = Util.appendToArrayInObject(terms, termName, node);
      } else {
        const coefficient = polyNode.getCoeffNode();
        let termWithoutCoefficient = polyNode.getSymbolNode();
        if (polyNode.getExponentNode()) {
          termWithoutCoefficient = Node.Creator.operator(
            "^",
            [termWithoutCoefficient, polyNode.getExponentNode()]
          );
        }
        terms = Util.appendToArrayInObject(terms, CONSTANT, coefficient);
        termName = getTermName(termWithoutCoefficient, Node.PolynomialTerm, "*");
        terms = Util.appendToArrayInObject(terms, termName, termWithoutCoefficient);
      }
      return terms;
    }
    function sortTerms(a, b) {
      if (a === b) {
        return 0;
      }
      if (a.indexOf("^") === -1) {
        return a < b ? -1 : 1;
      } else {
        const symbA = a.split("^")[0];
        const expA = a.split("^")[1];
        const symbB = b.split("^")[0];
        const expB = b.split("^")[1];
        if (symbA !== symbB) {
          return symbA < symbB ? -1 : 1;
        } else {
          return expA > expB ? -1 : 1;
        }
      }
    }
    module.exports = LikeTermCollector;
  }
});

// node_modules/mathsteps/lib/util/removeUnnecessaryParens.js
var require_removeUnnecessaryParens = __commonJS({
  "node_modules/mathsteps/lib/util/removeUnnecessaryParens.js"(exports, module) {
    var checks = require_checks();
    var LikeTermCollector = require_LikeTermCollector();
    var Node = require_node2();
    function removeUnnecessaryParens(node, rootNode = false) {
      if (rootNode) {
        while (Node.Type.isParenthesis(node)) {
          node = node.content;
        }
      }
      return removeUnnecessaryParensSearch(node);
    }
    function removeUnnecessaryParensSearch(node) {
      if (Node.Type.isOperator(node)) {
        return removeUnnecessaryParensInOperatorNode(node);
      } else if (Node.Type.isFunction(node)) {
        return removeUnnecessaryParensInFunctionNode(node);
      } else if (Node.Type.isParenthesis(node)) {
        return removeUnnecessaryParensInParenthesisNode(node);
      } else if (Node.Type.isConstant(node, true) || Node.Type.isSymbol(node)) {
        return node;
      } else if (Node.Type.isUnaryMinus(node)) {
        const content = node.args[0];
        node.args[0] = removeUnnecessaryParensSearch(content);
        return node;
      } else {
        throw Error("Unsupported node type: " + node.type);
      }
    }
    function removeUnnecessaryParensInOperatorNode(node) {
      if (node.op === "^" && Node.Type.isParenthesis(node.args[0])) {
        const base = node.args[0];
        if (Node.Type.isOperator(base.content)) {
          base.content = removeUnnecessaryParensSearch(base.content);
          node.args[1] = removeUnnecessaryParensSearch(node.args[1]);
          return node;
        }
      }
      node.args.forEach((child, i) => {
        node.args[i] = removeUnnecessaryParensSearch(child);
      });
      if (node.op === "+") {
        node.args.forEach((child, i) => {
          if (Node.Type.isParenthesis(child) && !canCollectOrCombine(child.content)) {
            node.args[i] = child.content;
          }
        });
      } else if (node.op === "-") {
        if (Node.Type.isParenthesis(node.args[0]) && !canCollectOrCombine(node.args[0].content)) {
          node.args[0] = node.args[0].content;
        }
      }
      return node;
    }
    function removeUnnecessaryParensInFunctionNode(node) {
      node.args.forEach((child, i) => {
        if (Node.Type.isParenthesis(child)) {
          child = child.content;
        }
        node.args[i] = removeUnnecessaryParensSearch(child);
      });
      return node;
    }
    function removeUnnecessaryParensInParenthesisNode(node) {
      if (Node.PolynomialTerm.isPolynomialTerm(node.content)) {
        if (node.content.args) {
          node.content.args.forEach((arg, i) => {
            node.content.args[i] = removeUnnecessaryParensSearch(arg);
          });
        }
        node = node.content;
      } else if (Node.Type.isConstant(node.content, true) || Node.Type.isIntegerFraction(node.content) || Node.Type.isSymbol(node.content)) {
        node = node.content;
      } else if (Node.Type.isFunction(node.content)) {
        node = node.content;
        node = removeUnnecessaryParensSearch(node);
      } else if (Node.Type.isOperator(node.content)) {
        node.content = removeUnnecessaryParensSearch(node.content);
        if (node.content.op === "^") {
          node = node.content;
        }
      } else if (Node.Type.isParenthesis(node.content)) {
        node = removeUnnecessaryParensSearch(node.content);
      } else if (Node.Type.isUnaryMinus(node.content)) {
        node.content = removeUnnecessaryParensSearch(node.content);
      } else {
        throw Error("Unsupported node type: " + node.content.type);
      }
      return node;
    }
    function canCollectOrCombine(node) {
      return LikeTermCollector.canCollectLikeTerms(node) || checks.resolvesToConstant(node) || checks.canSimplifyPolynomialTerms(node);
    }
    module.exports = removeUnnecessaryParens;
  }
});

// node_modules/mathsteps/lib/factor/stepThrough.js
var require_stepThrough = __commonJS({
  "node_modules/mathsteps/lib/factor/stepThrough.js"(exports, module) {
    var checks = require_checks();
    var factorQuadratic = require_factorQuadratic();
    var flattenOperands = require_flattenOperands();
    var removeUnnecessaryParens = require_removeUnnecessaryParens();
    function stepThrough(node, debug = false) {
      if (debug) {
        console.log("\n\nFactoring: " + print.ascii(node, false, true));
      }
      if (checks.hasUnsupportedNodes(node)) {
        return [];
      }
      let nodeStatus;
      const steps = [];
      node = flattenOperands(node);
      node = removeUnnecessaryParens(node, true);
      if (checks.isQuadratic(node)) {
        nodeStatus = factorQuadratic(node);
        if (nodeStatus.hasChanged()) {
          steps.push(nodeStatus);
        }
      }
      return steps;
    }
    module.exports = stepThrough;
  }
});

// node_modules/mathsteps/lib/factor/index.js
var require_factor = __commonJS({
  "node_modules/mathsteps/lib/factor/index.js"(exports, module) {
    var math = require_mathjs();
    var stepThrough = require_stepThrough();
    function factorString(expressionString, debug = false) {
      let node;
      try {
        node = math.parse(expressionString);
      } catch (err) {
        return [];
      }
      if (node) {
        return stepThrough(node, debug);
      }
      return [];
    }
    module.exports = factorString;
  }
});

// node_modules/mathsteps/lib/TreeSearch.js
var require_TreeSearch = __commonJS({
  "node_modules/mathsteps/lib/TreeSearch.js"(exports, module) {
    var Node = require_node2();
    var TreeSearch = {};
    TreeSearch.preOrder = function(simplificationFunction) {
      return function(node) {
        return search(simplificationFunction, node, true);
      };
    };
    TreeSearch.postOrder = function(simplificationFunction) {
      return function(node) {
        return search(simplificationFunction, node, false);
      };
    };
    function search(simplificationFunction, node, preOrder) {
      let status;
      if (preOrder) {
        status = simplificationFunction(node);
        if (status.hasChanged()) {
          return status;
        }
      }
      if (Node.Type.isConstant(node) || Node.Type.isSymbol(node)) {
        return Node.Status.noChange(node);
      } else if (Node.Type.isUnaryMinus(node)) {
        status = search(simplificationFunction, node.args[0], preOrder);
        if (status.hasChanged()) {
          return Node.Status.childChanged(node, status);
        }
      } else if (Node.Type.isOperator(node) || Node.Type.isFunction(node)) {
        for (let i = 0; i < node.args.length; i++) {
          const child = node.args[i];
          const childNodeStatus = search(simplificationFunction, child, preOrder);
          if (childNodeStatus.hasChanged()) {
            return Node.Status.childChanged(node, childNodeStatus, i);
          }
        }
      } else if (Node.Type.isParenthesis(node)) {
        status = search(simplificationFunction, node.content, preOrder);
        if (status.hasChanged()) {
          return Node.Status.childChanged(node, status);
        }
      } else {
        throw Error("Unsupported node type: " + node);
      }
      if (!preOrder) {
        return simplificationFunction(node);
      } else {
        return Node.Status.noChange(node);
      }
    }
    module.exports = TreeSearch;
  }
});

// node_modules/mathsteps/lib/simplifyExpression/arithmeticSearch/index.js
var require_arithmeticSearch = __commonJS({
  "node_modules/mathsteps/lib/simplifyExpression/arithmeticSearch/index.js"(exports, module) {
    var ChangeTypes = require_ChangeTypes();
    var evaluate = require_evaluate();
    var Node = require_node2();
    var TreeSearch = require_TreeSearch();
    var search = TreeSearch.postOrder(arithmetic);
    function arithmetic(node) {
      if (!Node.Type.isOperator(node)) {
        return Node.Status.noChange(node);
      }
      if (!node.args.every((child) => Node.Type.isConstant(child, true))) {
        return Node.Status.noChange(node);
      }
      node.args.forEach((arg, i) => {
        node.args[i] = Node.Creator.constant(evaluate(arg));
      });
      if (Node.Type.isIntegerFraction(node)) {
        const numeratorValue = parseInt(node.args[0]);
        const denominatorValue = parseInt(node.args[1]);
        if (numeratorValue % denominatorValue === 0) {
          const newNode = Node.Creator.constant(numeratorValue / denominatorValue);
          return Node.Status.nodeChanged(
            ChangeTypes.SIMPLIFY_ARITHMETIC,
            node,
            newNode
          );
        } else {
          return Node.Status.noChange(node);
        }
      } else {
        const evaluatedValue = evaluateAndRound(node);
        const newNode = Node.Creator.constant(evaluatedValue);
        return Node.Status.nodeChanged(ChangeTypes.SIMPLIFY_ARITHMETIC, node, newNode);
      }
    }
    function evaluateAndRound(node) {
      let result = evaluate(node);
      if (Math.abs(result) < 1) {
        result = parseFloat(result.toPrecision(4));
      } else {
        result = parseFloat(result.toFixed(4));
      }
      return result;
    }
    module.exports = search;
  }
});

// node_modules/mathsteps/lib/simplifyExpression/basicsSearch/convertMixedNumberToImproperFraction.js
var require_convertMixedNumberToImproperFraction = __commonJS({
  "node_modules/mathsteps/lib/simplifyExpression/basicsSearch/convertMixedNumberToImproperFraction.js"(exports, module) {
    var clone = require_clone3();
    var ChangeTypes = require_ChangeTypes();
    var Node = require_node2();
    function convertMixedNumberToImproperFraction(node) {
      if (!Node.MixedNumber.isMixedNumber(node)) {
        return Node.Status.noChange(node);
      }
      const substeps = [];
      let newNode = clone(node);
      const wholeNumber = Node.MixedNumber.getWholeNumberValue(node);
      const numerator = Node.MixedNumber.getNumeratorValue(node);
      const denominator = Node.MixedNumber.getDenominatorValue(node);
      const isNegativeMixedNumber = Node.MixedNumber.isNegativeMixedNumber(node);
      let status = convertToUnsimplifiedImproperFraction(
        newNode,
        wholeNumber,
        numerator,
        denominator,
        isNegativeMixedNumber
      );
      substeps.push(status);
      newNode = Node.Status.resetChangeGroups(status.newNode);
      status = simplifyMultiplicationInImproperFraction(
        newNode,
        wholeNumber,
        numerator,
        denominator,
        isNegativeMixedNumber
      );
      substeps.push(status);
      newNode = Node.Status.resetChangeGroups(status.newNode);
      status = simplifyAdditionInImproperFraction(
        newNode,
        wholeNumber,
        numerator,
        denominator,
        isNegativeMixedNumber
      );
      substeps.push(status);
      newNode = Node.Status.resetChangeGroups(status.newNode);
      return Node.Status.nodeChanged(
        ChangeTypes.CONVERT_MIXED_NUMBER_TO_IMPROPER_FRACTION,
        node,
        newNode,
        true,
        substeps
      );
    }
    function convertToUnsimplifiedImproperFraction(oldNode, wholeNumber, numerator, denominator, isNegativeMixedNumber) {
      const newNumeratorMultiplication = Node.Creator.parenthesis(
        Node.Creator.operator(
          "*",
          [
            Node.Creator.constant(wholeNumber),
            Node.Creator.constant(denominator)
          ]
        )
      );
      const newNumerator = Node.Creator.operator(
        "+",
        [newNumeratorMultiplication, Node.Creator.constant(numerator)]
      );
      oldNode.args[0].args[0].changeGroup = 1;
      newNumerator.changeGroup = 1;
      const newDenominator = Node.Creator.constant(denominator);
      let newNode = Node.Creator.operator(
        "/",
        [newNumerator, newDenominator]
      );
      if (isNegativeMixedNumber) {
        newNode = Node.Creator.unaryMinus(newNode);
      }
      return Node.Status.nodeChanged(
        ChangeTypes.IMPROPER_FRACTION_NUMERATOR,
        oldNode,
        newNode,
        false
      );
    }
    function simplifyMultiplicationInImproperFraction(oldNode, wholeNumber, numerator, denominator, isNegativeMixedNumber) {
      const newNumerator = Node.Creator.operator(
        "+",
        [
          Node.Creator.constant(wholeNumber * denominator),
          Node.Creator.constant(numerator)
        ]
      );
      oldNode.args[0].changeGroup = 1;
      newNumerator.changeGroup = 1;
      const newDenominator = Node.Creator.constant(denominator);
      let newNode = Node.Creator.operator(
        "/",
        [newNumerator, newDenominator]
      );
      if (isNegativeMixedNumber) {
        newNode = Node.Creator.unaryMinus(newNode);
      }
      return Node.Status.nodeChanged(
        ChangeTypes.SIMPLIFY_ARITHMETIC,
        oldNode,
        newNode,
        false
      );
    }
    function simplifyAdditionInImproperFraction(oldNode, wholeNumber, numerator, denominator, isNegativeMixedNumber) {
      const newNumerator = Node.Creator.constant(
        wholeNumber * denominator + numerator
      );
      oldNode.args[0].changeGroup = 1;
      newNumerator.changeGroup = 1;
      const newDenominator = Node.Creator.constant(denominator);
      let newNode = Node.Creator.operator(
        "/",
        [newNumerator, newDenominator]
      );
      if (isNegativeMixedNumber) {
        newNode = Node.Creator.unaryMinus(newNode);
      }
      return Node.Status.nodeChanged(
        ChangeTypes.SIMPLIFY_ARITHMETIC,
        oldNode,
        newNode,
        false
      );
    }
    module.exports = convertMixedNumberToImproperFraction;
  }
});

// node_modules/mathsteps/lib/simplifyExpression/basicsSearch/rearrangeCoefficient.js
var require_rearrangeCoefficient = __commonJS({
  "node_modules/mathsteps/lib/simplifyExpression/basicsSearch/rearrangeCoefficient.js"(exports, module) {
    var checks = require_checks();
    var clone = require_clone3();
    var ChangeTypes = require_ChangeTypes();
    var Node = require_node2();
    function rearrangeCoefficient(node) {
      if (!checks.canRearrangeCoefficient(node)) {
        return Node.Status.noChange(node);
      }
      let newNode = clone(node);
      const polyNode = new Node.PolynomialTerm(newNode.args[0]);
      const constNode = newNode.args[1];
      const exponentNode = polyNode.getExponentNode();
      newNode = Node.Creator.polynomialTerm(
        polyNode.getSymbolNode(),
        exponentNode,
        constNode
      );
      return Node.Status.nodeChanged(
        ChangeTypes.REARRANGE_COEFF,
        node,
        newNode
      );
    }
    module.exports = rearrangeCoefficient;
  }
});

// node_modules/mathsteps/lib/simplifyExpression/basicsSearch/reduceExponentByZero.js
var require_reduceExponentByZero = __commonJS({
  "node_modules/mathsteps/lib/simplifyExpression/basicsSearch/reduceExponentByZero.js"(exports, module) {
    var ChangeTypes = require_ChangeTypes();
    var Node = require_node2();
    function reduceExponentByZero(node) {
      if (node.op !== "^") {
        return Node.Status.noChange(node);
      }
      const exponent = node.args[1];
      if (Node.Type.isConstant(exponent) && exponent.value === "0") {
        const newNode = Node.Creator.constant(1);
        return Node.Status.nodeChanged(
          ChangeTypes.REDUCE_EXPONENT_BY_ZERO,
          node,
          newNode
        );
      } else {
        return Node.Status.noChange(node);
      }
    }
    module.exports = reduceExponentByZero;
  }
});

// node_modules/mathsteps/lib/simplifyExpression/basicsSearch/reduceMultiplicationByZero.js
var require_reduceMultiplicationByZero = __commonJS({
  "node_modules/mathsteps/lib/simplifyExpression/basicsSearch/reduceMultiplicationByZero.js"(exports, module) {
    var ChangeTypes = require_ChangeTypes();
    var Node = require_node2();
    function reduceMultiplicationByZero(node) {
      if (node.op !== "*") {
        return Node.Status.noChange(node);
      }
      const zeroIndex = node.args.findIndex((arg) => {
        if (Node.Type.isConstant(arg) && arg.value === "0") {
          return true;
        }
        if (Node.PolynomialTerm.isPolynomialTerm(arg)) {
          const polyTerm = new Node.PolynomialTerm(arg);
          return polyTerm.getCoeffValue() === 0;
        }
        return false;
      });
      if (zeroIndex >= 0) {
        const newNode = Node.Creator.constant(0);
        return Node.Status.nodeChanged(
          ChangeTypes.MULTIPLY_BY_ZERO,
          node,
          newNode
        );
      } else {
        return Node.Status.noChange(node);
      }
    }
    module.exports = reduceMultiplicationByZero;
  }
});

// node_modules/mathsteps/lib/simplifyExpression/basicsSearch/reduceZeroDividedByAnything.js
var require_reduceZeroDividedByAnything = __commonJS({
  "node_modules/mathsteps/lib/simplifyExpression/basicsSearch/reduceZeroDividedByAnything.js"(exports, module) {
    var ChangeTypes = require_ChangeTypes();
    var Node = require_node2();
    function reduceZeroDividedByAnything(node) {
      if (node.op !== "/") {
        return Node.Status.noChange(node);
      }
      if (node.args[0].value === "0") {
        const newNode = Node.Creator.constant(0);
        return Node.Status.nodeChanged(
          ChangeTypes.REDUCE_ZERO_NUMERATOR,
          node,
          newNode
        );
      } else {
        return Node.Status.noChange(node);
      }
    }
    module.exports = reduceZeroDividedByAnything;
  }
});

// node_modules/mathsteps/lib/simplifyExpression/basicsSearch/removeAdditionOfZero.js
var require_removeAdditionOfZero = __commonJS({
  "node_modules/mathsteps/lib/simplifyExpression/basicsSearch/removeAdditionOfZero.js"(exports, module) {
    var clone = require_clone3();
    var ChangeTypes = require_ChangeTypes();
    var Node = require_node2();
    function removeAdditionOfZero(node) {
      if (node.op !== "+") {
        return Node.Status.noChange(node);
      }
      const zeroIndex = node.args.findIndex((arg) => {
        return Node.Type.isConstant(arg) && arg.value === "0";
      });
      let newNode = clone(node);
      if (zeroIndex >= 0) {
        newNode.args.splice(zeroIndex, 1);
        if (newNode.args.length === 1) {
          newNode = newNode.args[0];
        }
        return Node.Status.nodeChanged(
          ChangeTypes.REMOVE_ADDING_ZERO,
          node,
          newNode
        );
      }
      return Node.Status.noChange(node);
    }
    module.exports = removeAdditionOfZero;
  }
});

// node_modules/mathsteps/lib/simplifyExpression/basicsSearch/removeDivisionByOne.js
var require_removeDivisionByOne = __commonJS({
  "node_modules/mathsteps/lib/simplifyExpression/basicsSearch/removeDivisionByOne.js"(exports, module) {
    var clone = require_clone3();
    var ChangeTypes = require_ChangeTypes();
    var Negative = require_Negative();
    var Node = require_node2();
    function removeDivisionByOne(node) {
      if (node.op !== "/") {
        return Node.Status.noChange(node);
      }
      const denominator = node.args[1];
      if (!Node.Type.isConstant(denominator)) {
        return Node.Status.noChange(node);
      }
      let numerator = clone(node.args[0]);
      if (parseFloat(denominator.value) === -1) {
        if (Node.Type.isOperator(numerator)) {
          numerator = Node.Creator.parenthesis(numerator);
        }
        const changeType = Negative.isNegative(numerator) ? ChangeTypes.RESOLVE_DOUBLE_MINUS : ChangeTypes.DIVISION_BY_NEGATIVE_ONE;
        numerator = Negative.negate(numerator);
        return Node.Status.nodeChanged(changeType, node, numerator);
      } else if (parseFloat(denominator.value) === 1) {
        return Node.Status.nodeChanged(
          ChangeTypes.DIVISION_BY_ONE,
          node,
          numerator
        );
      } else {
        return Node.Status.noChange(node);
      }
    }
    module.exports = removeDivisionByOne;
  }
});

// node_modules/mathsteps/lib/simplifyExpression/basicsSearch/removeExponentBaseOne.js
var require_removeExponentBaseOne = __commonJS({
  "node_modules/mathsteps/lib/simplifyExpression/basicsSearch/removeExponentBaseOne.js"(exports, module) {
    var checks = require_checks();
    var clone = require_clone3();
    var ChangeTypes = require_ChangeTypes();
    var Node = require_node2();
    function removeExponentBaseOne(node) {
      if (node.op === "^" && // an exponent with
      checks.resolvesToConstant(node.args[1]) && // a power not a symbol and
      Node.Type.isConstant(node.args[0]) && // a constant base
      node.args[0].value === "1") {
        const newNode = clone(node.args[0]);
        return Node.Status.nodeChanged(
          ChangeTypes.REMOVE_EXPONENT_BASE_ONE,
          node,
          newNode
        );
      }
      return Node.Status.noChange(node);
    }
    module.exports = removeExponentBaseOne;
  }
});

// node_modules/mathsteps/lib/simplifyExpression/basicsSearch/removeExponentByOne.js
var require_removeExponentByOne = __commonJS({
  "node_modules/mathsteps/lib/simplifyExpression/basicsSearch/removeExponentByOne.js"(exports, module) {
    var clone = require_clone3();
    var ChangeTypes = require_ChangeTypes();
    var Node = require_node2();
    function removeExponentByOne(node) {
      if (node.op === "^" && // exponent of anything
      Node.Type.isConstant(node.args[1]) && // to a constant
      node.args[1].value === "1") {
        const newNode = clone(node.args[0]);
        return Node.Status.nodeChanged(
          ChangeTypes.REMOVE_EXPONENT_BY_ONE,
          node,
          newNode
        );
      }
      return Node.Status.noChange(node);
    }
    module.exports = removeExponentByOne;
  }
});

// node_modules/mathsteps/lib/simplifyExpression/basicsSearch/removeMultiplicationByNegativeOne.js
var require_removeMultiplicationByNegativeOne = __commonJS({
  "node_modules/mathsteps/lib/simplifyExpression/basicsSearch/removeMultiplicationByNegativeOne.js"(exports, module) {
    var clone = require_clone3();
    var ChangeTypes = require_ChangeTypes();
    var Negative = require_Negative();
    var Node = require_node2();
    function removeMultiplicationByNegativeOne(node) {
      if (node.op !== "*") {
        return Node.Status.noChange(node);
      }
      const minusOneIndex = node.args.findIndex((arg) => {
        return Node.Type.isConstant(arg) && arg.value === "-1";
      });
      if (minusOneIndex < 0) {
        return Node.Status.noChange(node);
      }
      let nodeToCombineIndex;
      if (minusOneIndex + 1 === node.args.length) {
        nodeToCombineIndex = minusOneIndex - 1;
      } else {
        nodeToCombineIndex = minusOneIndex + 1;
      }
      let nodeToCombine = node.args[nodeToCombineIndex];
      if (Node.Type.isConstant(nodeToCombine)) {
        return Node.Status.noChange(node);
      }
      let newNode = clone(node);
      nodeToCombine = Negative.negate(clone(nodeToCombine));
      newNode.args[nodeToCombineIndex] = nodeToCombine;
      newNode.args.splice(minusOneIndex, 1);
      if (newNode.args.length === 1) {
        newNode = newNode.args[0];
      }
      return Node.Status.nodeChanged(
        ChangeTypes.REMOVE_MULTIPLYING_BY_NEGATIVE_ONE,
        node,
        newNode
      );
    }
    module.exports = removeMultiplicationByNegativeOne;
  }
});

// node_modules/mathsteps/lib/simplifyExpression/basicsSearch/removeMultiplicationByOne.js
var require_removeMultiplicationByOne = __commonJS({
  "node_modules/mathsteps/lib/simplifyExpression/basicsSearch/removeMultiplicationByOne.js"(exports, module) {
    var clone = require_clone3();
    var ChangeTypes = require_ChangeTypes();
    var Node = require_node2();
    function removeMultiplicationByOne(node) {
      if (node.op !== "*") {
        return Node.Status.noChange(node);
      }
      const oneIndex = node.args.findIndex((arg) => {
        return Node.Type.isConstant(arg) && arg.value === "1";
      });
      if (oneIndex >= 0) {
        let newNode = clone(node);
        newNode.args.splice(oneIndex, 1);
        if (newNode.args.length === 1) {
          newNode = newNode.args[0];
        }
        return Node.Status.nodeChanged(
          ChangeTypes.REMOVE_MULTIPLYING_BY_ONE,
          node,
          newNode
        );
      }
      return Node.Status.noChange(node);
    }
    module.exports = removeMultiplicationByOne;
  }
});

// node_modules/mathsteps/lib/simplifyExpression/basicsSearch/simplifyDoubleUnaryMinus.js
var require_simplifyDoubleUnaryMinus = __commonJS({
  "node_modules/mathsteps/lib/simplifyExpression/basicsSearch/simplifyDoubleUnaryMinus.js"(exports, module) {
    var clone = require_clone3();
    var ChangeTypes = require_ChangeTypes();
    var Node = require_node2();
    function simplifyDoubleUnaryMinus(node) {
      if (!Node.Type.isUnaryMinus(node)) {
        return Node.Status.noChange(node);
      }
      const unaryArg = node.args[0];
      if (Node.Type.isUnaryMinus(unaryArg)) {
        const newNode = clone(unaryArg.args[0]);
        return Node.Status.nodeChanged(
          ChangeTypes.RESOLVE_DOUBLE_MINUS,
          node,
          newNode
        );
      } else if (Node.Type.isConstant(unaryArg) && parseFloat(unaryArg.value) < 0) {
        const newNode = Node.Creator.constant(parseFloat(unaryArg.value) * -1);
        return Node.Status.nodeChanged(
          ChangeTypes.RESOLVE_DOUBLE_MINUS,
          node,
          newNode
        );
      } else if (Node.Type.isParenthesis(unaryArg)) {
        const parenthesisNode = unaryArg;
        const parenthesisContent = parenthesisNode.content;
        if (Node.Type.isUnaryMinus(parenthesisContent)) {
          const newNode = Node.Creator.parenthesis(parenthesisContent.args[0]);
          return Node.Status.nodeChanged(
            ChangeTypes.RESOLVE_DOUBLE_MINUS,
            node,
            newNode
          );
        }
      }
      return Node.Status.noChange(node);
    }
    module.exports = simplifyDoubleUnaryMinus;
  }
});

// node_modules/mathsteps/lib/simplifyExpression/basicsSearch/index.js
var require_basicsSearch = __commonJS({
  "node_modules/mathsteps/lib/simplifyExpression/basicsSearch/index.js"(exports, module) {
    var Node = require_node2();
    var TreeSearch = require_TreeSearch();
    var convertMixedNumberToImproperFraction = require_convertMixedNumberToImproperFraction();
    var rearrangeCoefficient = require_rearrangeCoefficient();
    var reduceExponentByZero = require_reduceExponentByZero();
    var reduceMultiplicationByZero = require_reduceMultiplicationByZero();
    var reduceZeroDividedByAnything = require_reduceZeroDividedByAnything();
    var removeAdditionOfZero = require_removeAdditionOfZero();
    var removeDivisionByOne = require_removeDivisionByOne();
    var removeExponentBaseOne = require_removeExponentBaseOne();
    var removeExponentByOne = require_removeExponentByOne();
    var removeMultiplicationByNegativeOne = require_removeMultiplicationByNegativeOne();
    var removeMultiplicationByOne = require_removeMultiplicationByOne();
    var simplifyDoubleUnaryMinus = require_simplifyDoubleUnaryMinus();
    var SIMPLIFICATION_FUNCTIONS = [
      // convert mixed numbers to improper fractions
      convertMixedNumberToImproperFraction,
      // multiplication by 0 yields 0
      reduceMultiplicationByZero,
      // division of 0 by something yields 0
      reduceZeroDividedByAnything,
      // ____^0 --> 1
      reduceExponentByZero,
      // Check for x^1 which should be reduced to x
      removeExponentByOne,
      // Check for 1^x which should be reduced to 1
      // if x can be simplified to a constant
      removeExponentBaseOne,
      // - - becomes +
      simplifyDoubleUnaryMinus,
      // If this is a + node and one of the operands is 0, get rid of the 0
      removeAdditionOfZero,
      // If this is a * node and one of the operands is 1, get rid of the 1
      removeMultiplicationByOne,
      // In some cases, remove multiplying by -1
      removeMultiplicationByNegativeOne,
      // If this is a / node and the denominator is 1 or -1, get rid of it
      removeDivisionByOne,
      // e.g. x*5 -> 5x
      rearrangeCoefficient
    ];
    var search = TreeSearch.preOrder(basics);
    function basics(node) {
      for (let i = 0; i < SIMPLIFICATION_FUNCTIONS.length; i++) {
        const nodeStatus = SIMPLIFICATION_FUNCTIONS[i](node);
        if (nodeStatus.hasChanged()) {
          return nodeStatus;
        } else {
          node = nodeStatus.newNode;
        }
      }
      return Node.Status.noChange(node);
    }
    module.exports = search;
  }
});

// node_modules/mathsteps/lib/simplifyExpression/breakUpNumeratorSearch/index.js
var require_breakUpNumeratorSearch = __commonJS({
  "node_modules/mathsteps/lib/simplifyExpression/breakUpNumeratorSearch/index.js"(exports, module) {
    var ChangeTypes = require_ChangeTypes();
    var Node = require_node2();
    var TreeSearch = require_TreeSearch();
    var search = TreeSearch.postOrder(breakUpNumerator);
    function breakUpNumerator(node) {
      if (!Node.Type.isOperator(node) || node.op !== "/") {
        return Node.Status.noChange(node);
      }
      let numerator = node.args[0];
      if (Node.Type.isParenthesis(numerator)) {
        numerator = numerator.content;
      }
      if (!Node.Type.isOperator(numerator) || numerator.op !== "+") {
        return Node.Status.noChange(node);
      }
      const fractionList = [];
      const denominator = node.args[1];
      numerator.args.forEach((arg) => {
        const newFraction = Node.Creator.operator("/", [arg, denominator]);
        newFraction.changeGroup = 1;
        fractionList.push(newFraction);
      });
      let newNode = Node.Creator.operator("+", fractionList);
      newNode = Node.Creator.parenthesis(newNode);
      node.changeGroup = 1;
      return Node.Status.nodeChanged(
        ChangeTypes.BREAK_UP_FRACTION,
        node,
        newNode,
        false
      );
    }
    module.exports = search;
  }
});

// node_modules/mathsteps/lib/simplifyExpression/fractionsSearch/divideByGCD.js
var require_divideByGCD = __commonJS({
  "node_modules/mathsteps/lib/simplifyExpression/fractionsSearch/divideByGCD.js"(exports, module) {
    var clone = require_clone3();
    var math = require_mathjs();
    var ChangeTypes = require_ChangeTypes();
    var evaluate = require_evaluate();
    var Node = require_node2();
    function divideByGCD(fraction) {
      if (!Node.Type.isOperator(fraction) || fraction.op !== "/") {
        return Node.Status.noChange(fraction);
      }
      if (!Node.Type.isIntegerFraction(fraction, true)) {
        return Node.Status.noChange(fraction);
      }
      const substeps = [];
      let newNode = clone(fraction);
      const numeratorValue = parseInt(evaluate(fraction.args[0]));
      const denominatorValue = parseInt(evaluate(fraction.args[1]));
      let gcd = math.gcd(numeratorValue, denominatorValue);
      if (denominatorValue < 0) {
        gcd *= -1;
      }
      if (gcd === 1) {
        return Node.Status.noChange(fraction);
      }
      let status = findGCD(newNode, gcd, numeratorValue, denominatorValue);
      substeps.push(status);
      newNode = Node.Status.resetChangeGroups(status.newNode);
      status = cancelGCD(newNode, gcd, numeratorValue, denominatorValue);
      substeps.push(status);
      newNode = Node.Status.resetChangeGroups(status.newNode);
      return Node.Status.nodeChanged(
        ChangeTypes.SIMPLIFY_FRACTION,
        fraction,
        newNode,
        true,
        substeps
      );
    }
    function findGCD(node, gcd, numeratorValue, denominatorValue) {
      let newNode = clone(node);
      const gcdNode = Node.Creator.constant(gcd);
      gcdNode.changeGroup = 1;
      const intermediateNumerator = Node.Creator.parenthesis(Node.Creator.operator(
        "*",
        [Node.Creator.constant(numeratorValue / gcd), gcdNode]
      ));
      const intermediateDenominator = Node.Creator.parenthesis(Node.Creator.operator(
        "*",
        [Node.Creator.constant(denominatorValue / gcd), gcdNode]
      ));
      newNode = Node.Creator.operator(
        "/",
        [intermediateNumerator, intermediateDenominator]
      );
      return Node.Status.nodeChanged(
        ChangeTypes.FIND_GCD,
        node,
        newNode,
        false
      );
    }
    function cancelGCD(node, gcd, numeratorValue, denominatorValue) {
      let newNode;
      const newNumeratorNode = Node.Creator.constant(numeratorValue / gcd);
      const newDenominatorNode = Node.Creator.constant(denominatorValue / gcd);
      if (parseFloat(newDenominatorNode.value) === 1) {
        newNode = newNumeratorNode;
      } else {
        newNode = Node.Creator.operator(
          "/",
          [newNumeratorNode, newDenominatorNode]
        );
      }
      return Node.Status.nodeChanged(
        ChangeTypes.CANCEL_GCD,
        node,
        newNode,
        false
      );
    }
    module.exports = divideByGCD;
  }
});

// node_modules/mathsteps/lib/simplifyExpression/fractionsSearch/addConstantFractions.js
var require_addConstantFractions = __commonJS({
  "node_modules/mathsteps/lib/simplifyExpression/fractionsSearch/addConstantFractions.js"(exports, module) {
    var clone = require_clone3();
    var divideByGCD = require_divideByGCD();
    var math = require_mathjs();
    var ChangeTypes = require_ChangeTypes();
    var evaluate = require_evaluate();
    var Node = require_node2();
    function addConstantFractions(node) {
      let newNode = clone(node);
      if (!Node.Type.isOperator(node) || node.op !== "+") {
        return Node.Status.noChange(node);
      }
      if (!node.args.every((n) => Node.Type.isIntegerFraction(n, true))) {
        return Node.Status.noChange(node);
      }
      const denominators = node.args.map((fraction) => {
        return parseFloat(evaluate(fraction.args[1]));
      });
      const substeps = [];
      let status;
      if (!denominators.every((denominator) => denominator === denominators[0])) {
        status = makeCommonDenominator(newNode);
        substeps.push(status);
        newNode = Node.Status.resetChangeGroups(status.newNode);
        status = evaluateDenominators(newNode);
        substeps.push(status);
        newNode = Node.Status.resetChangeGroups(status.newNode);
        status = evaluateNumerators(newNode);
        substeps.push(status);
        newNode = Node.Status.resetChangeGroups(status.newNode);
      }
      status = combineNumeratorsAboveCommonDenominator(newNode);
      substeps.push(status);
      newNode = Node.Status.resetChangeGroups(status.newNode);
      status = addNumeratorsTogether(newNode);
      substeps.push(status);
      newNode = Node.Status.resetChangeGroups(status.newNode);
      status = reduceNumerator(newNode);
      if (status.hasChanged()) {
        substeps.push(status);
        newNode = Node.Status.resetChangeGroups(status.newNode);
      }
      status = divideByGCD(newNode);
      if (status.hasChanged()) {
        substeps.push(status);
        newNode = Node.Status.resetChangeGroups(status.newNode);
      }
      return Node.Status.nodeChanged(
        ChangeTypes.ADD_FRACTIONS,
        node,
        newNode,
        true,
        substeps
      );
    }
    function combineNumeratorsAboveCommonDenominator(node) {
      let newNode = clone(node);
      const commonDenominator = newNode.args[0].args[1];
      const numeratorArgs = [];
      newNode.args.forEach((fraction) => {
        numeratorArgs.push(fraction.args[0]);
      });
      const newNumerator = Node.Creator.parenthesis(
        Node.Creator.operator("+", numeratorArgs)
      );
      newNode = Node.Creator.operator("/", [newNumerator, commonDenominator]);
      return Node.Status.nodeChanged(
        ChangeTypes.COMBINE_NUMERATORS,
        node,
        newNode
      );
    }
    function addNumeratorsTogether(node) {
      const newNode = clone(node);
      newNode.args[0] = Node.Creator.constant(evaluate(newNode.args[0]));
      return Node.Status.nodeChanged(
        ChangeTypes.ADD_NUMERATORS,
        node,
        newNode
      );
    }
    function reduceNumerator(node) {
      let newNode = clone(node);
      if (newNode.args[0].value === "0") {
        newNode = Node.Creator.constant(0);
        return Node.Status.nodeChanged(
          ChangeTypes.REDUCE_ZERO_NUMERATOR,
          node,
          newNode
        );
      }
      return Node.Status.noChange(node);
    }
    function makeCommonDenominator(node) {
      const newNode = clone(node);
      const denominators = newNode.args.map((fraction) => {
        return parseFloat(fraction.args[1].value);
      });
      const commonDenominator = math.lcm(...denominators);
      newNode.args.forEach((child, i) => {
        const missingFactor = commonDenominator / denominators[i];
        if (missingFactor !== 1) {
          const missingFactorNode = Node.Creator.constant(missingFactor);
          const newNumerator = Node.Creator.parenthesis(
            Node.Creator.operator("*", [child.args[0], missingFactorNode])
          );
          const newDeominator = Node.Creator.parenthesis(
            Node.Creator.operator("*", [child.args[1], missingFactorNode])
          );
          newNode.args[i] = Node.Creator.operator("/", [newNumerator, newDeominator]);
        }
      });
      return Node.Status.nodeChanged(
        ChangeTypes.COMMON_DENOMINATOR,
        node,
        newNode
      );
    }
    function evaluateDenominators(node) {
      const newNode = clone(node);
      newNode.args.map((fraction) => {
        fraction.args[1] = Node.Creator.constant(evaluate(fraction.args[1]));
      });
      return Node.Status.nodeChanged(
        ChangeTypes.MULTIPLY_DENOMINATORS,
        node,
        newNode
      );
    }
    function evaluateNumerators(node) {
      const newNode = clone(node);
      newNode.args.map((fraction) => {
        fraction.args[0] = Node.Creator.constant(evaluate(fraction.args[0]));
      });
      return Node.Status.nodeChanged(
        ChangeTypes.MULTIPLY_NUMERATORS,
        node,
        newNode
      );
    }
    module.exports = addConstantFractions;
  }
});

// node_modules/mathsteps/lib/simplifyExpression/fractionsSearch/addConstantAndFraction.js
var require_addConstantAndFraction = __commonJS({
  "node_modules/mathsteps/lib/simplifyExpression/fractionsSearch/addConstantAndFraction.js"(exports, module) {
    var addConstantFractions = require_addConstantFractions();
    var clone = require_clone3();
    var ChangeTypes = require_ChangeTypes();
    var evaluate = require_evaluate();
    var Node = require_node2();
    function addConstantAndFraction(node) {
      if (!Node.Type.isOperator(node) || node.op !== "+" || node.args.length !== 2) {
        return Node.Status.noChange(node);
      }
      const firstArg = node.args[0];
      const secondArg = node.args[1];
      let constNode, fractionNode;
      if (Node.Type.isConstant(firstArg)) {
        if (Node.Type.isIntegerFraction(secondArg)) {
          constNode = firstArg;
          fractionNode = secondArg;
        } else {
          return Node.Status.noChange(node);
        }
      } else if (Node.Type.isConstant(secondArg)) {
        if (Node.Type.isIntegerFraction(firstArg)) {
          constNode = secondArg;
          fractionNode = firstArg;
        } else {
          return Node.Status.noChange(node);
        }
      } else {
        return Node.Status.noChange(node);
      }
      let newNode = clone(node);
      let substeps = [];
      let newConstNode, newFractionNode;
      let changeType;
      if (Number.isInteger(parseFloat(constNode.value))) {
        const denominatorNode = fractionNode.args[1];
        const denominatorValue = parseInt(denominatorNode);
        const constNodeValue = parseInt(constNode.value);
        const newNumeratorNode = Node.Creator.constant(
          constNodeValue * denominatorValue
        );
        newConstNode = Node.Creator.operator(
          "/",
          [newNumeratorNode, denominatorNode]
        );
        newFractionNode = fractionNode;
        changeType = ChangeTypes.CONVERT_INTEGER_TO_FRACTION;
      } else {
        let dividedValue = evaluate(fractionNode);
        if (dividedValue < 1) {
          dividedValue = parseFloat(dividedValue.toPrecision(4));
        } else {
          dividedValue = parseFloat(dividedValue.toFixed(4));
        }
        newFractionNode = Node.Creator.constant(dividedValue);
        newConstNode = constNode;
        changeType = ChangeTypes.DIVIDE_FRACTION_FOR_ADDITION;
      }
      if (Node.Type.isConstant(firstArg)) {
        newNode.args[0] = newConstNode;
        newNode.args[1] = newFractionNode;
      } else {
        newNode.args[0] = newFractionNode;
        newNode.args[1] = newConstNode;
      }
      substeps.push(Node.Status.nodeChanged(changeType, node, newNode));
      newNode = Node.Status.resetChangeGroups(newNode);
      if (changeType === ChangeTypes.CONVERT_INTEGER_TO_FRACTION) {
        const addFractionStatus = addConstantFractions(newNode);
        substeps = substeps.concat(addFractionStatus.substeps);
      } else {
        const evalNode = Node.Creator.constant(evaluate(newNode));
        substeps.push(Node.Status.nodeChanged(
          ChangeTypes.SIMPLIFY_ARITHMETIC,
          newNode,
          evalNode
        ));
      }
      const lastStep = substeps[substeps.length - 1];
      newNode = Node.Status.resetChangeGroups(lastStep.newNode);
      return Node.Status.nodeChanged(
        ChangeTypes.SIMPLIFY_ARITHMETIC,
        node,
        newNode,
        true,
        substeps
      );
    }
    module.exports = addConstantAndFraction;
  }
});

// node_modules/mathsteps/lib/simplifyExpression/collectAndCombineSearch/evaluateConstantSum.js
var require_evaluateConstantSum = __commonJS({
  "node_modules/mathsteps/lib/simplifyExpression/collectAndCombineSearch/evaluateConstantSum.js"(exports, module) {
    var addConstantAndFraction = require_addConstantAndFraction();
    var addConstantFractions = require_addConstantFractions();
    var arithmeticSearch = require_arithmeticSearch();
    var clone = require_clone3();
    var ChangeTypes = require_ChangeTypes();
    var Node = require_node2();
    function evaluateConstantSum(node) {
      if (Node.Type.isParenthesis(node)) {
        node = node.content;
      }
      if (!Node.Type.isOperator(node) || node.op !== "+") {
        return Node.Status.noChange(node);
      }
      if (node.args.some((node2) => !Node.Type.isConstantOrConstantFraction(node2))) {
        return Node.Status.noChange(node);
      }
      const summingFunctions = [
        arithmeticSearch,
        addConstantFractions,
        addConstantAndFraction
      ];
      for (let i = 0; i < summingFunctions.length; i++) {
        const status2 = summingFunctions[i](node);
        if (status2.hasChanged()) {
          if (Node.Type.isConstantOrConstantFraction(status2.newNode)) {
            return status2;
          }
        }
      }
      let newNode = clone(node);
      const substeps = [];
      let status;
      status = groupConstantsAndFractions(newNode);
      substeps.push(status);
      newNode = Node.Status.resetChangeGroups(status.newNode);
      const constants = newNode.args[0];
      const fractions = newNode.args[1];
      if (Node.Type.isParenthesis(constants)) {
        const constantList = constants.content;
        const evaluateStatus = arithmeticSearch(constantList);
        status = Node.Status.childChanged(newNode, evaluateStatus, 0);
        substeps.push(status);
        newNode = Node.Status.resetChangeGroups(status.newNode);
      }
      if (Node.Type.isParenthesis(fractions)) {
        const fractionList = fractions.content;
        const evaluateStatus = addConstantFractions(fractionList);
        status = Node.Status.childChanged(newNode, evaluateStatus, 1);
        substeps.push(status);
        newNode = Node.Status.resetChangeGroups(status.newNode);
      }
      status = evaluateConstantSum(newNode);
      substeps.push(status);
      newNode = Node.Status.resetChangeGroups(status.newNode);
      return Node.Status.nodeChanged(
        ChangeTypes.SIMPLIFY_ARITHMETIC,
        node,
        newNode,
        true,
        substeps
      );
    }
    function groupConstantsAndFractions(node) {
      let fractions = node.args.filter(Node.Type.isIntegerFraction);
      let constants = node.args.filter(Node.Type.isConstant);
      if (fractions.length === 0 || constants.length === 0) {
        throw Error("expected both integer fractions and constants, got " + node);
      }
      if (fractions.length + constants.length !== node.args.length) {
        throw Error("can only evaluate integer fractions and constants");
      }
      constants = constants.map((node2) => {
        node2.changeGroup = 1;
        return clone(node2);
      });
      if (constants.length > 1) {
        constants = Node.Creator.parenthesis(Node.Creator.operator("+", constants));
      } else {
        constants = constants[0];
      }
      fractions = fractions.map((node2) => {
        node2.changeGroup = 2;
        return clone(node2);
      });
      if (fractions.length > 1) {
        fractions = Node.Creator.parenthesis(Node.Creator.operator("+", fractions));
      } else {
        fractions = fractions[0];
      }
      const newNode = Node.Creator.operator("+", [constants, fractions]);
      return Node.Status.nodeChanged(
        ChangeTypes.COLLECT_LIKE_TERMS,
        node,
        newNode
      );
    }
    module.exports = evaluateConstantSum;
  }
});

// node_modules/mathsteps/lib/simplifyExpression/collectAndCombineSearch/addLikeTerms.js
var require_addLikeTerms = __commonJS({
  "node_modules/mathsteps/lib/simplifyExpression/collectAndCombineSearch/addLikeTerms.js"(exports, module) {
    var checks = require_checks();
    var clone = require_clone3();
    var evaluateConstantSum = require_evaluateConstantSum();
    var ChangeTypes = require_ChangeTypes();
    var Node = require_node2();
    function addLikeTerms(node, polynomialOnly = false) {
      if (!Node.Type.isOperator(node)) {
        return Node.Status.noChange(node);
      }
      let status;
      if (!polynomialOnly) {
        status = evaluateConstantSum(node);
        if (status.hasChanged()) {
          return status;
        }
      }
      status = addLikePolynomialTerms(node);
      if (status.hasChanged()) {
        return status;
      }
      status = addLikeNthRootTerms(node);
      if (status.hasChanged()) {
        return status;
      }
      return Node.Status.noChange(node);
    }
    function addLikePolynomialTerms(node) {
      if (!checks.canAddLikeTerms.canAddLikeTermPolynomialNodes(node)) {
        return Node.Status.noChange(node);
      }
      return addLikeTermNodes(
        node,
        Node.PolynomialTerm,
        ChangeTypes.ADD_POLYNOMIAL_TERMS
      );
    }
    function addLikeNthRootTerms(node) {
      if (!checks.canAddLikeTerms.canAddLikeTermNthRootNodes(node)) {
        return Node.Status.noChange(node);
      }
      return addLikeTermNodes(
        node,
        Node.NthRootTerm,
        ChangeTypes.ADD_NTH_ROOTS
      );
    }
    function addLikeTermNodes(node, termSubclass, changeType) {
      const substeps = [];
      let newNode = clone(node);
      let status = addPositiveOneCoefficient(newNode, termSubclass);
      if (status.hasChanged()) {
        substeps.push(status);
        newNode = Node.Status.resetChangeGroups(status.newNode);
      }
      status = addNegativeOneCoefficient(newNode, termSubclass);
      if (status.hasChanged()) {
        substeps.push(status);
        newNode = Node.Status.resetChangeGroups(status.newNode);
      }
      status = groupCoefficientsForAdding(newNode, termSubclass);
      substeps.push(status);
      newNode = Node.Status.resetChangeGroups(status.newNode);
      status = evaluateCoefficientSum(newNode, termSubclass);
      substeps.push(status);
      newNode = Node.Status.resetChangeGroups(status.newNode);
      return Node.Status.nodeChanged(
        changeType,
        node,
        newNode,
        true,
        substeps
      );
    }
    function addPositiveOneCoefficient(node, termSubclass) {
      const newNode = clone(node, false);
      let change = false;
      let changeGroup = 1;
      newNode.args.forEach((child, i) => {
        const term = new termSubclass(child);
        if (term.getCoeffValue() === 1) {
          newNode.args[i] = Node.Creator.term(
            term.getBaseNode(),
            term.getExponentNode(),
            Node.Creator.constant(1),
            true
            /* explicit coefficient */
          );
          newNode.args[i].changeGroup = changeGroup;
          node.args[i].changeGroup = changeGroup;
          change = true;
          changeGroup++;
        }
      });
      if (change) {
        return Node.Status.nodeChanged(
          ChangeTypes.ADD_COEFFICIENT_OF_ONE,
          node,
          newNode,
          false
        );
      } else {
        return Node.Status.noChange(node);
      }
    }
    function addNegativeOneCoefficient(node, termSubclass) {
      const newNode = clone(node);
      let change = false;
      let changeGroup = 1;
      newNode.args.forEach((child, i) => {
        const term = new termSubclass(child);
        if (term.getCoeffValue() === -1) {
          newNode.args[i] = Node.Creator.term(
            term.getBaseNode(),
            term.getExponentNode(),
            term.getCoeffNode(),
            true
            /* explicit -1 coefficient */
          );
          node.args[i].changeGroup = changeGroup;
          newNode.args[i].changeGroup = changeGroup;
          change = true;
          changeGroup++;
        }
      });
      if (change) {
        return Node.Status.nodeChanged(
          ChangeTypes.UNARY_MINUS_TO_NEGATIVE_ONE,
          node,
          newNode,
          false
        );
      } else {
        return Node.Status.noChange(node);
      }
    }
    function groupCoefficientsForAdding(node, termSubclass) {
      let newNode = clone(node);
      const termList = newNode.args.map((n) => new termSubclass(n));
      const coefficientList = termList.map((term) => term.getCoeffNode(true));
      const sumOfCoefficents = Node.Creator.parenthesis(
        Node.Creator.operator("+", coefficientList)
      );
      sumOfCoefficents.changeGroup = 1;
      const firstTerm = termList[0];
      const exponentNode = firstTerm.getExponentNode();
      const baseNode = firstTerm.getBaseNode();
      newNode = Node.Creator.term(
        baseNode,
        exponentNode,
        sumOfCoefficents
      );
      return Node.Status.nodeChanged(
        ChangeTypes.GROUP_COEFFICIENTS,
        node,
        newNode,
        false
      );
    }
    function evaluateCoefficientSum(node) {
      const coefficientSum = clone(node).args[0];
      const childStatus = evaluateConstantSum(coefficientSum);
      return Node.Status.childChanged(node, childStatus, 0);
    }
    module.exports = addLikeTerms;
  }
});

// node_modules/mathsteps/lib/simplifyExpression/multiplyFractionsSearch/index.js
var require_multiplyFractionsSearch = __commonJS({
  "node_modules/mathsteps/lib/simplifyExpression/multiplyFractionsSearch/index.js"(exports, module) {
    var ChangeTypes = require_ChangeTypes();
    var Node = require_node2();
    var TreeSearch = require_TreeSearch();
    var search = TreeSearch.postOrder(multiplyFractions);
    function multiplyFractions(node) {
      if (!Node.Type.isOperator(node) || node.op !== "*") {
        return Node.Status.noChange(node);
      }
      const atLeastOneFraction = node.args.some(
        (arg) => Node.CustomType.isFraction(arg)
      );
      const hasPolynomialTerms = node.args.some(Node.PolynomialTerm.isPolynomialTerm);
      const hasPolynomialInDenominatorTerms = node.args.some(hasPolynomialInDenominator);
      if (!atLeastOneFraction || hasPolynomialTerms && !hasPolynomialInDenominatorTerms) {
        return Node.Status.noChange(node);
      }
      const numeratorArgs = [];
      const denominatorArgs = [];
      node.args.forEach((operand) => {
        if (Node.CustomType.isFraction(operand)) {
          const fraction = Node.CustomType.getFraction(operand);
          numeratorArgs.push(fraction.args[0]);
          denominatorArgs.push(fraction.args[1]);
        } else {
          numeratorArgs.push(operand);
        }
      });
      const newNumerator = Node.Creator.parenthesis(
        Node.Creator.operator("*", numeratorArgs)
      );
      const newDenominator = denominatorArgs.length === 1 ? denominatorArgs[0] : Node.Creator.parenthesis(Node.Creator.operator("*", denominatorArgs));
      const newNode = Node.Creator.operator("/", [newNumerator, newDenominator]);
      return Node.Status.nodeChanged(
        ChangeTypes.MULTIPLY_FRACTIONS,
        node,
        newNode
      );
    }
    function hasPolynomialInDenominator(node) {
      if (!Node.CustomType.isFraction(node)) {
        return false;
      }
      const fraction = Node.CustomType.getFraction(node);
      const denominator = fraction.args[1];
      return Node.PolynomialTerm.isPolynomialTerm(denominator);
    }
    module.exports = search;
  }
});

// node_modules/mathsteps/lib/simplifyExpression/collectAndCombineSearch/multiplyLikeTerms.js
var require_multiplyLikeTerms = __commonJS({
  "node_modules/mathsteps/lib/simplifyExpression/collectAndCombineSearch/multiplyLikeTerms.js"(exports, module) {
    var arithmeticSearch = require_arithmeticSearch();
    var checks = require_checks();
    var clone = require_clone3();
    var ConstantOrConstantPower = require_ConstantOrConstantPower();
    var multiplyFractionsSearch = require_multiplyFractionsSearch();
    var ChangeTypes = require_ChangeTypes();
    var Node = require_node2();
    var NthRoot = require_nthRoot3();
    function multiplyLikeTerms(node, polynomialOnly = false) {
      if (!Node.Type.isOperator(node)) {
        return Node.Status.noChange(node);
      }
      let status;
      if (!polynomialOnly && !checks.canMultiplyLikeTermConstantNodes(node)) {
        status = arithmeticSearch(node);
        if (status.hasChanged()) {
          status.changeType = ChangeTypes.MULTIPLY_COEFFICIENTS;
          return status;
        }
        status = multiplyFractionsSearch(node);
        if (status.hasChanged()) {
          status.changeType = ChangeTypes.MULTIPLY_COEFFICIENTS;
          return status;
        }
      }
      status = multiplyPolynomialTerms(node);
      if (status.hasChanged()) {
        status.changeType = ChangeTypes.MULTIPLY_COEFFICIENTS;
        return status;
      }
      status = multiplyNthRoots(node);
      if (status.hasChanged()) {
        return status;
      }
      return Node.Status.noChange(node);
    }
    function multiplyNthRoots(node) {
      if (!checks.canMultiplyLikeTermsNthRoots(node)) {
        return Node.Status.noChange(node);
      }
      let newNode = clone(node);
      const radicands = node.args.map((term) => NthRoot.getRadicandNode(term));
      const newRadicandNode = Node.Creator.operator("*", radicands);
      const firstArg = node.args[0];
      const rootNode = NthRoot.getRootNode(firstArg);
      newNode = Node.Creator.nthRoot(newRadicandNode, rootNode);
      return Node.Status.nodeChanged(ChangeTypes.MULTIPLY_NTH_ROOTS, node, newNode, false);
    }
    function multiplyPolynomialTerms(node) {
      if (!checks.canMultiplyLikeTermPolynomialNodes(node) && !checks.canMultiplyLikeTermConstantNodes(node)) {
        return Node.Status.noChange(node);
      }
      const substeps = [];
      let newNode = clone(node);
      let status = addOneExponent(newNode);
      if (status.hasChanged()) {
        substeps.push(status);
        newNode = Node.Status.resetChangeGroups(status.newNode);
      }
      if (checks.canMultiplyLikeTermConstantNodes(node)) {
        status = collectConstantExponents(newNode);
      } else {
        status = collectPolynomialExponents(newNode);
      }
      substeps.push(status);
      newNode = Node.Status.resetChangeGroups(status.newNode);
      const exponentSum = newNode.args[1].content;
      const sumStatus = arithmeticSearch(exponentSum);
      if (sumStatus.hasChanged()) {
        status = Node.Status.childChanged(newNode, sumStatus, 1);
        substeps.push(status);
        newNode = Node.Status.resetChangeGroups(status.newNode);
      }
      if (substeps.length === 1) {
        return substeps[0];
      } else {
        return Node.Status.nodeChanged(
          ChangeTypes.MULTIPLY_POLYNOMIAL_TERMS,
          node,
          newNode,
          true,
          substeps
        );
      }
    }
    function addOneExponent(node) {
      const newNode = clone(node);
      let change = false;
      let changeGroup = 1;
      if (checks.canMultiplyLikeTermConstantNodes(node)) {
        newNode.args.forEach((child, i) => {
          if (Node.Type.isConstant(child)) {
            const base = ConstantOrConstantPower.getBaseNode(child);
            const exponent = Node.Creator.constant(1);
            newNode.args[i] = Node.Creator.operator("^", [base, exponent]);
            newNode.args[i].changeGroup = changeGroup;
            node.args[i].changeGroup = changeGroup;
            change = true;
            changeGroup++;
          }
        });
      } else {
        newNode.args.forEach((child, i) => {
          const polyTerm = new Node.PolynomialTerm(child);
          if (!polyTerm.getExponentNode()) {
            newNode.args[i] = Node.Creator.polynomialTerm(
              polyTerm.getSymbolNode(),
              Node.Creator.constant(1),
              polyTerm.getCoeffNode()
            );
            newNode.args[i].changeGroup = changeGroup;
            node.args[i].changeGroup = changeGroup;
            change = true;
            changeGroup++;
          }
        });
      }
      if (change) {
        return Node.Status.nodeChanged(
          ChangeTypes.ADD_EXPONENT_OF_ONE,
          node,
          newNode,
          false
        );
      } else {
        return Node.Status.noChange(node);
      }
    }
    function collectConstantExponents(node) {
      const baseNode = ConstantOrConstantPower.getBaseNode(node.args[0]);
      const exponentNodeList = node.args.map(
        ConstantOrConstantPower.getExponentNode
      );
      const newExponent = Node.Creator.parenthesis(
        Node.Creator.operator("+", exponentNodeList)
      );
      const newNode = Node.Creator.operator("^", [baseNode, newExponent]);
      return Node.Status.nodeChanged(
        ChangeTypes.COLLECT_CONSTANT_EXPONENTS,
        node,
        newNode
      );
    }
    function collectPolynomialExponents(node) {
      const polynomialTermList = node.args.map((n) => new Node.PolynomialTerm(n));
      const symbolNode = polynomialTermList[0].getSymbolNode();
      const exponentNodeList = polynomialTermList.map((p) => p.getExponentNode(true));
      const newExponent = Node.Creator.parenthesis(
        Node.Creator.operator("+", exponentNodeList)
      );
      const newNode = Node.Creator.polynomialTerm(symbolNode, newExponent, null);
      return Node.Status.nodeChanged(
        ChangeTypes.COLLECT_POLYNOMIAL_EXPONENTS,
        node,
        newNode
      );
    }
    module.exports = multiplyLikeTerms;
  }
});

// node_modules/mathsteps/lib/simplifyExpression/collectAndCombineSearch/index.js
var require_collectAndCombineSearch = __commonJS({
  "node_modules/mathsteps/lib/simplifyExpression/collectAndCombineSearch/index.js"(exports, module) {
    var addLikeTerms = require_addLikeTerms();
    var checks = require_checks();
    var clone = require_clone3();
    var multiplyLikeTerms = require_multiplyLikeTerms();
    var ChangeTypes = require_ChangeTypes();
    var LikeTermCollector = require_LikeTermCollector();
    var Node = require_node2();
    var TreeSearch = require_TreeSearch();
    var termCollectorFunctions = {
      "+": addLikeTerms,
      "*": multiplyLikeTerms
    };
    var search = TreeSearch.postOrder(collectAndCombineLikeTerms);
    function collectAndCombineLikeTerms(node) {
      if (node.op === "+") {
        const status = collectAndCombineOperation(node);
        if (status.hasChanged()) {
          return status;
        }
        return addLikeTerms(node, true);
      } else if (node.op === "*") {
        if (checks.canMultiplyLikeTermConstantNodes(node)) {
          return multiplyLikeTerms(node, true);
        }
        const status = collectAndCombineOperation(node);
        if (status.hasChanged()) {
          status.newNode.implicit = true;
          return status;
        }
        return multiplyLikeTerms(node, true);
      } else {
        return Node.Status.noChange(node);
      }
    }
    function collectAndCombineOperation(node) {
      let substeps = [];
      const status = LikeTermCollector.collectLikeTerms(clone(node));
      if (!status.hasChanged()) {
        return status;
      }
      substeps.push(status);
      let newNode = Node.Status.resetChangeGroups(status.newNode);
      const combineSteps = combineLikeTerms(newNode);
      if (combineSteps.length > 0) {
        substeps = substeps.concat(combineSteps);
        const lastStep = combineSteps[combineSteps.length - 1];
        newNode = Node.Status.resetChangeGroups(lastStep.newNode);
      }
      return Node.Status.nodeChanged(
        ChangeTypes.COLLECT_AND_COMBINE_LIKE_TERMS,
        node,
        newNode,
        true,
        substeps
      );
    }
    function combineLikeTerms(node) {
      const steps = [];
      let newNode = clone(node);
      for (let i = 0; i < node.args.length; i++) {
        let child = node.args[i];
        if (!Node.Type.isParenthesis(child)) {
          continue;
        }
        child = child.content;
        const childStatus = termCollectorFunctions[newNode.op](child);
        if (childStatus.hasChanged()) {
          const status = Node.Status.childChanged(newNode, childStatus, i);
          steps.push(status);
          newNode = Node.Status.resetChangeGroups(status.newNode);
        }
      }
      return steps;
    }
    module.exports = search;
  }
});

// node_modules/mathsteps/lib/simplifyExpression/distributeSearch/index.js
var require_distributeSearch = __commonJS({
  "node_modules/mathsteps/lib/simplifyExpression/distributeSearch/index.js"(exports, module) {
    var arithmeticSearch = require_arithmeticSearch();
    var clone = require_clone3();
    var collectAndCombineSearch = require_collectAndCombineSearch();
    var rearrangeCoefficient = require_rearrangeCoefficient();
    var ChangeTypes = require_ChangeTypes();
    var Negative = require_Negative();
    var Node = require_node2();
    var TreeSearch = require_TreeSearch();
    var search = TreeSearch.postOrder(distribute);
    function distribute(node) {
      if (Node.Type.isUnaryMinus(node)) {
        return distributeUnaryMinus(node);
      } else if (Node.Type.isOperator(node, "*")) {
        return distributeAndSimplifyMultiplication(node);
      } else if (Node.Type.isOperator(node, "^")) {
        return expandBase(node);
      } else {
        return Node.Status.noChange(node);
      }
    }
    function expandBase(node) {
      if (!Node.Type.isOperator(node, "^")) {
        return Node.Status.noChange(node);
      }
      const base = Node.Type.isParenthesis(node.args[0]) ? node.args[0].content : node.args[0];
      const exponent = Node.Type.isParenthesis(node.args[1]) ? node.args[1].content : node.args[1];
      const exponentValue = parseFloat(exponent.value);
      if (!(Number.isInteger(exponentValue) && exponentValue > 1)) {
        return Node.Status.noChange(node);
      }
      if (!Node.Type.isFunction(base, "nthRoot") && !Node.Type.isOperator(base, "+")) {
        return Node.Status.noChange(node);
      }
      const expandedBase = Node.Type.isFunction(base, "nthRoot") ? base : node.args[0];
      const expandedNode = Node.Creator.operator("*", Array(parseFloat(exponent.value)).fill(expandedBase));
      return Node.Status.nodeChanged(
        ChangeTypes.EXPAND_EXPONENT,
        node,
        expandedNode,
        false
      );
    }
    function distributeUnaryMinus(node) {
      if (!Node.Type.isUnaryMinus(node)) {
        return Node.Status.noChange(node);
      }
      const unaryContent = node.args[0];
      if (!Node.Type.isParenthesis(unaryContent)) {
        return Node.Status.noChange(node);
      }
      const content = unaryContent.content;
      if (!Node.Type.isOperator(content)) {
        return Node.Status.noChange(node);
      }
      const newContent = clone(content);
      node.changeGroup = 1;
      if (content.op === "*" || content.op === "/") {
        newContent.args[0] = Negative.negate(newContent.args[0]);
        newContent.args[0].changeGroup = 1;
        const newNode = Node.Creator.parenthesis(newContent);
        return Node.Status.nodeChanged(
          ChangeTypes.DISTRIBUTE_NEGATIVE_ONE,
          node,
          newNode,
          false
        );
      } else if (content.op === "+") {
        const newArgs = newContent.args.map((arg) => {
          const newArg = Negative.negate(arg);
          newArg.changeGroup = 1;
          return newArg;
        });
        newContent.args = newArgs;
        const newNode = Node.Creator.parenthesis(newContent);
        return Node.Status.nodeChanged(
          ChangeTypes.DISTRIBUTE_NEGATIVE_ONE,
          node,
          newNode,
          false
        );
      } else {
        return Node.Status.noChange(node);
      }
    }
    function distributeAndSimplifyMultiplication(node) {
      if (!Node.Type.isOperator(node) || node.op !== "*") {
        return Node.Status.noChange(node);
      }
      for (let i = 0; i + 1 < node.args.length; i++) {
        if (!isParenthesisOfAddition(node.args[i]) && !isParenthesisOfAddition(node.args[i + 1])) {
          continue;
        }
        let newNode = clone(node);
        const substeps = [];
        let status;
        const combinedNode = distributeTwoNodes(newNode.args[i], newNode.args[i + 1]);
        node.args[i].changeGroup = 1;
        node.args[i + 1].changeGroup = 1;
        combinedNode.changeGroup = 1;
        if (newNode.args.length > 2) {
          newNode.args.splice(i, 2, combinedNode);
          newNode.args[i].changeGroup = 1;
        } else {
          newNode = combinedNode;
          newNode.changeGroup = 1;
        }
        status = Node.Status.nodeChanged(
          ChangeTypes.DISTRIBUTE,
          node,
          newNode,
          false
        );
        substeps.push(status);
        newNode = Node.Status.resetChangeGroups(status.newNode);
        if (Node.Type.isOperator(newNode, "*")) {
          const childStatus = simplifyWithParens(newNode.args[i]);
          if (childStatus.hasChanged()) {
            status = Node.Status.childChanged(newNode, childStatus, i);
            substeps.push(status);
            newNode = Node.Status.resetChangeGroups(status.newNode);
          }
        } else if (Node.Type.isParenthesis(newNode)) {
          status = simplifyWithParens(newNode);
          if (status.hasChanged()) {
            substeps.push(status);
            newNode = Node.Status.resetChangeGroups(status.newNode);
          }
        } else {
          throw Error("Unsupported node type for distribution: " + node);
        }
        if (substeps.length === 1) {
          return substeps[0];
        }
        return Node.Status.nodeChanged(
          ChangeTypes.DISTRIBUTE,
          node,
          newNode,
          false,
          substeps
        );
      }
      return Node.Status.noChange(node);
    }
    function distributeTwoNodes(firstNode, secondNode) {
      let firstArgs, secondArgs;
      if (isParenthesisOfAddition(firstNode)) {
        firstArgs = firstNode.content.args;
      } else {
        firstArgs = [firstNode];
      }
      if (isParenthesisOfAddition(secondNode)) {
        secondArgs = secondNode.content.args;
      } else {
        secondArgs = [secondNode];
      }
      const newArgs = [];
      if ([firstArgs, secondArgs].filter(hasFraction).length === 1) {
        const firstArgsHasFraction = hasFraction(firstArgs);
        const fractionNodes = firstArgsHasFraction ? firstArgs : secondArgs;
        const nonFractionTerm = firstArgsHasFraction ? secondNode : firstNode;
        fractionNodes.forEach((node) => {
          let arg;
          if (isFraction(node)) {
            let numerator = Node.Creator.operator("*", [node.args[0], nonFractionTerm]);
            numerator = Node.Creator.parenthesis(numerator);
            arg = Node.Creator.operator("/", [numerator, node.args[1]]);
          } else {
            arg = Node.Creator.operator("*", [node, nonFractionTerm]);
          }
          arg.changeGroup = 1;
          newArgs.push(arg);
        });
      } else if (firstArgs.length > 1 && secondArgs.length > 1) {
        firstArgs.forEach((leftArg) => {
          const arg = Node.Creator.operator("*", [leftArg, secondNode]);
          arg.changeGroup = 1;
          newArgs.push(arg);
        });
      } else {
        firstArgs.forEach((leftArg) => {
          secondArgs.forEach((rightArg) => {
            const arg = Node.Creator.operator("*", [leftArg, rightArg]);
            arg.changeGroup = 1;
            newArgs.push(arg);
          });
        });
      }
      return Node.Creator.parenthesis(Node.Creator.operator("+", newArgs));
    }
    function hasFraction(args) {
      return args.filter(isFraction).length > 0;
    }
    function isFraction(node) {
      return Node.Type.isOperator(node, "/");
    }
    function simplifyWithParens(node) {
      if (!Node.Type.isParenthesis(node)) {
        throw Error("expected " + node + " to be a parenthesis node");
      }
      const status = simplify(node.content);
      if (status.hasChanged()) {
        return Node.Status.childChanged(node, status);
      } else {
        return Node.Status.noChange(node);
      }
    }
    function simplify(node) {
      const substeps = [];
      const simplifyFunctions = [
        arithmeticSearch,
        // e.g. 2*9 -> 18
        rearrangeCoefficient,
        // e.g. x*5 -> 5x
        collectAndCombineSearch,
        // e.g 2x*4x -> 8x^2
        distributeAndSimplifyMultiplication
        // e.g. (2+x)(3+x) -> 2*(3+x) recurses
      ];
      let newNode = clone(node);
      for (let i = 0; i < newNode.args.length; i++) {
        for (let j = 0; j < simplifyFunctions.length; j++) {
          const childStatus = simplifyFunctions[j](newNode.args[i]);
          if (childStatus.hasChanged()) {
            const status = Node.Status.childChanged(newNode, childStatus, i);
            substeps.push(status);
            newNode = Node.Status.resetChangeGroups(status.newNode);
          }
        }
      }
      if (substeps.length === 0) {
        return Node.Status.noChange(node);
      } else {
        return Node.Status.nodeChanged(
          ChangeTypes.SIMPLIFY_TERMS,
          node,
          newNode,
          false,
          substeps
        );
      }
    }
    function isParenthesisOfAddition(node) {
      if (!Node.Type.isParenthesis(node)) {
        return false;
      }
      const content = node.content;
      return Node.Type.isOperator(content, "+");
    }
    module.exports = search;
  }
});

// node_modules/mathsteps/lib/simplifyExpression/divisionSearch/index.js
var require_divisionSearch = __commonJS({
  "node_modules/mathsteps/lib/simplifyExpression/divisionSearch/index.js"(exports, module) {
    var ChangeTypes = require_ChangeTypes();
    var Node = require_node2();
    var TreeSearch = require_TreeSearch();
    var search = TreeSearch.preOrder(division);
    function division(node) {
      if (!Node.Type.isOperator(node) || node.op !== "/") {
        return Node.Status.noChange(node);
      }
      let nodeStatus = multiplyByInverse(node);
      if (nodeStatus.hasChanged()) {
        return nodeStatus;
      }
      nodeStatus = simplifyDivisionChain(node);
      if (nodeStatus.hasChanged()) {
        return nodeStatus;
      }
      return Node.Status.noChange(node);
    }
    function multiplyByInverse(node) {
      let denominator = node.args[1];
      if (Node.Type.isParenthesis(denominator)) {
        denominator = denominator.content;
      }
      if (!Node.Type.isOperator(denominator) || denominator.op !== "/") {
        return Node.Status.noChange(node);
      }
      const inverseNumerator = denominator.args[1];
      const inverseDenominator = denominator.args[0];
      const inverseFraction = Node.Creator.operator(
        "/",
        [inverseNumerator, inverseDenominator]
      );
      const newNode = Node.Creator.operator("*", [node.args[0], inverseFraction]);
      return Node.Status.nodeChanged(
        ChangeTypes.MULTIPLY_BY_INVERSE,
        node,
        newNode
      );
    }
    function simplifyDivisionChain(node) {
      const denominatorList = getDenominatorList(node);
      if (denominatorList.length > 2) {
        const numerator = denominatorList.shift();
        const denominator = Node.Creator.parenthesis(
          Node.Creator.operator("*", denominatorList)
        );
        const newNode = Node.Creator.operator("/", [numerator, denominator]);
        return Node.Status.nodeChanged(
          ChangeTypes.SIMPLIFY_DIVISION,
          node,
          newNode
        );
      }
      return Node.Status.noChange(node);
    }
    function getDenominatorList(denominator) {
      let node = denominator;
      const denominatorList = [];
      while (node.op === "/") {
        denominatorList.unshift(node.args[1]);
        node = node.args[0];
      }
      denominatorList.unshift(node);
      return denominatorList;
    }
    module.exports = search;
  }
});

// node_modules/mathsteps/lib/simplifyExpression/fractionsSearch/cancelLikeTerms.js
var require_cancelLikeTerms = __commonJS({
  "node_modules/mathsteps/lib/simplifyExpression/fractionsSearch/cancelLikeTerms.js"(exports, module) {
    var clone = require_clone3();
    var divideByGCD = require_divideByGCD();
    var print2 = require_print2();
    var ChangeTypes = require_ChangeTypes();
    var Negative = require_Negative();
    var Node = require_node2();
    var CancelOutStatus = class {
      constructor(numerator, denominator, hasChanged = false) {
        this.numerator = numerator;
        this.denominator = denominator;
        this.hasChanged = hasChanged;
      }
    };
    function cancelLikeTerms(node) {
      if (!Node.Type.isOperator(node) || node.op !== "/") {
        return Node.Status.noChange(node);
      }
      let newNode = clone(node);
      const numerator = newNode.args[0];
      const denominator = newNode.args[1];
      if (!isMultiplicationOfTerms(numerator) && !isMultiplicationOfTerms(denominator)) {
        const cancelStatus = cancelTerms(numerator, denominator);
        if (cancelStatus.hasChanged) {
          newNode.args[0] = cancelStatus.numerator || Node.Creator.constant(1);
          if (cancelStatus.denominator) {
            newNode.args[1] = cancelStatus.denominator;
          } else {
            newNode = newNode.args[0];
          }
          return Node.Status.nodeChanged(
            ChangeTypes.CANCEL_TERMS,
            node,
            newNode
          );
        } else {
          return Node.Status.noChange(node);
        }
      } else if (isMultiplicationOfTerms(numerator) && !isMultiplicationOfTerms(denominator)) {
        const numeratorArgs = Node.Type.isParenthesis(numerator) ? numerator.content.args : numerator.args;
        for (let i = 0; i < numeratorArgs.length; i++) {
          const cancelStatus = cancelTerms(numeratorArgs[i], denominator);
          if (cancelStatus.hasChanged) {
            if (cancelStatus.numerator) {
              numeratorArgs[i] = cancelStatus.numerator;
            } else {
              numeratorArgs.splice(i, 1);
              if (numeratorArgs.length === 1) {
                newNode.args[0] = numeratorArgs[0];
              }
            }
            if (cancelStatus.denominator) {
              newNode.args[1] = cancelStatus.denominator;
            } else {
              newNode = newNode.args[0];
            }
            return Node.Status.nodeChanged(
              ChangeTypes.CANCEL_TERMS,
              node,
              newNode
            );
          }
        }
        return Node.Status.noChange(node);
      } else if (isMultiplicationOfTerms(denominator) && !isMultiplicationOfTerms(numerator)) {
        const denominatorArgs = Node.Type.isParenthesis(denominator) ? denominator.content.args : denominator.args;
        for (let i = 0; i < denominatorArgs.length; i++) {
          const cancelStatus = cancelTerms(numerator, denominatorArgs[i]);
          if (cancelStatus.hasChanged) {
            newNode.args[0] = cancelStatus.numerator || Node.Creator.constant(1);
            if (cancelStatus.denominator) {
              denominatorArgs[i] = cancelStatus.denominator;
            } else {
              denominatorArgs.splice(i, 1);
              if (denominatorArgs.length === 1) {
                newNode.args[1] = denominatorArgs[0];
              }
            }
            return Node.Status.nodeChanged(
              ChangeTypes.CANCEL_TERMS,
              node,
              newNode
            );
          }
        }
        return Node.Status.noChange(node);
      } else {
        const numeratorArgs = Node.Type.isParenthesis(numerator) ? numerator.content.args : numerator.args;
        const denominatorArgs = Node.Type.isParenthesis(denominator) ? denominator.content.args : denominator.args;
        for (let i = 0; i < numeratorArgs.length; i++) {
          for (let j = 0; j < denominatorArgs.length; j++) {
            const cancelStatus = cancelTerms(numeratorArgs[i], denominatorArgs[j]);
            if (cancelStatus.hasChanged) {
              if (cancelStatus.numerator) {
                numeratorArgs[i] = cancelStatus.numerator;
              } else {
                numeratorArgs.splice(i, 1);
                if (numeratorArgs.length === 1) {
                  newNode.args[0] = numeratorArgs[0];
                }
              }
              if (cancelStatus.denominator) {
                denominatorArgs[j] = cancelStatus.denominator;
              } else {
                denominatorArgs.splice(j, 1);
                if (denominatorArgs.length === 1) {
                  newNode.args[1] = denominatorArgs[0];
                }
              }
              return Node.Status.nodeChanged(
                ChangeTypes.CANCEL_TERMS,
                node,
                newNode
              );
            }
          }
        }
        return Node.Status.noChange(node);
      }
    }
    function cancelTerms(numerator, denominator) {
      if (Node.Type.isUnaryMinus(numerator)) {
        const cancelStatus = cancelTerms(numerator.args[0], denominator);
        if (!cancelStatus.numerator) {
          numerator = Node.Creator.constant(-1);
        } else if (Negative.isNegative(cancelStatus.numerator)) {
          numerator = Negative.negate(cancelStatus.numerator);
        } else {
          numerator.args[0] = cancelStatus.numerator;
        }
        denominator = cancelTerms.denominator;
        return new CancelOutStatus(numerator, denominator, cancelStatus.hasChanged);
      }
      if (Node.Type.isUnaryMinus(denominator)) {
        const cancelStatus = cancelTerms(numerator, denominator.args[0]);
        numerator = cancelStatus.numerator;
        if (cancelStatus.denominator) {
          denominator.args[0] = cancelStatus.denominator;
        } else {
          denominator = cancelStatus.denominator;
          if (numerator) {
            numerator = Negative.negate(numerator);
          } else {
            numerator = Node.Creator.constant(-1);
          }
        }
        return new CancelOutStatus(numerator, denominator, cancelStatus.hasChanged);
      }
      if (Node.Type.isParenthesis(numerator)) {
        const cancelStatus = cancelTerms(numerator.content, denominator);
        if (cancelStatus.numerator) {
          numerator.content = cancelStatus.numerator;
        } else {
          numerator = cancelStatus.numerator;
        }
        denominator = cancelStatus.denominator;
        return new CancelOutStatus(numerator, denominator, cancelStatus.hasChanged);
      }
      if (Node.Type.isParenthesis(denominator)) {
        const cancelStatus = cancelTerms(numerator, denominator.content);
        if (cancelStatus.denominator) {
          denominator.content = cancelStatus.denominator;
        } else {
          denominator = cancelStatus.denominator;
        }
        numerator = cancelStatus.numerator;
        return new CancelOutStatus(numerator, denominator, cancelStatus.hasChanged);
      }
      if (print2.ascii(numerator) === print2.ascii(denominator)) {
        return new CancelOutStatus(null, null, true);
      }
      if (Node.Type.isOperator(numerator, "^") && Node.Type.isOperator(denominator, "^") && print2.ascii(numerator.args[0]) === print2.ascii(denominator.args[0])) {
        const numeratorExponent = numerator.args[1];
        let denominatorExponent = denominator.args[1];
        denominatorExponent = Node.Creator.parenthesis(denominatorExponent);
        const newExponent = Node.Creator.parenthesis(
          Node.Creator.operator("-", [numeratorExponent, denominatorExponent])
        );
        numerator.args[1] = newExponent;
        return new CancelOutStatus(numerator, null, true);
      }
      if (Node.PolynomialTerm.isPolynomialTerm(numerator) && Node.PolynomialTerm.isPolynomialTerm(denominator)) {
        const numeratorTerm = new Node.PolynomialTerm(numerator);
        const denominatorTerm = new Node.PolynomialTerm(denominator);
        if (numeratorTerm.getSymbolName() !== denominatorTerm.getSymbolName()) {
          return new CancelOutStatus(numerator, denominator);
        }
        const numeratorExponent = numeratorTerm.getExponentNode(true);
        let denominatorExponent = denominatorTerm.getExponentNode(true);
        if (print2.ascii(numeratorExponent) === print2.ascii(denominatorExponent)) {
          numerator = numeratorTerm.getCoeffNode();
        } else {
          denominatorExponent = Node.Creator.parenthesis(denominatorExponent);
          const newExponent = Node.Creator.parenthesis(
            Node.Creator.operator("-", [numeratorExponent, denominatorExponent])
          );
          numerator = Node.Creator.polynomialTerm(
            numeratorTerm.getSymbolNode(),
            newExponent,
            numeratorTerm.getCoeffNode()
          );
        }
        denominator = denominatorTerm.getCoeffNode();
        return new CancelOutStatus(numerator, denominator, true);
      }
      if (Node.Type.isConstant(numerator) && Node.Type.isOperator(denominator, "*") && Node.PolynomialTerm.isPolynomialTerm(denominator)) {
        const denominatorTerm = new Node.PolynomialTerm(denominator);
        const coeff = denominatorTerm.getCoeffNode();
        const variable = denominatorTerm.getSymbolNode();
        const exponent = denominatorTerm.getExponentNode();
        const frac = Node.Creator.operator("/", [numerator, coeff]);
        let newCoeff = clone(coeff);
        const reduceStatus = divideByGCD(frac);
        if (!reduceStatus.hasChanged()) {
          return new CancelOutStatus(numerator, denominator, false);
        }
        if (Node.Type.isConstant(reduceStatus.newNode)) {
          numerator = reduceStatus.newNode;
          newCoeff = null;
        } else {
          [numerator, newCoeff] = reduceStatus.newNode.args;
        }
        denominator = Node.Creator.polynomialTerm(variable, exponent, newCoeff);
        return new CancelOutStatus(numerator, denominator, true);
      }
      if (Node.Type.isConstant(numerator) && Node.Type.isConstant(denominator)) {
        const frac = Node.Creator.operator("/", [numerator, denominator]);
        const reduceStatus = divideByGCD(frac);
        if (!reduceStatus.hasChanged()) {
          return new CancelOutStatus(numerator, denominator, false);
        }
        if (Node.Type.isConstant(reduceStatus.newNode)) {
          return new CancelOutStatus(reduceStatus.newNode, null, true);
        }
        if (Node.Type.isConstant(reduceStatus.newNode)) {
          numerator = reduceStatus.newNode;
          denominator = null;
        } else {
          [numerator, denominator] = reduceStatus.newNode.args;
        }
        return new CancelOutStatus(numerator, denominator, true);
      }
      return new CancelOutStatus(numerator, denominator);
    }
    function isMultiplicationOfTerms(node) {
      if (Node.Type.isParenthesis(node)) {
        return isMultiplicationOfTerms(node.content);
      }
      return Node.Type.isOperator(node, "*") && !Node.PolynomialTerm.isPolynomialTerm(node);
    }
    module.exports = cancelLikeTerms;
  }
});

// node_modules/mathsteps/lib/simplifyExpression/fractionsSearch/simplifyFractionSigns.js
var require_simplifyFractionSigns = __commonJS({
  "node_modules/mathsteps/lib/simplifyExpression/fractionsSearch/simplifyFractionSigns.js"(exports, module) {
    var clone = require_clone3();
    var ChangeTypes = require_ChangeTypes();
    var Negative = require_Negative();
    var Node = require_node2();
    function simplifySigns(fraction) {
      if (!Node.Type.isOperator(fraction) || fraction.op !== "/") {
        return Node.Status.noChange(fraction);
      }
      const oldFraction = clone(fraction);
      let numerator = fraction.args[0];
      let denominator = fraction.args[1];
      if (Negative.isNegative(denominator)) {
        denominator = Negative.negate(denominator);
        const changeType = Negative.isNegative(numerator) ? ChangeTypes.CANCEL_MINUSES : ChangeTypes.SIMPLIFY_SIGNS;
        numerator = Negative.negate(numerator);
        const newFraction = Node.Creator.operator("/", [numerator, denominator]);
        return Node.Status.nodeChanged(changeType, oldFraction, newFraction);
      } else {
        return Node.Status.noChange(fraction);
      }
    }
    module.exports = simplifySigns;
  }
});

// node_modules/mathsteps/lib/simplifyExpression/fractionsSearch/simplifyPolynomialFraction.js
var require_simplifyPolynomialFraction = __commonJS({
  "node_modules/mathsteps/lib/simplifyExpression/fractionsSearch/simplifyPolynomialFraction.js"(exports, module) {
    var arithmeticSearch = require_arithmeticSearch();
    var clone = require_clone3();
    var divideByGCD = require_divideByGCD();
    var Node = require_node2();
    function simplifyPolynomialFraction(node) {
      if (!Node.PolynomialTerm.isPolynomialTerm(node)) {
        return Node.Status.noChange(node);
      }
      const polyNode = new Node.PolynomialTerm(clone(node));
      if (!polyNode.hasFractionCoeff()) {
        return Node.Status.noChange(node);
      }
      const coefficientSimplifications = [
        divideByGCD,
        // for integer fractions
        arithmeticSearch
        // for decimal fractions
      ];
      for (let i = 0; i < coefficientSimplifications.length; i++) {
        const coefficientFraction = polyNode.getCoeffNode();
        const newCoeffStatus = coefficientSimplifications[i](coefficientFraction);
        if (newCoeffStatus.hasChanged()) {
          let newCoeff = Node.Status.resetChangeGroups(newCoeffStatus.newNode);
          if (newCoeff.value === "1") {
            newCoeff = null;
          }
          const exponentNode = polyNode.getExponentNode();
          const newNode = Node.Creator.polynomialTerm(
            polyNode.getSymbolNode(),
            exponentNode,
            newCoeff
          );
          return Node.Status.nodeChanged(newCoeffStatus.changeType, node, newNode);
        }
      }
      return Node.Status.noChange(node);
    }
    module.exports = simplifyPolynomialFraction;
  }
});

// node_modules/mathsteps/lib/simplifyExpression/fractionsSearch/index.js
var require_fractionsSearch = __commonJS({
  "node_modules/mathsteps/lib/simplifyExpression/fractionsSearch/index.js"(exports, module) {
    var addConstantAndFraction = require_addConstantAndFraction();
    var addConstantFractions = require_addConstantFractions();
    var cancelLikeTerms = require_cancelLikeTerms();
    var divideByGCD = require_divideByGCD();
    var simplifyFractionSigns = require_simplifyFractionSigns();
    var simplifyPolynomialFraction = require_simplifyPolynomialFraction();
    var Node = require_node2();
    var TreeSearch = require_TreeSearch();
    var SIMPLIFICATION_FUNCTIONS = [
      // e.g. 2/3 + 5/6
      addConstantFractions,
      // e.g. 4 + 5/6 or 4.5 + 6/8
      addConstantAndFraction,
      // e.g. 2/-9  ->  -2/9      e.g. -2/-9  ->  2/9
      simplifyFractionSigns,
      // e.g. 8/12  ->  2/3 (divide by GCD 4)
      divideByGCD,
      // e.g. 2x/4 -> x/2 (divideByGCD but for coefficients of polynomial terms)
      simplifyPolynomialFraction,
      // e.g. (2x * 5) / 2x  ->  5
      cancelLikeTerms
    ];
    var search = TreeSearch.preOrder(simplifyFractions);
    function simplifyFractions(node) {
      for (let i = 0; i < SIMPLIFICATION_FUNCTIONS.length; i++) {
        const nodeStatus = SIMPLIFICATION_FUNCTIONS[i](node);
        if (nodeStatus.hasChanged()) {
          return nodeStatus;
        } else {
          node = nodeStatus.newNode;
        }
      }
      return Node.Status.noChange(node);
    }
    module.exports = search;
  }
});

// node_modules/mathsteps/lib/simplifyExpression/functionsSearch/absoluteValue.js
var require_absoluteValue = __commonJS({
  "node_modules/mathsteps/lib/simplifyExpression/functionsSearch/absoluteValue.js"(exports, module) {
    var clone = require_clone3();
    var math = require_mathjs();
    var ChangeTypes = require_ChangeTypes();
    var evaluate = require_evaluate();
    var Node = require_node2();
    function absoluteValue(node) {
      if (!Node.Type.isFunction(node, "abs")) {
        return Node.Status.noChange(node);
      }
      if (node.args.length > 1) {
        return Node.Status.noChange(node);
      }
      let newNode = clone(node);
      const argument = newNode.args[0];
      if (Node.Type.isConstant(argument, true)) {
        newNode = Node.Creator.constant(math.abs(evaluate(argument)));
        return Node.Status.nodeChanged(
          ChangeTypes.ABSOLUTE_VALUE,
          node,
          newNode
        );
      } else if (Node.Type.isConstantFraction(argument, true)) {
        const newNumerator = Node.Creator.constant(
          math.abs(evaluate(argument.args[0]))
        );
        const newDenominator = Node.Creator.constant(
          math.abs(evaluate(argument.args[1]))
        );
        newNode = Node.Creator.operator("/", [newNumerator, newDenominator]);
        return Node.Status.nodeChanged(
          ChangeTypes.ABSOLUTE_VALUE,
          node,
          newNode
        );
      } else {
        return Node.Status.noChange(node);
      }
    }
    module.exports = absoluteValue;
  }
});

// node_modules/mathsteps/lib/simplifyExpression/functionsSearch/index.js
var require_functionsSearch = __commonJS({
  "node_modules/mathsteps/lib/simplifyExpression/functionsSearch/index.js"(exports, module) {
    var absoluteValue = require_absoluteValue();
    var Node = require_node2();
    var NthRoot = require_nthRoot3();
    var TreeSearch = require_TreeSearch();
    var FUNCTIONS = [
      NthRoot.nthRoot,
      absoluteValue
    ];
    var search = TreeSearch.postOrder(functions);
    function functions(node) {
      if (!Node.Type.isFunction(node)) {
        return Node.Status.noChange(node);
      }
      for (let i = 0; i < FUNCTIONS.length; i++) {
        const nodeStatus = FUNCTIONS[i](node);
        if (nodeStatus.hasChanged()) {
          return nodeStatus;
        }
      }
      return Node.Status.noChange(node);
    }
    module.exports = search;
  }
});

// node_modules/mathsteps/lib/simplifyExpression/stepThrough.js
var require_stepThrough2 = __commonJS({
  "node_modules/mathsteps/lib/simplifyExpression/stepThrough.js"(exports, module) {
    var checks = require_checks();
    var Node = require_node2();
    var Status = require_Status();
    var arithmeticSearch = require_arithmeticSearch();
    var basicsSearch = require_basicsSearch();
    var breakUpNumeratorSearch = require_breakUpNumeratorSearch();
    var collectAndCombineSearch = require_collectAndCombineSearch();
    var distributeSearch = require_distributeSearch();
    var divisionSearch = require_divisionSearch();
    var fractionsSearch = require_fractionsSearch();
    var functionsSearch = require_functionsSearch();
    var multiplyFractionsSearch = require_multiplyFractionsSearch();
    var clone = require_clone3();
    var flattenOperands = require_flattenOperands();
    var print2 = require_print2();
    var removeUnnecessaryParens = require_removeUnnecessaryParens();
    function stepThrough(node, debug = false) {
      if (debug) {
        console.log("\n\nSimplifying: " + print2.ascii(node, false, true));
      }
      if (checks.hasUnsupportedNodes(node)) {
        return [];
      }
      let nodeStatus;
      const steps = [];
      const originalExpressionStr = print2.ascii(node);
      const MAX_STEP_COUNT = 20;
      let iters = 0;
      nodeStatus = step(node);
      while (nodeStatus.hasChanged()) {
        if (debug) {
          logSteps(nodeStatus);
        }
        steps.push(removeUnnecessaryParensInStep(nodeStatus));
        node = Status.resetChangeGroups(nodeStatus.newNode);
        nodeStatus = step(node);
        if (iters++ === MAX_STEP_COUNT) {
          console.error("Math error: Potential infinite loop for expression: " + originalExpressionStr + ", returning no steps");
          return [];
        }
      }
      return steps;
    }
    function step(node) {
      let nodeStatus;
      node = flattenOperands(node);
      node = removeUnnecessaryParens(node, true);
      const simplificationTreeSearches = [
        // Basic simplifications that we always try first e.g. (...)^0 => 1
        basicsSearch,
        // Simplify any division chains so there's at most one division operation.
        // e.g. 2/x/6 -> 2/(x*6)        e.g. 2/(x/6) => 2 * 6/x
        divisionSearch,
        // Adding fractions, cancelling out things in fractions
        fractionsSearch,
        // e.g. addition of polynomial terms: 2x + 4x^2 + x => 4x^2 + 3x
        // e.g. multiplication of polynomial terms: 2x * x * x^2 => 2x^3
        // e.g. multiplication of constants: 10^3 * 10^2 => 10^5
        collectAndCombineSearch,
        // e.g. 2 + 2 => 4
        arithmeticSearch,
        // e.g. (2 + x) / 4 => 2/4 + x/4
        breakUpNumeratorSearch,
        // e.g. 3/x * 2x/5 => (3 * 2x) / (x * 5)
        multiplyFractionsSearch,
        // e.g. (2x + 3)(x + 4) => 2x^2 + 11x + 12
        distributeSearch,
        // e.g. abs(-4) => 4
        functionsSearch
      ];
      for (let i = 0; i < simplificationTreeSearches.length; i++) {
        nodeStatus = simplificationTreeSearches[i](node);
        node = removeUnnecessaryParens(nodeStatus.newNode, true);
        if (nodeStatus.hasChanged()) {
          node = flattenOperands(node);
          nodeStatus.newNode = clone(node);
          return nodeStatus;
        } else {
          node = flattenOperands(node);
        }
      }
      return Node.Status.noChange(node);
    }
    function removeUnnecessaryParensInStep(nodeStatus) {
      if (nodeStatus.substeps.length > 0) {
        nodeStatus.substeps.map(removeUnnecessaryParensInStep);
      }
      nodeStatus.oldNode = removeUnnecessaryParens(nodeStatus.oldNode, true);
      nodeStatus.newNode = removeUnnecessaryParens(nodeStatus.newNode, true);
      return nodeStatus;
    }
    function logSteps(nodeStatus) {
      console.log(nodeStatus.changeType);
      console.log(print2.ascii(nodeStatus.newNode) + "\n");
      if (nodeStatus.substeps.length > 0) {
        console.log("\nsubsteps: ");
        nodeStatus.substeps.forEach((substep) => substep);
      }
    }
    module.exports = stepThrough;
  }
});

// node_modules/mathsteps/lib/simplifyExpression/index.js
var require_simplifyExpression = __commonJS({
  "node_modules/mathsteps/lib/simplifyExpression/index.js"(exports, module) {
    var math = require_mathjs();
    var stepThrough = require_stepThrough2();
    function simplifyExpressionString(expressionString, debug = false) {
      let exprNode;
      try {
        exprNode = math.parse(expressionString);
      } catch (err) {
        return [];
      }
      if (exprNode) {
        return stepThrough(exprNode, debug);
      }
      return [];
    }
    module.exports = simplifyExpressionString;
  }
});

// node_modules/mathsteps/lib/equation/Equation.js
var require_Equation = __commonJS({
  "node_modules/mathsteps/lib/equation/Equation.js"(exports, module) {
    var math = require_mathjs();
    var clone = require_clone3();
    var printNode = require_print2();
    var Equation = class _Equation {
      constructor(leftNode, rightNode, comparator) {
        this.leftNode = leftNode;
        this.rightNode = rightNode;
        this.comparator = comparator;
      }
      // Prints an Equation properly using the print module
      ascii(showPlusMinus = false) {
        const leftSide = printNode.ascii(this.leftNode, showPlusMinus);
        const rightSide = printNode.ascii(this.rightNode, showPlusMinus);
        const comparator = this.comparator;
        return `${leftSide} ${comparator} ${rightSide}`;
      }
      // Prints an Equation properly using LaTeX
      latex(showPlusMinus = false) {
        const leftSide = printNode.latex(this.leftNode, showPlusMinus);
        const rightSide = printNode.latex(this.rightNode, showPlusMinus);
        const comparator = this.comparator;
        return `${leftSide} ${comparator} ${rightSide}`;
      }
      clone() {
        const newLeft = clone(this.leftNode);
        const newRight = clone(this.rightNode);
        return new _Equation(newLeft, newRight, this.comparator);
      }
    };
    Equation.createEquationFromString = function(str, comparator) {
      const sides = str.split(comparator);
      if (sides.length !== 2) {
        throw Error("Expected two sides of an equation using comparator: " + comparator);
      }
      const leftNode = math.parse(sides[0]);
      const rightNode = math.parse(sides[1]);
      return new Equation(leftNode, rightNode, comparator);
    };
    module.exports = Equation;
  }
});

// node_modules/mathsteps/lib/equation/Status.js
var require_Status2 = __commonJS({
  "node_modules/mathsteps/lib/equation/Status.js"(exports, module) {
    var ChangeTypes = require_ChangeTypes();
    var Equation = require_Equation();
    var Node = require_node2();
    var Status = class {
      constructor(changeType, oldEquation, newEquation, substeps = []) {
        if (!newEquation) {
          throw Error("new equation isn't defined");
        }
        if (changeType === void 0 || typeof changeType !== "string") {
          throw Error("changetype isn't valid");
        }
        this.changeType = changeType;
        this.oldEquation = oldEquation;
        this.newEquation = newEquation;
        this.substeps = substeps;
      }
      hasChanged() {
        return this.changeType !== ChangeTypes.NO_CHANGE;
      }
    };
    Status.noChange = function(equation) {
      return new Status(ChangeTypes.NO_CHANGE, null, equation);
    };
    Status.addLeftStep = function(equation, leftStep) {
      const substeps = [];
      leftStep.substeps.forEach((substep) => {
        substeps.push(Status.addLeftStep(equation, substep));
      });
      let oldEquation = null;
      if (leftStep.oldNode) {
        oldEquation = equation.clone();
        oldEquation.leftNode = leftStep.oldNode;
      }
      const newEquation = equation.clone();
      newEquation.leftNode = leftStep.newNode;
      return new Status(
        leftStep.changeType,
        oldEquation,
        newEquation,
        substeps
      );
    };
    Status.addRightStep = function(equation, rightStep) {
      const substeps = [];
      rightStep.substeps.forEach((substep) => {
        substeps.push(Status.addRightStep(equation, substep));
      });
      let oldEquation = null;
      if (rightStep.oldNode) {
        oldEquation = equation.clone();
        oldEquation.rightNode = rightStep.oldNode;
      }
      const newEquation = equation.clone();
      newEquation.rightNode = rightStep.newNode;
      return new Status(
        rightStep.changeType,
        oldEquation,
        newEquation,
        substeps
      );
    };
    Status.resetChangeGroups = function(equation) {
      const leftNode = Node.Status.resetChangeGroups(equation.leftNode);
      const rightNode = Node.Status.resetChangeGroups(equation.rightNode);
      return new Equation(leftNode, rightNode, equation.comparator);
    };
    module.exports = Status;
  }
});

// node_modules/mathsteps/lib/solveEquation/EquationOperations.js
var require_EquationOperations = __commonJS({
  "node_modules/mathsteps/lib/solveEquation/EquationOperations.js"(exports, module) {
    var ChangeTypes = require_ChangeTypes();
    var clone = require_clone3();
    var Equation = require_Equation();
    var EquationStatus = require_Status2();
    var Negative = require_Negative();
    var Node = require_node2();
    var Symbols = require_Symbols();
    var COMPARATOR_TO_INVERSE = {
      ">": "<",
      ">=": "<=",
      "<": ">",
      "<=": ">=",
      "=": "="
    };
    var EquationOperations = {};
    EquationOperations.ensureSymbolInLeftNode = function(equation, symbolName) {
      const leftSideSymbolTerm = Symbols.getLastSymbolTerm(
        equation.leftNode,
        symbolName
      );
      const rightSideSymbolTerm = Symbols.getLastSymbolTerm(
        equation.rightNode,
        symbolName
      );
      if (!leftSideSymbolTerm) {
        if (rightSideSymbolTerm) {
          const comparator = COMPARATOR_TO_INVERSE[equation.comparator];
          const oldEquation = equation;
          const newEquation = new Equation(
            equation.rightNode,
            equation.leftNode,
            comparator
          );
          return new EquationStatus(
            ChangeTypes.SWAP_SIDES,
            oldEquation,
            newEquation
          );
        } else {
          throw Error("No term with symbol: " + symbolName);
        }
      }
      return EquationStatus.noChange(equation);
    };
    EquationOperations.removeSymbolFromDenominator = function(equation, symbolName) {
      if (equation.comparator !== "=") {
        return EquationStatus.noChange(equation);
      }
      const leftNode = equation.leftNode;
      const denominator = Symbols.getLastDenominatorWithSymbolTerm(leftNode, symbolName);
      if (denominator) {
        return performTermOperationOnEquation(
          equation,
          "*",
          denominator,
          ChangeTypes.MULTIPLY_TO_BOTH_SIDES
        );
      }
      return EquationStatus.noChange(equation);
    };
    EquationOperations.removeSymbolFromRightSide = function(equation, symbolName) {
      const rightNode = equation.rightNode;
      let symbolTerm = Symbols.getLastSymbolTerm(rightNode, symbolName);
      let inverseOp, inverseTerm, changeType;
      if (!symbolTerm) {
        return EquationStatus.noChange(equation);
      }
      symbolTerm = clone(symbolTerm);
      if (Node.PolynomialTerm.isPolynomialTerm(rightNode)) {
        if (Negative.isNegative(symbolTerm)) {
          inverseOp = "+";
          changeType = ChangeTypes.ADD_TO_BOTH_SIDES;
          inverseTerm = Negative.negate(symbolTerm);
        } else {
          inverseOp = "-";
          changeType = ChangeTypes.SUBTRACT_FROM_BOTH_SIDES;
          inverseTerm = symbolTerm;
        }
      } else if (Node.Type.isOperator(rightNode)) {
        if (rightNode.op === "+") {
          if (Negative.isNegative(symbolTerm)) {
            inverseOp = "+";
            changeType = ChangeTypes.ADD_TO_BOTH_SIDES;
            inverseTerm = Negative.negate(symbolTerm);
          } else {
            inverseOp = "-";
            changeType = ChangeTypes.SUBTRACT_FROM_BOTH_SIDES;
            inverseTerm = symbolTerm;
          }
        } else {
          throw Error("Unsupported operation: " + symbolTerm.op);
        }
      } else if (Node.Type.isUnaryMinus(rightNode)) {
        inverseOp = "+";
        changeType = ChangeTypes.ADD_TO_BOTH_SIDES;
        inverseTerm = symbolTerm.args[0];
      } else {
        throw Error("Unsupported node type: " + rightNode.type);
      }
      return performTermOperationOnEquation(
        equation,
        inverseOp,
        inverseTerm,
        changeType
      );
    };
    EquationOperations.isolateSymbolOnLeftSide = function(equation, symbolName) {
      const leftNode = equation.leftNode;
      let nonSymbolTerm = Symbols.getLastNonSymbolTerm(leftNode, symbolName);
      let inverseOp, inverseTerm, changeType;
      if (!nonSymbolTerm) {
        return EquationStatus.noChange(equation);
      }
      nonSymbolTerm = clone(nonSymbolTerm);
      if (Node.Type.isOperator(leftNode)) {
        if (leftNode.op === "+") {
          if (Negative.isNegative(nonSymbolTerm)) {
            inverseOp = "+";
            changeType = ChangeTypes.ADD_TO_BOTH_SIDES;
            inverseTerm = Negative.negate(nonSymbolTerm);
          } else {
            inverseOp = "-";
            changeType = ChangeTypes.SUBTRACT_FROM_BOTH_SIDES;
            inverseTerm = nonSymbolTerm;
          }
        } else if (leftNode.op === "*") {
          if (Node.Type.isConstantFraction(nonSymbolTerm)) {
            inverseOp = "*";
            changeType = ChangeTypes.MULTIPLY_BOTH_SIDES_BY_INVERSE_FRACTION;
            inverseTerm = Node.Creator.operator(
              "/",
              [nonSymbolTerm.args[1], nonSymbolTerm.args[0]]
            );
          } else {
            inverseOp = "/";
            changeType = ChangeTypes.DIVIDE_FROM_BOTH_SIDES;
            inverseTerm = nonSymbolTerm;
          }
        } else if (leftNode.op === "/") {
          if (["1", "-1"].indexOf(nonSymbolTerm.args[0].value) !== -1) {
            inverseOp = "*";
            changeType = ChangeTypes.MULTIPLY_TO_BOTH_SIDES;
            inverseTerm = nonSymbolTerm.args[1];
          } else {
            inverseOp = "*";
            changeType = ChangeTypes.MULTIPLY_BOTH_SIDES_BY_INVERSE_FRACTION;
            inverseTerm = Node.Creator.operator(
              "/",
              [nonSymbolTerm.args[1], nonSymbolTerm.args[0]]
            );
          }
        } else if (leftNode.op === "^") {
          return EquationStatus.noChange(equation);
        } else {
          throw Error("Unsupported operation: " + leftNode.op);
        }
      } else if (Node.Type.isUnaryMinus(leftNode)) {
        inverseOp = "*";
        changeType = ChangeTypes.MULTIPLY_BOTH_SIDES_BY_NEGATIVE_ONE;
        inverseTerm = Node.Creator.constant(-1);
      } else {
        throw Error("Unsupported node type: " + leftNode.type);
      }
      return performTermOperationOnEquation(
        equation,
        inverseOp,
        inverseTerm,
        changeType
      );
    };
    function performTermOperationOnEquation(equation, op, term, changeType) {
      const oldEquation = equation.clone();
      const leftTerm = clone(term);
      const rightTerm = clone(term);
      const leftNode = performTermOperationOnExpression(
        equation.leftNode,
        op,
        leftTerm
      );
      const rightNode = performTermOperationOnExpression(
        equation.rightNode,
        op,
        rightTerm
      );
      let comparator = equation.comparator;
      if (Negative.isNegative(term) && (op === "*" || op === "/")) {
        comparator = COMPARATOR_TO_INVERSE[comparator];
      }
      const newEquation = new Equation(leftNode, rightNode, comparator);
      return new EquationStatus(changeType, oldEquation, newEquation);
    }
    function performTermOperationOnExpression(expression, op, term) {
      const node = Node.Type.isOperator(expression) ? Node.Creator.parenthesis(expression) : expression;
      term.changeGroup = 1;
      const newNode = Node.Creator.operator(op, [node, term]);
      return newNode;
    }
    module.exports = EquationOperations;
  }
});

// node_modules/mathsteps/lib/solveEquation/stepThrough.js
var require_stepThrough3 = __commonJS({
  "node_modules/mathsteps/lib/solveEquation/stepThrough.js"(exports, module) {
    var ChangeTypes = require_ChangeTypes();
    var checks = require_checks();
    var Equation = require_Equation();
    var EquationOperations = require_EquationOperations();
    var EquationStatus = require_Status2();
    var evaluate = require_evaluate();
    var factor = require_stepThrough();
    var flattenOperands = require_flattenOperands();
    var Node = require_node2();
    var removeUnnecessaryParens = require_removeUnnecessaryParens();
    var simplifyExpressionNode = require_stepThrough2();
    var Symbols = require_Symbols();
    var COMPARATOR_TO_FUNCTION = {
      "=": function(left, right) {
        return left === right;
      },
      ">": function(left, right) {
        return left > right;
      },
      ">=": function(left, right) {
        return left >= right;
      },
      "<": function(left, right) {
        return left < right;
      },
      "<=": function(left, right) {
        return left <= right;
      }
    };
    function stepThrough(leftNode, rightNode, comparator, debug = false) {
      let equation = new Equation(leftNode, rightNode, comparator);
      if (debug) {
        console.log("\n\nSolving: " + equation.ascii(false, true));
      }
      if (checks.hasUnsupportedNodes(equation.leftNode) || checks.hasUnsupportedNodes(equation.rightNode)) {
        return [];
      }
      const symbolSet = Symbols.getSymbolsInEquation(equation);
      if (symbolSet.size === 0) {
        return solveConstantEquation(equation, debug);
      }
      const symbolName = symbolSet.values().next().value;
      let equationStatus;
      let steps = [];
      const originalEquationStr = equation.ascii();
      const MAX_STEP_COUNT = 20;
      let iters = 0;
      equation.leftNode = removeUnnecessaryParens(equation.leftNode);
      equation.rightNode = removeUnnecessaryParens(equation.rightNode);
      if (checks.canFindRoots(equation)) {
        steps.push(getRootsStatus(equation));
        return steps;
      }
      do {
        steps = addSimplificationSteps(steps, equation, debug);
        if (steps.length > 0) {
          const lastStep = steps[steps.length - 1];
          equation = Equation.createEquationFromString(
            lastStep.newEquation.ascii(),
            equation.comparator
          );
        }
        equation.leftNode = flattenOperands(equation.leftNode);
        equation.rightNode = flattenOperands(equation.rightNode);
        if (Symbols.getSymbolsInEquation(equation).size === 0) {
          return solveConstantEquation(equation, debug, steps);
        }
        if (checks.canFindRoots(equation)) {
          steps.push(getRootsStatus(equation));
          return steps;
        }
        try {
          equationStatus = step(equation, symbolName);
        } catch (e) {
          if (e.message.startsWith("No term with symbol: ")) {
            console.error("Math error: " + e.message + ", returning no steps");
            return [];
          } else {
            throw e;
          }
        }
        if (equationStatus.hasChanged()) {
          if (equationStatus.newEquation.ascii().length > 300) {
            throw Error("Math error: Potential infinite loop for equation " + originalEquationStr + ". It reached over 300 characters  long, so returning no steps");
          }
          if (debug) {
            logSteps(equationStatus);
          }
          steps.push(equationStatus);
        }
        equation = EquationStatus.resetChangeGroups(equationStatus.newEquation);
        if (iters++ === MAX_STEP_COUNT) {
          console.error("Math error: Potential infinite loop for equation: " + originalEquationStr + ", returning no steps");
          return [];
        }
      } while (equationStatus.hasChanged());
      return steps;
    }
    function getRootsStatus(equation) {
      const [solutions, symbol] = getSolutionsAndSymbol(equation);
      let allSolutions;
      if (solutions.length > 1) {
        const flattenSolutionsList = [];
        solutions.forEach((s) => s.items ? flattenSolutionsList.push(...s.items) : flattenSolutionsList.push(s));
        allSolutions = Node.Creator.list(flattenSolutionsList);
      } else if (solutions.length === 1) {
        allSolutions = solutions[0];
      } else {
        allSolutions = Node.Creator.list([]);
      }
      const roots = new Equation(symbol, allSolutions, "=");
      return new EquationStatus(ChangeTypes.FIND_ROOTS, equation, roots);
    }
    function getSolutionsAndSymbol(equation) {
      const leftNode = equation.leftNode;
      const solutions = [];
      let symbol, steps, factorsWithSymbols;
      if (Node.Type.isOperator(leftNode, "^") && !checks.resolvesToConstant(leftNode)) {
        factorsWithSymbols = [leftNode];
      } else {
        factorsWithSymbols = equation.leftNode.args.filter((arg) => !checks.resolvesToConstant(arg));
      }
      for (var f in factorsWithSymbols) {
        let factor2 = factorsWithSymbols[f];
        let exponent = 1;
        if (Node.Type.isOperator(factor2, "^")) {
          exponent = parseFloat(factor2.args[1].value);
          factor2 = factor2.args[0];
        }
        const leftNode2 = Node.Type.isParenthesis(factor2) ? factor2.content : factor2;
        steps = stepThrough(leftNode2, equation.rightNode, "=");
        if (steps.length === 0 && Node.Type.isSymbol(leftNode2)) {
          symbol = leftNode2;
          solutions.push(...Array(exponent).fill(equation.rightNode));
        } else if (steps.length !== 0) {
          const lastStep = steps.slice(-1)[0];
          if (Node.Type.isSymbol(lastStep.newEquation.leftNode)) {
            symbol = lastStep.newEquation.leftNode;
            solutions.push(...Array(exponent).fill(lastStep.newEquation.rightNode));
          }
        }
      }
      return [solutions, symbol];
    }
    function solveConstantEquation(equation, debug, steps = []) {
      const compareFunction = COMPARATOR_TO_FUNCTION[equation.comparator];
      if (!compareFunction) {
        throw Error("Unexpected comparator");
      }
      steps = addSimplificationSteps(steps, equation, true, debug);
      if (steps.length > 0) {
        const lastStep = steps[steps.length - 1];
        equation = Equation.createEquationFromString(
          lastStep.newEquation.ascii(),
          equation.comparator
        );
      }
      equation.leftNode = removeUnnecessaryParens(equation.leftNode);
      equation.rightNode = removeUnnecessaryParens(equation.rightNode);
      if (!Node.Type.isConstantOrConstantFraction(equation.leftNode, true) || !Node.Type.isConstantOrConstantFraction(equation.rightNode, true)) {
        throw Error("Expected both nodes to be constants, instead got: " + equation.ascii());
      }
      const leftValue = evaluate(equation.leftNode);
      const rightValue = evaluate(equation.rightNode);
      let changeType;
      if (compareFunction(leftValue, rightValue)) {
        changeType = ChangeTypes.STATEMENT_IS_TRUE;
      } else {
        changeType = ChangeTypes.STATEMENT_IS_FALSE;
      }
      const equationStatus = new EquationStatus(changeType, null, equation);
      if (debug) {
        logSteps(equationStatus);
      }
      steps.push(equationStatus);
      return steps;
    }
    function step(equation, symbolName) {
      const solveFunctions = [
        // ensure the symbol is always on the left node
        EquationOperations.ensureSymbolInLeftNode,
        // get rid of denominators that have the symbol
        EquationOperations.removeSymbolFromDenominator,
        // remove the symbol from the right side
        EquationOperations.removeSymbolFromRightSide,
        // isolate the symbol on the left side
        EquationOperations.isolateSymbolOnLeftSide
      ];
      for (let i = 0; i < solveFunctions.length; i++) {
        const equationStatus = solveFunctions[i](equation, symbolName);
        if (equationStatus.hasChanged()) {
          return equationStatus;
        }
      }
      return EquationStatus.noChange(equation);
    }
    function addSimplificationSteps(steps, equation, debug = false) {
      let oldEquation = equation.clone();
      const leftSimplifySteps = simplifyExpressionNode(equation.leftNode, false);
      const simplifiedLeftNode = leftSimplifySteps.length !== 0 ? leftSimplifySteps.slice(-1)[0].newNode : equation.leftNode;
      const leftFactorSteps = factor(simplifiedLeftNode, false);
      const leftSubSteps = [];
      for (let i = 0; i < leftSimplifySteps.length; i++) {
        const step2 = leftSimplifySteps[i];
        leftSubSteps.push(EquationStatus.addLeftStep(equation, step2));
      }
      for (let i = 0; i < leftFactorSteps.length; i++) {
        const step2 = leftFactorSteps[i];
        leftSubSteps.push(EquationStatus.addLeftStep(equation, step2));
      }
      if (leftSubSteps.length === 1) {
        const step2 = leftSubSteps[0];
        if (debug) {
          logSteps(step2);
        }
        steps.push(step2);
      } else if (leftSubSteps.length > 1) {
        const lastStep = leftSubSteps[leftSubSteps.length - 1];
        const finalEquation = EquationStatus.resetChangeGroups(lastStep.newEquation);
        const simplifyStatus = new EquationStatus(
          ChangeTypes.SIMPLIFY_LEFT_SIDE,
          oldEquation,
          finalEquation,
          leftSubSteps
        );
        if (debug) {
          logSteps(simplifyStatus);
        }
        steps.push(simplifyStatus);
      }
      if (steps.length > 0) {
        equation = EquationStatus.resetChangeGroups(
          steps[steps.length - 1].newEquation
        );
      }
      oldEquation = equation.clone();
      const rightSteps = simplifyExpressionNode(equation.rightNode, false);
      const rightSubSteps = [];
      for (let i = 0; i < rightSteps.length; i++) {
        const step2 = rightSteps[i];
        rightSubSteps.push(EquationStatus.addRightStep(equation, step2));
      }
      if (rightSubSteps.length === 1) {
        const step2 = rightSubSteps[0];
        if (debug) {
          logSteps(step2);
        }
        steps.push(step2);
      } else if (rightSubSteps.length > 1) {
        const lastStep = rightSubSteps[rightSubSteps.length - 1];
        const finalEquation = EquationStatus.resetChangeGroups(lastStep.newEquation);
        const simplifyStatus = new EquationStatus(
          ChangeTypes.SIMPLIFY_RIGHT_SIDE,
          oldEquation,
          finalEquation,
          rightSubSteps
        );
        if (debug) {
          logSteps(simplifyStatus);
        }
        steps.push(simplifyStatus);
      }
      return steps;
    }
    function logSteps(equationStatus) {
      console.log("\n" + equationStatus.changeType);
      console.log(equationStatus.newEquation.ascii());
      if (equationStatus.substeps.length > 0) {
        console.log("\n substeps: ");
        equationStatus.substeps.forEach(logSteps);
      }
    }
    module.exports = stepThrough;
  }
});

// node_modules/mathsteps/lib/solveEquation/index.js
var require_solveEquation = __commonJS({
  "node_modules/mathsteps/lib/solveEquation/index.js"(exports, module) {
    var math = require_mathjs();
    var stepThrough = require_stepThrough3();
    function solveEquationString(equationString, debug = false) {
      const comparators = ["<=", ">=", "=", "<", ">"];
      for (let i = 0; i < comparators.length; i++) {
        const comparator = comparators[i];
        const sides = equationString.split(comparator);
        if (sides.length !== 2) {
          continue;
        }
        let leftNode, rightNode;
        const leftSide = sides[0].trim();
        const rightSide = sides[1].trim();
        if (!leftSide || !rightSide) {
          return [];
        }
        try {
          leftNode = math.parse(leftSide);
          rightNode = math.parse(rightSide);
        } catch (err) {
          return [];
        }
        if (leftNode && rightNode) {
          return stepThrough(leftNode, rightNode, comparator, debug);
        }
      }
      return [];
    }
    module.exports = solveEquationString;
  }
});

// node_modules/mathsteps/index.js
var require_mathsteps = __commonJS({
  "node_modules/mathsteps/index.js"(exports, module) {
    var ChangeTypes = require_ChangeTypes();
    var factor = require_factor();
    var simplifyExpression = require_simplifyExpression();
    var solveEquation = require_solveEquation();
    module.exports = {
      factor,
      simplifyExpression,
      solveEquation,
      ChangeTypes
    };
  }
});
export default require_mathsteps();
/*! Bundled license information:

decimal.js/decimal.js:
  (*! decimal.js v7.1.1 https://github.com/MikeMcl/decimal.js/LICENCE *)

complex.js/complex.js:
  (**
   * @license Complex.js v2.0.1 11/02/2016
   *
   * Copyright (c) 2016, Robert Eisele (robert@xarg.org)
   * Dual licensed under the MIT or GPL Version 2 licenses.
   **)

fraction.js/fraction.js:
  (**
   * @license Fraction.js v4.0.0 09/09/2015
   * http://www.xarg.org/2014/03/rational-numbers-in-javascript/
   *
   * Copyright (c) 2015, Robert Eisele (robert@xarg.org)
   * Dual licensed under the MIT or GPL Version 2 licenses.
   **)
*/
//# sourceMappingURL=mathsteps.js.map

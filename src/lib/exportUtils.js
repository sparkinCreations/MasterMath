// Export utilities for MathMaster
import jsPDF from 'jspdf';

// Helper to extract solution text
function getSolutionText(solution) {
  if (!solution) return '';
  if (typeof solution === 'string') return solution;
  return solution.answer || '';
}

// Export progress history as CSV
export function exportAsCSV(problems, topicLabels) {
  const headers = ['Date', 'Topic', 'Problem', 'Solution'];
  const rows = problems.map(p => [
    new Date(p.createdAt).toLocaleDateString(),
    topicLabels[p.topic] || p.topic,
    `"${p.problem.replace(/"/g, '""')}"`, // Escape quotes
    `"${getSolutionText(p.solution).replace(/"/g, '""')}"`
  ]);

  const csvContent = [
    headers.join(','),
    ...rows.map(row => row.join(','))
  ].join('\n');

  downloadFile(csvContent, 'mathmaster-progress.csv', 'text/csv');
}

// Export progress history as JSON
export function exportAsJSON(problems) {
  const jsonContent = JSON.stringify(problems, null, 2);
  downloadFile(jsonContent, 'mathmaster-progress.json', 'application/json');
}

// Export progress history as Markdown
export function exportAsMarkdown(problems, topicLabels) {
  let markdown = '# MathMaster Progress\n\n';
  markdown += `**Total Problems Solved:** ${problems.length}\n\n`;

  // Group by topic
  const byTopic = {};
  problems.forEach(p => {
    const topic = topicLabels[p.topic] || p.topic;
    if (!byTopic[topic]) byTopic[topic] = [];
    byTopic[topic].push(p);
  });

  Object.entries(byTopic).forEach(([topic, probs]) => {
    markdown += `## ${topic}\n\n`;
    probs.forEach(p => {
      markdown += `### ${new Date(p.createdAt).toLocaleDateString()}\n`;
      markdown += `**Problem:** ${p.problem}\n\n`;
      const solutionText = getSolutionText(p.solution);
      if (solutionText) {
        markdown += `**Solution:** ${solutionText}\n\n`;
      }
      markdown += '---\n\n';
    });
  });

  downloadFile(markdown, 'mathmaster-progress.md', 'text/markdown');
}

// Export individual solution as Markdown
export function exportSolutionAsMarkdown(problem, topic, solution, topicLabels) {
  let markdown = `# ${topicLabels[topic] || topic} Problem\n\n`;
  markdown += `**Problem:** ${problem}\n\n`;

  if (solution.steps && solution.steps.length > 0) {
    markdown += `## Step-by-Step Solution\n\n`;
    solution.steps.forEach((step, idx) => {
      markdown += `${idx + 1}. ${step}\n`;
    });
    markdown += '\n';
  }

  if (solution.answer) {
    markdown += `## Final Answer\n\n${solution.answer}\n\n`;
  }

  if (solution.tips && solution.tips.length > 0) {
    markdown += `## Key Insights\n\n`;
    solution.tips.forEach(tip => {
      markdown += `- ${tip}\n`;
    });
    markdown += '\n';
  }

  if (solution.common_mistakes && solution.common_mistakes.length > 0) {
    markdown += `## Common Mistakes to Avoid\n\n`;
    solution.common_mistakes.forEach(mistake => {
      markdown += `- ${mistake}\n`;
    });
    markdown += '\n';
  }

  markdown += `\n---\n*Generated by MathMaster*\n`;

  const filename = `solution-${topic}-${Date.now()}.md`;
  downloadFile(markdown, filename, 'text/markdown');
}

// Export individual solution as JSON
export function exportSolutionAsJSON(problem, topic, solution) {
  const data = {
    problem,
    topic,
    solution,
    exportedAt: new Date().toISOString()
  };

  const filename = `solution-${topic}-${Date.now()}.json`;
  downloadFile(JSON.stringify(data, null, 2), filename, 'application/json');
}

// Export progress history as PDF
export function exportAsPDF(problems, topicLabels) {
  const doc = new jsPDF();

  // Title
  doc.setFontSize(20);
  doc.text('MathMaster Progress', 20, 20);

  doc.setFontSize(12);
  doc.text(`Total Problems Solved: ${problems.length}`, 20, 35);
  doc.text(`Generated: ${new Date().toLocaleDateString()}`, 20, 45);

  let yPos = 60;
  const pageHeight = doc.internal.pageSize.height;
  const margin = 20;

  problems.forEach((p, idx) => {
    // Check if we need a new page
    if (yPos > pageHeight - 40) {
      doc.addPage();
      yPos = 20;
    }

    doc.setFontSize(10);
    doc.setFont(undefined, 'bold');
    doc.text(`${idx + 1}. ${topicLabels[p.topic] || p.topic}`, margin, yPos);
    yPos += 7;

    doc.setFont(undefined, 'normal');
    doc.setFontSize(9);
    doc.text(`Date: ${new Date(p.createdAt).toLocaleDateString()}`, margin + 5, yPos);
    yPos += 7;

    // Problem text with word wrap
    const problemLines = doc.splitTextToSize(`Problem: ${p.problem}`, 170);
    doc.text(problemLines, margin + 5, yPos);
    yPos += problemLines.length * 5;

    const solutionText = getSolutionText(p.solution);
    if (solutionText) {
      const solutionLines = doc.splitTextToSize(`Solution: ${solutionText}`, 170);
      doc.text(solutionLines, margin + 5, yPos);
      yPos += solutionLines.length * 5;
    }

    yPos += 10; // Space between problems
  });

  doc.save('mathmaster-progress.pdf');
}

// Export individual solution as PDF
export function exportSolutionAsPDF(problem, topic, solution, topicLabels) {
  const doc = new jsPDF();
  const margin = 20;
  let yPos = 20;

  // Title
  doc.setFontSize(18);
  doc.text(`${topicLabels[topic] || topic} Problem`, margin, yPos);
  yPos += 15;

  // Problem
  doc.setFontSize(12);
  doc.setFont(undefined, 'bold');
  doc.text('Problem:', margin, yPos);
  yPos += 8;

  doc.setFont(undefined, 'normal');
  doc.setFontSize(11);
  const problemLines = doc.splitTextToSize(problem, 170);
  doc.text(problemLines, margin, yPos);
  yPos += problemLines.length * 7 + 10;

  // Steps
  if (solution.steps && solution.steps.length > 0) {
    doc.setFontSize(12);
    doc.setFont(undefined, 'bold');
    doc.text('Step-by-Step Solution:', margin, yPos);
    yPos += 10;

    doc.setFont(undefined, 'normal');
    doc.setFontSize(10);
    solution.steps.forEach((step, idx) => {
      const stepLines = doc.splitTextToSize(`${idx + 1}. ${step}`, 165);

      // Check page break
      if (yPos + stepLines.length * 6 > doc.internal.pageSize.height - 20) {
        doc.addPage();
        yPos = 20;
      }

      doc.text(stepLines, margin + 5, yPos);
      yPos += stepLines.length * 6 + 5;
    });
    yPos += 5;
  }

  // Answer
  if (solution.answer) {
    if (yPos > doc.internal.pageSize.height - 30) {
      doc.addPage();
      yPos = 20;
    }

    doc.setFontSize(12);
    doc.setFont(undefined, 'bold');
    doc.text('Final Answer:', margin, yPos);
    yPos += 8;

    doc.setFont(undefined, 'normal');
    doc.setFontSize(11);
    const answerLines = doc.splitTextToSize(solution.answer, 170);
    doc.text(answerLines, margin, yPos);
    yPos += answerLines.length * 7 + 10;
  }

  // Tips
  if (solution.tips && solution.tips.length > 0) {
    if (yPos > doc.internal.pageSize.height - 40) {
      doc.addPage();
      yPos = 20;
    }

    doc.setFontSize(12);
    doc.setFont(undefined, 'bold');
    doc.text('Key Insights:', margin, yPos);
    yPos += 8;

    doc.setFont(undefined, 'normal');
    doc.setFontSize(10);
    solution.tips.forEach(tip => {
      const tipLines = doc.splitTextToSize(`• ${tip}`, 165);

      if (yPos + tipLines.length * 6 > doc.internal.pageSize.height - 20) {
        doc.addPage();
        yPos = 20;
      }

      doc.text(tipLines, margin + 5, yPos);
      yPos += tipLines.length * 6 + 3;
    });
    yPos += 5;
  }

  // Common Mistakes
  if (solution.common_mistakes && solution.common_mistakes.length > 0) {
    if (yPos > doc.internal.pageSize.height - 40) {
      doc.addPage();
      yPos = 20;
    }

    doc.setFontSize(12);
    doc.setFont(undefined, 'bold');
    doc.text('Common Mistakes to Avoid:', margin, yPos);
    yPos += 8;

    doc.setFont(undefined, 'normal');
    doc.setFontSize(10);
    solution.common_mistakes.forEach(mistake => {
      const mistakeLines = doc.splitTextToSize(`• ${mistake}`, 165);

      if (yPos + mistakeLines.length * 6 > doc.internal.pageSize.height - 20) {
        doc.addPage();
        yPos = 20;
      }

      doc.text(mistakeLines, margin + 5, yPos);
      yPos += mistakeLines.length * 6 + 3;
    });
  }

  // Footer
  const pageCount = doc.internal.pages.length - 1;
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    doc.setFontSize(9);
    doc.setFont(undefined, 'normal');
    doc.text('Generated by MathMaster', margin, doc.internal.pageSize.height - 10);
  }

  const filename = `solution-${topic}-${Date.now()}.pdf`;
  doc.save(filename);
}

// Helper function to trigger file download
function downloadFile(content, filename, contentType) {
  const blob = new Blob([content], { type: contentType });
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = filename;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
}
